===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set allow_park = False if not macro_found
	else False if client.park_at_cancel is not defined
	else True  if client.park_at_cancel|lower == 'true'
	else False %}
	{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = ""                                    if not macro_found
	else ""                                    if client.park_at_cancel_x is not defined
	else "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}
	{% set park_y = ""                                    if not macro_found
	else ""                                    if client.park_at_cancel_y is not defined
	else "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}
	{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}
	
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
gcode = 
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE={printer[printer.toolhead.extruder].target}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_fan_speed VALUE={printer["fan"].speed}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_jetstream_speed VALUE={printer["fan_generic Jetstream"].speed}
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	G1 Z{printer.gcode_move.position.z+10} F300
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M107
	UPDATE_DELAYED_GCODE ID=cool_hot_end DURATION=240
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = 0
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}
	
	M109 S{last_extruder_temp}
	M106 S{last_fan_speed*255|int}
	SET_FAN_SPEED FAN=Jetstream SPEED={last_jetstream_speed}
	_CLIENT_EXTRUDE
	BASE_RESUME VELOCITY={params.VELOCITY|default(sp_move)}
variable_last_fan_speed = 0
variable_last_jetstream_speed = 0

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1) | int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = False if not macro_found
	else False if client.use_custom_pos is not defined
	else True  if client.use_custom_pos|lower == 'true'
	else False %}
	{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}
	{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}
	{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set use_fw_retract = False if not macro_found
	else False if client.use_fw_retract is not defined
	else True  if client.use_fw_retract|lower == 'true' and printer.firmware_retraction is defined
	else False %}
	
	{% set length = (params.LENGTH|float) if params.LENGTH is defined
	else 1.0 if not macro_found
	else client.unretract|default(1.0) %}
	
	{% set speed = params.SPEED if params.SPEED is defined
	else 35 if not macro_found
	else client.speed_unretract|default(35) %}
	
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.extruder.can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	
	{% set length = (params.LENGTH|float) if params.LENGTH is defined
	else 1.0 if not macro_found
	else client.retract|default(1.0) %}
	
	{% set speed = params.SPEED if params.SPEED is defined
	else 35 if not macro_found
	else client.speed_retract|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}
	{% set attach_macro = kamp_settings.attach_macro | string %}
	{% set detach_macro = kamp_settings.detach_macro | string %}
	{% set mesh_margin = kamp_settings.mesh_margin | float %}
	{% set fuzz_amount = kamp_settings.fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	{% if printer.exclude_object.objects != [] %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% else %}
	
	{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}
	G4 P5000
	{% endif %}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing = QUAD_GANTRY_LEVEL_BASE
gcode = 
	G28
	M118 Heating the bed, please wait...
	M190 S50
	M118 Complete heating and start executing quad gantry level
	QUAD_GANTRY_LEVEL_BASE
	G28 Z

[gcode_macro CALIBRATE_BED]
description = Level bed and create or update the "default" mesh
gcode = 
	LM_ENABLE
	M190 S50
	M109 S150
	QUAD_GANTRY_LEVEL_BASE
	BED_MESH_CALIBRATE_BASE

[gcode_macro TUNE_BED_PID]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro TUNE_EXTRUDER_PID]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=190

[gcode_macro SET_XYZ_POSITION]
gcode = 
	SET_KINEMATIC_POSITION X=100 Y=100 Z=100

[gcode_macro RUN_INPUT_SHAPER]
gcode = 
	SHAPER_CALIBRATE

[gcode_macro PRINT_START]
gcode = 
	{% set EXTRUDER_TEMP = params.EXTRUDER|default(210)|float %}
	{% set BED_TEMP = params.BED|default(50)|float %}
	LM_ENABLE
	MESH_LOAD
	G28
	G90
	
	LINE_PURGE

[gcode_macro Z_TO_BOTTOM]
gcode = 
	G28
	G1 Z295

[delayed_gcode cool_hot_end]
gcode = 
	{% if printer['pause_resume'].is_paused|int == 1 %}
	M104 S0
	{% endif %}

[gcode_macro MESH_LOAD]
gcode = 
	BED_MESH_PROFILE LOAD=default

[delayed_gcode delay_disable_motor]
gcode = 
	LM_DISABLE

[gcode_macro PRINT_END]
gcode = 
	G91
	G1 Z5
	G1 E-5 F300
	G90
	G1 X200 Y10  F12000
	M104 S0
	M140 S0
	M106 S0
	UPDATE_DELAYED_GCODE ID=delay_disable_motor DURATION=30

[gcode_macro LOAD_FILAMENT]
gcode = 
	{% if printer[printer.toolhead.extruder].temperature > printer.configfile.settings['extruder'].min_extrude_temp %}
	{% set speed = params.SPEED|default(300) %}
	{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
	G91
	G92 E0
	G1 E25 F{speed}
	{% else %}
	M118 Extruder temperature too low,please heat the nozzle first
	{% endif %}

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	{% if printer[printer.toolhead.extruder].temperature > printer.configfile.settings['extruder'].min_extrude_temp %}
	{% set speed = params.SPEED|default(300) %}
	{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
	G92 E0
	G1 E-20 F{max_velocity}
	{% else %}
	M118 Extruder temperature too low, please heat the nozzle first
	{% endif %}

[gcode_macro M106]
rename_existing = G106
gcode = 
	{% if params.P is defined %}
	{% if params.P|int == 2 %}
	{% if params.S is defined %}
	{% if params.S|int == 255 %}
	{% set realspeed = 1 %}
	{% else %}
	{% if params.S|int == 0 %}
	{% set realspeed = 0 %}
	{% else %}
	{% set realspeed = params.S|float/255 %}
	{% endif %}
	{% endif %}
	{% else %}
	{% set realspeed = 1 %}
	{% endif %}
	
	SET_FAN_SPEED FAN=Jetstream SPEED={realspeed}
	{% endif %}
	{% else %}
	{% if params.S is defined %}
	G106 S{params.S}
	{% else %}
	G106 S255
	{% endif %}
	{% endif %}

[gcode_macro M107]
rename_existing = G107
gcode = 
	{% if params.P is defined %}
	{% if params.P|int == 2 %}
	SET_FAN_SPEED FAN=Jetstream SPEED=0
	{% endif %}
	{% else %}
	SET_FAN_SPEED FAN=Jetstream SPEED=0
	G107
	{% endif %}

[gcode_shell_command  RESIZE_FILE_SYSTEM]
command = curl -G http://127.0.0.1:8880/auto_resize_filesystem
timeout = 2.
verbose = False

[gcode_macro RESIZE_FILESYSTEM]
gcode = 
	RUN_SHELL_COMMAND CMD=RESIZE_FILE_SYSTEM

[gcode_shell_command  LINER_MOTOR_ENABLE]
command = curl -G http://127.0.0.1:8880/send_command?command=ENABLE
timeout = 2.
verbose = False

[gcode_shell_command  LINER_MOTOR_DISABLE]
command = curl -G http://127.0.0.1:8880/send_command?command=DISABLE
timeout = 2.
verbose = False

[gcode_macro LINER_MOTOR]
gcode = 
	{% if params.ENABLE is defined %}
	{% if params.ENABLE|int == 0 %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_DISABLE
	{% else %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE
	{% endif %}
	{% else %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE
	{% endif %}

[gcode_macro LM_ENABLE]
gcode = 
	G4 P500
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE

[gcode_macro LM_DISABLE]
gcode = 
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_DISABLE

[mcu MAG_TOOL]
canbus_uuid = 0c2b84bc52ec

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00

[heater_fan hotend_fan]
pin = MAG_TOOL:gpio1
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0
fan_speed = 1.0

[magneto_load_cell]
pin = MAG_TOOL:gpio24

[gcode_button UNL_FILA]
pin = ~MAG_TOOL:gpio27
press_gcode = 
	
	UNLOAD_FILAMENT

[gcode_button L_FILA]
pin = ^!MAG_TOOL:gpio20
press_gcode = 
	
	LOAD_FILAMENT

[output_pin _load_cell_reset_pin]
pin = MAG_TOOL:gpio25
pwm = False
value = 1

[gcode_macro CLEAR_LOAD_CELL]
gcode = 
	LC28

[gcode_button loadcell_overload]
pin = !MAG_TOOL:gpio22
press_gcode = 
	{% if printer.idle_timeout.state != 'Printing' %}
	M118 ERROR: Loadcell overloaded, Z moved to safe position.
	M112
	{% endif %}

[adc_temperature magneto_adc]
temperature1 = 16
voltage1 = 3.189
temperature2 = 84
voltage2 = 2.457
temperature3 = 94
voltage3 = 2.02
temperature4 = 103
voltage4 = 1.86
temperature5 = 116
voltage5 = 1.60
temperature6 = 130
voltage6 = 1.33
temperature7 = 146
voltage7 = 1.06
temperature8 = 166
voltage8 = 0.781
temperature9 = 186
voltage9 = 0.573
temperature10 = 201
voltage10 = 0.431
temperature11 = 216
voltage11 = 0.329
temperature12 = 231
voltage12 = 0.263
temperature13 = 251
voltage13 = 0.215
temperature14 = 271
voltage14 = 0.144
temperature15 = 281
voltage15 = 0.121
temperature16 = 294
voltage16 = 0.101

[extruder]
step_pin = MAG_TOOL:gpio5
dir_pin = !MAG_TOOL:gpio4
enable_pin = !MAG_TOOL:gpio10
rotation_distance = 4.637
microsteps = 16
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.75
heater_pin = MAG_TOOL:gpio0
sensor_pin = MAG_TOOL:gpio26
sensor_type = magneto_adc
max_extrude_cross_section = 5
adc_voltage = 3.3
min_temp = -60
max_temp = 310
max_power = 0.75
min_extrude_temp = 160
control = pid
pid_kp = 14.434
pid_ki = 0.631
pid_kd = 82.604
pressure_advance = 0.0
pressure_advance_smooth_time = 0.040

[tmc2209 extruder]
uart_pin = MAG_TOOL:gpio6
interpolate = false
run_current = 0.8
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[adxl345]
cs_pin = MAG_TOOL:gpio13
spi_software_sclk_pin = MAG_TOOL:gpio14
spi_software_mosi_pin = MAG_TOOL:gpio15
spi_software_miso_pin = MAG_TOOL:gpio12

[resonance_tester]
accel_chip = adxl345
accel_per_hz = 100
probe_points = 200,150,20

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}
	{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | min %}
	{% set y_min = [ y_min - purge_margin , y_min ] | min %}
	{% set x_min = [ x_min , axis_minimum_x ] | max %}
	{% set y_min = [ y_min , axis_minimum_y ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	{% if printer.toolhead.position.z < z_height %}
	G0 Z{z_height}
	{% endif %}
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 10
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[idle_timeout]
timeout = 3600

[gcode_arcs]
resolution = 0.1

[probe]
pin = PE12
x_offset = 0
y_offset = 0
z_offset = -0.15
speed = 2
lift_speed = 7
samples = 3
samples_result = median
sample_retract_dist = 2
samples_tolerance = 0.1
samples_tolerance_retries = 5

[force_move]
enable_force_move = True

[quad_gantry_level]
gantry_corners = 
	0,0
	290,390
points = 
	25,25
	25,380
	290,380
	290,25
speed = 250
horizontal_move_z = 20
retries = 3
retry_tolerance = 0.12
max_adjust = 50

[stepper_x]
step_pin = PF13
dir_pin = !PF12
enable_pin = !PF14
microsteps = 16
endstop_pin = ^!PE8
rotation_distance = 3.2
step_pulse_duration = 0.0000002
position_endstop = 0
position_max = 300
homing_speed = 50

[gcode_button kill_switch]
pin = !PG11
press_gcode = 
	PAUSE
	M118 X or Y motion is blocked.
	M107
	M104 S0

[stepper_y]
step_pin = PG0
dir_pin = !PG1
enable_pin = !PF15
step_pulse_duration = 0.0000002
microsteps = 16
endstop_pin = ^!PE9
rotation_distance = 3.2
position_endstop = 0
position_max = 400
homing_speed = 50

[homing_override]
axes = xyz
set_position_z = 0
gcode = 
	LM_ENABLE
	{% if not 'Z' in params and not 'Y' in params and 'X' in params %}
	G28 X
	{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}
	G28 Y
	{% elif not 'Z' in params and 'X' in params and 'Y' in params %}
	G28 X
	G28 Y
	
	{% else %}
	G90
	G1 Z5
	G28 X
	G28 Y
	G0 X150 Y200 F6000
	G4 P3000
	LC28
	G28 Z
	G1 Z5
	{% endif %}

[bed_mesh]
mesh_min = 0, 0
mesh_max = 270,380
speed = 150
horizontal_move_z = 2
probe_count = 6,8
algorithm = bicubic
split_delta_z = 0.0125
move_check_distance = 3
mesh_pps = 4,4
fade_start = 0
fade_end = 3
fade_target = 0

[stepper_z]
step_pin = PF11
dir_pin = !PG3
enable_pin = !PG5
endstop_pin = probe:z_virtual_endstop
rotation_distance = 4
microsteps = 16
position_max = 300
position_min = -25
homing_speed = 5
second_homing_speed = 2
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = true
run_current = 0.9
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA2
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = true
run_current = 0.9
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z2]
step_pin = PF9
dir_pin = !PF10
enable_pin = !PG2
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = true
run_current = 0.9
hold_current = 0.50
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z3]
step_pin = PC13
dir_pin = !PF0
enable_pin = !PF1
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z3]
uart_pin = PE4
interpolate = true
run_current = 0.9
hold_current = 0.50
sense_resistor = 0.110
stealthchop_threshold = 100

[heater_bed]
heater_pin = PA1
sensor_pin = PF3
sensor_type = Generic 3950
control = pid
pid_kp = 63.238
pid_ki = 0.855
pid_kd = 1169.116
min_temp = -200
max_temp = 130

[multi_pin part_cooling]
pins = MAG_TOOL:gpio17, MAG_TOOL:gpio11

[multi_pin part_cooling_enable]
pins = MAG_TOOL:gpio3, MAG_TOOL:gpio2

[temperature_fan pi]
pin = PD15
max_power = 0.60
control = watermark
max_delta = 5.0
sensor_type = temperature_host
min_temp = 10.0
max_temp = 80.0
target_temp = 55.0
shutdown_speed = 0.0

[fan]
pin = multi_pin:part_cooling
max_power = 1.0
kick_start_time = 0.5
off_below = 0.10
enable_pin = multi_pin:part_cooling_enable

[fan_generic Jetstream]
pin = PE10
enable_pin = PE7
max_power = 1.0
kick_start_time = 0.5
cycle_time = 0.01
off_below = 0.4

[exclude_object]

[respond]

[printer]
kinematics = cartesian
max_velocity = 1500
max_accel = 15000
max_z_velocity = 5
max_z_accel = 100

[board_pins]
aliases = 
	
	EXP1_1=PE8, EXP1_2=PE7,
	EXP1_3=PE9, EXP1_4=PE10,
	EXP1_5=PE12, EXP1_6=PE13,
	EXP1_7=PE14, EXP1_8=PE15,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PA6, EXP2_2=PA5,
	EXP2_3=PB1, EXP2_4=PA4,
	EXP2_5=PB2, EXP2_6=PA7,
	EXP2_7=PC15, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=PC5

[output_pin _led_pin]
pin = PE13
pwm = False
value = 0

[gcode_macro TOGGLE_LIGHTS]
gcode = 
	{% if printer['output_pin _led_pin'].value == 1 %}
	SET_PIN PIN=_led_pin VALUE=0
	{% else %}
	SET_PIN PIN=_led_pin VALUE=1
	{% endif %}

[input_shaper]
shaper_type_y = zv
shaper_freq_y = 27.0
shaper_type_x = ei
shaper_freq_x = 44.4

[bed_mesh default]
version = 1
points = 
	-0.351250, -0.200000, -0.107500, -0.043750, -0.066250, -0.163750
	-0.265000, -0.126250, -0.016250, 0.040000, 0.007500, -0.127500
	-0.215000, -0.068750, -0.006250, 0.067500, 0.045000, -0.108750
	-0.165000, -0.070000, 0.005000, 0.051250, -0.002500, -0.166250
	-0.163750, -0.067500, -0.023750, 0.025000, -0.041250, -0.171250
	-0.138750, -0.117500, -0.038750, -0.031250, -0.075000, -0.188750
	-0.176250, -0.118750, -0.048750, -0.028750, -0.085000, -0.230000
	-0.247500, -0.176250, -0.148750, -0.081250, -0.102500, -0.218750
x_count = 6
y_count = 8
mesh_x_pps = 4
mesh_y_pps = 4
algo = bicubic
tension = 0.2
min_x = 0.0
max_x = 270.0
min_y = 0.0
max_y = 379.96
=======================
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-l', '/home/pi/printer_data/logs/klippy.log', '-I', '/home/pi/printer_data/comms/klippy.serial', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.11.0-275-g8ef0f7d7e-dirty'
Untracked files: klippy/extras/gcode_shell_command.py, klippy/extras/magneto_load_cell.py
Modified files: .github/FUNDING.yml, .github/ISSUE_TEMPLATE/config.yml, .github/workflows/build-test.yaml, .github/workflows/invalid-label-bot.yaml, .github/workflows/klipper3d-deploy.yaml, .github/workflows/reviewer-needed-label.yaml, .github/workflows/stale-issue-bot.yaml, .gitignore, COPYING, Makefile, (+1624 files)
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
webhooks client 281473647671520: {'program': 'Moonraker', 'version': 'v0.8.0-41-g348b7f5'}
=============== Log rollover at Wed Mar  6 03:20:07 2024 ===============
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00'
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 798, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 803, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
No build file /home/pi/klipper/klippy/../.config
No build file /home/pi/klipper/klippy/../out/klipper.dict
No build file /home/pi/klipper/klippy/../out/klipper.elf
Attempting MCU 'mcu' reset
Unhandled exception during post run
Traceback (most recent call last):
  File "/home/pi/klippy-env/lib/python3.9/site-packages/serial/serialposix.py", line 265, in open
    self.fd = os.open(self.portstr, os.O_RDWR | os.O_NOCTTY | os.O_NONBLOCK)
FileNotFoundError: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 234, in run
    self.send_event("klippy:firmware_restart")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 949, in _firmware_restart
    self._restart_arduino()
  File "/home/pi/klipper/klippy/mcu.py", line 909, in _restart_arduino
    serialhdl.arduino_reset(self._serialport, self._reactor)
  File "/home/pi/klipper/klippy/serialhdl.py", line 379, in arduino_reset
    ser = serial.Serial(serialport, 2400, timeout=0, exclusive=True)
  File "/home/pi/klippy-env/lib/python3.9/site-packages/serial/serialutil.py", line 240, in __init__
    self.open()
  File "/home/pi/klippy-env/lib/python3.9/site-packages/serial/serialposix.py", line 268, in open
    raise SerialException(msg.errno, "could not open port {}: {}".format(self._port, msg))
serial.serialutil.SerialException: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_1C003E001951313236343430-if00'
Restarting printer
Start printer at Wed Mar  6 03:42:37 2024 (1709696557.4 1381.8)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set allow_park = False if not macro_found
	else False if client.park_at_cancel is not defined
	else True  if client.park_at_cancel|lower == 'true'
	else False %}
	{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = ""                                    if not macro_found
	else ""                                    if client.park_at_cancel_x is not defined
	else "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}
	{% set park_y = ""                                    if not macro_found
	else ""                                    if client.park_at_cancel_y is not defined
	else "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}
	{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}
	
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
gcode = 
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE={printer[printer.toolhead.extruder].target}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_fan_speed VALUE={printer["fan"].speed}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_jetstream_speed VALUE={printer["fan_generic Jetstream"].speed}
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	G1 Z{printer.gcode_move.position.z+10} F300
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M107
	UPDATE_DELAYED_GCODE ID=cool_hot_end DURATION=240
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = 0
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}
	
	M109 S{last_extruder_temp}
	M106 S{last_fan_speed*255|int}
	SET_FAN_SPEED FAN=Jetstream SPEED={last_jetstream_speed}
	_CLIENT_EXTRUDE
	BASE_RESUME VELOCITY={params.VELOCITY|default(sp_move)}
variable_last_fan_speed = 0
variable_last_jetstream_speed = 0

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1) | int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = False if not macro_found
	else False if client.use_custom_pos is not defined
	else True  if client.use_custom_pos|lower == 'true'
	else False %}
	{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}
	{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}
	{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set use_fw_retract = False if not macro_found
	else False if client.use_fw_retract is not defined
	else True  if client.use_fw_retract|lower == 'true' and printer.firmware_retraction is defined
	else False %}
	
	{% set length = (params.LENGTH|float) if params.LENGTH is defined
	else 1.0 if not macro_found
	else client.unretract|default(1.0) %}
	
	{% set speed = params.SPEED if params.SPEED is defined
	else 35 if not macro_found
	else client.speed_unretract|default(35) %}
	
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.extruder.can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	
	{% set length = (params.LENGTH|float) if params.LENGTH is defined
	else 1.0 if not macro_found
	else client.retract|default(1.0) %}
	
	{% set speed = params.SPEED if params.SPEED is defined
	else 35 if not macro_found
	else client.speed_retract|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}
	{% set attach_macro = kamp_settings.attach_macro | string %}
	{% set detach_macro = kamp_settings.detach_macro | string %}
	{% set mesh_margin = kamp_settings.mesh_margin | float %}
	{% set fuzz_amount = kamp_settings.fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	{% if printer.exclude_object.objects != [] %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% else %}
	
	{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}
	G4 P5000
	{% endif %}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing = QUAD_GANTRY_LEVEL_BASE
gcode = 
	G28
	M118 Heating the bed, please wait...
	M190 S50
	M118 Complete heating and start executing quad gantry level
	QUAD_GANTRY_LEVEL_BASE
	G28 Z

[gcode_macro CALIBRATE_BED]
description = Level bed and create or update the "default" mesh
gcode = 
	LM_ENABLE
	M190 S50
	M109 S150
	QUAD_GANTRY_LEVEL_BASE
	BED_MESH_CALIBRATE_BASE

[gcode_macro TUNE_BED_PID]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro TUNE_EXTRUDER_PID]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=190

[gcode_macro SET_XYZ_POSITION]
gcode = 
	SET_KINEMATIC_POSITION X=100 Y=100 Z=100

[gcode_macro RUN_INPUT_SHAPER]
gcode = 
	SHAPER_CALIBRATE

[gcode_macro PRINT_START]
gcode = 
	{% set EXTRUDER_TEMP = params.EXTRUDER|default(210)|float %}
	{% set BED_TEMP = params.BED|default(50)|float %}
	LM_ENABLE
	MESH_LOAD
	G28
	G90
	
	LINE_PURGE

[gcode_macro Z_TO_BOTTOM]
gcode = 
	G28
	G1 Z295

[delayed_gcode cool_hot_end]
gcode = 
	{% if printer['pause_resume'].is_paused|int == 1 %}
	M104 S0
	{% endif %}

[gcode_macro MESH_LOAD]
gcode = 
	BED_MESH_PROFILE LOAD=default

[delayed_gcode delay_disable_motor]
gcode = 
	LM_DISABLE

[gcode_macro PRINT_END]
gcode = 
	G91
	G1 Z5
	G1 E-5 F300
	G90
	G1 X200 Y10  F12000
	M104 S0
	M140 S0
	M106 S0
	UPDATE_DELAYED_GCODE ID=delay_disable_motor DURATION=30

[gcode_macro LOAD_FILAMENT]
gcode = 
	{% if printer[printer.toolhead.extruder].temperature > printer.configfile.settings['extruder'].min_extrude_temp %}
	{% set speed = params.SPEED|default(300) %}
	{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
	G91
	G92 E0
	G1 E25 F{speed}
	{% else %}
	M118 Extruder temperature too low,please heat the nozzle first
	{% endif %}

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	{% if printer[printer.toolhead.extruder].temperature > printer.configfile.settings['extruder'].min_extrude_temp %}
	{% set speed = params.SPEED|default(300) %}
	{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
	G92 E0
	G1 E-20 F{max_velocity}
	{% else %}
	M118 Extruder temperature too low, please heat the nozzle first
	{% endif %}

[gcode_macro M106]
rename_existing = G106
gcode = 
	{% if params.P is defined %}
	{% if params.P|int == 2 %}
	{% if params.S is defined %}
	{% if params.S|int == 255 %}
	{% set realspeed = 1 %}
	{% else %}
	{% if params.S|int == 0 %}
	{% set realspeed = 0 %}
	{% else %}
	{% set realspeed = params.S|float/255 %}
	{% endif %}
	{% endif %}
	{% else %}
	{% set realspeed = 1 %}
	{% endif %}
	
	SET_FAN_SPEED FAN=Jetstream SPEED={realspeed}
	{% endif %}
	{% else %}
	{% if params.S is defined %}
	G106 S{params.S}
	{% else %}
	G106 S255
	{% endif %}
	{% endif %}

[gcode_macro M107]
rename_existing = G107
gcode = 
	{% if params.P is defined %}
	{% if params.P|int == 2 %}
	SET_FAN_SPEED FAN=Jetstream SPEED=0
	{% endif %}
	{% else %}
	SET_FAN_SPEED FAN=Jetstream SPEED=0
	G107
	{% endif %}

[gcode_shell_command  RESIZE_FILE_SYSTEM]
command = curl -G http://127.0.0.1:8880/auto_resize_filesystem
timeout = 2.
verbose = False

[gcode_macro RESIZE_FILESYSTEM]
gcode = 
	RUN_SHELL_COMMAND CMD=RESIZE_FILE_SYSTEM

[gcode_shell_command  LINER_MOTOR_ENABLE]
command = curl -G http://127.0.0.1:8880/send_command?command=ENABLE
timeout = 2.
verbose = False

[gcode_shell_command  LINER_MOTOR_DISABLE]
command = curl -G http://127.0.0.1:8880/send_command?command=DISABLE
timeout = 2.
verbose = False

[gcode_macro LINER_MOTOR]
gcode = 
	{% if params.ENABLE is defined %}
	{% if params.ENABLE|int == 0 %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_DISABLE
	{% else %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE
	{% endif %}
	{% else %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE
	{% endif %}

[gcode_macro LM_ENABLE]
gcode = 
	G4 P500
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE

[gcode_macro LM_DISABLE]
gcode = 
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_DISABLE

[mcu MAG_TOOL]
canbus_uuid = 70e5d37dad1c

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32h723xx_390038001251313236343430-if00

[heater_fan hotend_fan]
pin = MAG_TOOL:gpio1
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0
fan_speed = 1.0

[magneto_load_cell]
pin = MAG_TOOL:gpio24

[gcode_button UNL_FILA]
pin = ~MAG_TOOL:gpio27
press_gcode = 
	
	UNLOAD_FILAMENT

[gcode_button L_FILA]
pin = ^!MAG_TOOL:gpio20
press_gcode = 
	
	LOAD_FILAMENT

[output_pin _load_cell_reset_pin]
pin = MAG_TOOL:gpio25
pwm = False
value = 1

[gcode_macro CLEAR_LOAD_CELL]
gcode = 
	LC28

[gcode_button loadcell_overload]
pin = !MAG_TOOL:gpio22
press_gcode = 
	{% if printer.idle_timeout.state != 'Printing' %}
	M118 ERROR: Loadcell overloaded, Z moved to safe position.
	M112
	{% endif %}

[adc_temperature magneto_adc]
temperature1 = 16
voltage1 = 3.189
temperature2 = 84
voltage2 = 2.457
temperature3 = 94
voltage3 = 2.02
temperature4 = 103
voltage4 = 1.86
temperature5 = 116
voltage5 = 1.60
temperature6 = 130
voltage6 = 1.33
temperature7 = 146
voltage7 = 1.06
temperature8 = 166
voltage8 = 0.781
temperature9 = 186
voltage9 = 0.573
temperature10 = 201
voltage10 = 0.431
temperature11 = 216
voltage11 = 0.329
temperature12 = 231
voltage12 = 0.263
temperature13 = 251
voltage13 = 0.215
temperature14 = 271
voltage14 = 0.144
temperature15 = 281
voltage15 = 0.121
temperature16 = 294
voltage16 = 0.101

[extruder]
step_pin = MAG_TOOL:gpio5
dir_pin = !MAG_TOOL:gpio4
enable_pin = !MAG_TOOL:gpio10
rotation_distance = 4.637
microsteps = 16
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.75
heater_pin = MAG_TOOL:gpio0
sensor_pin = MAG_TOOL:gpio26
sensor_type = magneto_adc
max_extrude_cross_section = 5
adc_voltage = 3.3
min_temp = -60
max_temp = 310
max_power = 0.75
min_extrude_temp = 160
control = pid
pid_kp = 14.434
pid_ki = 0.631
pid_kd = 82.604
pressure_advance = 0.0
pressure_advance_smooth_time = 0.040

[tmc2209 extruder]
uart_pin = MAG_TOOL:gpio6
interpolate = false
run_current = 0.8
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[adxl345]
cs_pin = MAG_TOOL:gpio13
spi_software_sclk_pin = MAG_TOOL:gpio14
spi_software_mosi_pin = MAG_TOOL:gpio15
spi_software_miso_pin = MAG_TOOL:gpio12

[resonance_tester]
accel_chip = adxl345
accel_per_hz = 100
probe_points = 200,150,20

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}
	{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | min %}
	{% set y_min = [ y_min - purge_margin , y_min ] | min %}
	{% set x_min = [ x_min , axis_minimum_x ] | max %}
	{% set y_min = [ y_min , axis_minimum_y ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	{% if printer.toolhead.position.z < z_height %}
	G0 Z{z_height}
	{% endif %}
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 10
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[idle_timeout]
timeout = 3600

[gcode_arcs]
resolution = 0.1

[probe]
pin = PE12
x_offset = 0
y_offset = 0
z_offset = -0.15
speed = 2
lift_speed = 7
samples = 3
samples_result = median
sample_retract_dist = 2
samples_tolerance = 0.1
samples_tolerance_retries = 5

[force_move]
enable_force_move = True

[quad_gantry_level]
gantry_corners = 
	0,0
	290,390
points = 
	25,25
	25,380
	290,380
	290,25
speed = 250
horizontal_move_z = 20
retries = 3
retry_tolerance = 0.12
max_adjust = 50

[stepper_x]
step_pin = PF13
dir_pin = !PF12
enable_pin = !PF14
microsteps = 16
endstop_pin = ^!PE8
rotation_distance = 3.2
step_pulse_duration = 0.0000002
position_endstop = 0
position_max = 300
homing_speed = 50

[gcode_button kill_switch]
pin = !PG11
press_gcode = 
	PAUSE
	M118 X or Y motion is blocked.
	M107
	M104 S0

[stepper_y]
step_pin = PG0
dir_pin = !PG1
enable_pin = !PF15
step_pulse_duration = 0.0000002
microsteps = 16
endstop_pin = ^!PE9
rotation_distance = 3.2
position_endstop = 0
position_max = 400
homing_speed = 50

[homing_override]
axes = xyz
set_position_z = 0
gcode = 
	LM_ENABLE
	{% if not 'Z' in params and not 'Y' in params and 'X' in params %}
	G28 X
	{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}
	G28 Y
	{% elif not 'Z' in params and 'X' in params and 'Y' in params %}
	G28 X
	G28 Y
	
	{% else %}
	G90
	G1 Z5
	G28 X
	G28 Y
	G0 X150 Y200 F6000
	G4 P3000
	LC28
	G28 Z
	G1 Z5
	{% endif %}

[bed_mesh]
mesh_min = 0, 0
mesh_max = 270,380
speed = 150
horizontal_move_z = 2
probe_count = 6,8
algorithm = bicubic
split_delta_z = 0.0125
move_check_distance = 3
mesh_pps = 4,4
fade_start = 0
fade_end = 3
fade_target = 0

[stepper_z]
step_pin = PF11
dir_pin = !PG3
enable_pin = !PG5
endstop_pin = probe:z_virtual_endstop
rotation_distance = 4
microsteps = 16
position_max = 300
position_min = -25
homing_speed = 5
second_homing_speed = 2
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = true
run_current = 0.9
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA2
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = true
run_current = 0.9
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z2]
step_pin = PF9
dir_pin = !PF10
enable_pin = !PG2
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = true
run_current = 0.9
hold_current = 0.50
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z3]
step_pin = PC13
dir_pin = !PF0
enable_pin = !PF1
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z3]
uart_pin = PE4
interpolate = true
run_current = 0.9
hold_current = 0.50
sense_resistor = 0.110
stealthchop_threshold = 100

[heater_bed]
heater_pin = PA1
sensor_pin = PF3
sensor_type = Generic 3950
control = pid
pid_kp = 63.238
pid_ki = 0.855
pid_kd = 1169.116
min_temp = -200
max_temp = 130

[multi_pin part_cooling]
pins = MAG_TOOL:gpio17, MAG_TOOL:gpio11

[multi_pin part_cooling_enable]
pins = MAG_TOOL:gpio3, MAG_TOOL:gpio2

[temperature_fan pi]
pin = PD15
max_power = 0.60
control = watermark
max_delta = 5.0
sensor_type = temperature_host
min_temp = 10.0
max_temp = 80.0
target_temp = 55.0
shutdown_speed = 0.0

[fan]
pin = multi_pin:part_cooling
max_power = 1.0
kick_start_time = 0.5
off_below = 0.10
enable_pin = multi_pin:part_cooling_enable

[fan_generic Jetstream]
pin = PE10
enable_pin = PE7
max_power = 1.0
kick_start_time = 0.5
cycle_time = 0.01
off_below = 0.4

[exclude_object]

[respond]

[printer]
kinematics = cartesian
max_velocity = 1500
max_accel = 15000
max_z_velocity = 5
max_z_accel = 100

[board_pins]
aliases = 
	
	EXP1_1=PE8, EXP1_2=PE7,
	EXP1_3=PE9, EXP1_4=PE10,
	EXP1_5=PE12, EXP1_6=PE13,
	EXP1_7=PE14, EXP1_8=PE15,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PA6, EXP2_2=PA5,
	EXP2_3=PB1, EXP2_4=PA4,
	EXP2_5=PB2, EXP2_6=PA7,
	EXP2_7=PC15, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=PC5

[output_pin _led_pin]
pin = PE13
pwm = False
value = 0

[gcode_macro TOGGLE_LIGHTS]
gcode = 
	{% if printer['output_pin _led_pin'].value == 1 %}
	SET_PIN PIN=_led_pin VALUE=0
	{% else %}
	SET_PIN PIN=_led_pin VALUE=1
	{% endif %}

[input_shaper]
shaper_type_y = zv
shaper_freq_y = 27.0
shaper_type_x = ei
shaper_freq_x = 44.4

[bed_mesh default]
version = 1
points = 
	-0.351250, -0.200000, -0.107500, -0.043750, -0.066250, -0.163750
	-0.265000, -0.126250, -0.016250, 0.040000, 0.007500, -0.127500
	-0.215000, -0.068750, -0.006250, 0.067500, 0.045000, -0.108750
	-0.165000, -0.070000, 0.005000, 0.051250, -0.002500, -0.166250
	-0.163750, -0.067500, -0.023750, 0.025000, -0.041250, -0.171250
	-0.138750, -0.117500, -0.038750, -0.031250, -0.075000, -0.188750
	-0.176250, -0.118750, -0.048750, -0.028750, -0.085000, -0.230000
	-0.247500, -0.176250, -0.148750, -0.081250, -0.102500, -0.218750
x_count = 6
y_count = 8
mesh_x_pps = 4
mesh_y_pps = 4
algo = bicubic
tension = 0.2
min_x = 0.0
max_x = 270.0
min_y = 0.0
max_y = 379.96
=======================
init magneto load cell
MAG_TOOL:gpio24
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
webhooks client 281473647167376: New connection
webhooks client 281473647167376: Client info {'program': 'Moonraker', 'version': 'v0.8.0-41-g348b7f5'}
Loaded MCU 'mcu' 105 commands (v0.11.0-205-g5f0d252b-dirty-20230817_035150-mainsailos / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3a=PC11,PC12,PC10 BUS_PINS_spi4=PE13,PE14,PE12 BUS_PINS_spi5=PF8,PF9,PF7 BUS_PINS_spi5a=PH7,PF11,PH6 BUS_PINS_spi6=PG12,PG14,PG13 CLOCK_FREQ=400000000 MCU=stm32h723xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PH0,PH1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu 'MAG_TOOL': Starting CAN connect
Created a socket
Loaded MCU 'MAG_TOOL' 107 commands (v0.10.0-530-g3387a9c2-dirty-20221202_025024-mkspi / gcc: (15:7-2018-q2-6) 7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907] binutils: (2.31.1-12+11) 2.31.1)
MCU 'MAG_TOOL' config: ADC_MAX=4095 BUS_PINS_i2c0a=gpio0,gpio1 BUS_PINS_i2c0b=gpio4,gpio5 BUS_PINS_i2c0c=gpio8,gpio9 BUS_PINS_i2c0d=gpio12,gpio13 BUS_PINS_i2c0e=gpio16,gpio17 BUS_PINS_i2c0f=gpio20,gpio21 BUS_PINS_i2c0g=gpio24,gpio25 BUS_PINS_i2c0h=gpio28,gpio29 BUS_PINS_i2c1a=gpio2,gpio3 BUS_PINS_i2c1b=gpio6,gpio7 BUS_PINS_i2c1c=gpio10,gpio11 BUS_PINS_i2c1d=gpio14,gpio15 BUS_PINS_i2c1e=gpio18,gpio19 BUS_PINS_i2c1f=gpio22,gpio23 BUS_PINS_i2c1g=gpio26,gpio27 BUS_PINS_spi0a=gpio0,gpio3,gpio2 BUS_PINS_spi0b=gpio4,gpio7,gpio6 BUS_PINS_spi0c=gpio16,gpio19,gpio18 BUS_PINS_spi0d=gpio20,gpio23,gpio22 BUS_PINS_spi1a=gpio8,gpio11,gpio10 BUS_PINS_spi1b=gpio12,gpio15,gpio14 BUS_PINS_spi1c=gpio24,gpio27,gpio26 CLOCK_FREQ=12000000 MCU=rp2040 PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=gpio8,gpio9 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Sending MCU 'mcu' printer configuration...
Configured MCU 'mcu' (1024 moves)
Sending MCU 'MAG_TOOL' printer configuration...
Configured MCU 'MAG_TOOL' (1024 moves)
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (0.0, 0.0)      | (0.0, 0.0)
  1   | (54.0, 0.0)     | (54.0, 0.0)
  2   | (108.0, 0.0)    | (108.0, 0.0)
  3   | (162.0, 0.0)    | (162.0, 0.0)
  4   | (216.0, 0.0)    | (216.0, 0.0)
  5   | (270.0, 0.0)    | (270.0, 0.0)
  6   | (270.0, 54.3)   | (270.0, 54.3)
  7   | (216.0, 54.3)   | (216.0, 54.3)
  8   | (162.0, 54.3)   | (162.0, 54.3)
  9   | (108.0, 54.3)   | (108.0, 54.3)
  10  | (54.0, 54.3)    | (54.0, 54.3)
  11  | (0.0, 54.3)     | (0.0, 54.3)
  12  | (0.0, 108.6)    | (0.0, 108.6)
  13  | (54.0, 108.6)   | (54.0, 108.6)
  14  | (108.0, 108.6)  | (108.0, 108.6)
  15  | (162.0, 108.6)  | (162.0, 108.6)
  16  | (216.0, 108.6)  | (216.0, 108.6)
  17  | (270.0, 108.6)  | (270.0, 108.6)
  18  | (270.0, 162.8)  | (270.0, 162.8)
  19  | (216.0, 162.8)  | (216.0, 162.8)
  20  | (162.0, 162.8)  | (162.0, 162.8)
  21  | (108.0, 162.8)  | (108.0, 162.8)
  22  | (54.0, 162.8)   | (54.0, 162.8)
  23  | (0.0, 162.8)    | (0.0, 162.8)
  24  | (0.0, 217.1)    | (0.0, 217.1)
  25  | (54.0, 217.1)   | (54.0, 217.1)
  26  | (108.0, 217.1)  | (108.0, 217.1)
  27  | (162.0, 217.1)  | (162.0, 217.1)
  28  | (216.0, 217.1)  | (216.0, 217.1)
  29  | (270.0, 217.1)  | (270.0, 217.1)
  30  | (270.0, 271.4)  | (270.0, 271.4)
  31  | (216.0, 271.4)  | (216.0, 271.4)
  32  | (162.0, 271.4)  | (162.0, 271.4)
  33  | (108.0, 271.4)  | (108.0, 271.4)
  34  | (54.0, 271.4)   | (54.0, 271.4)
  35  | (0.0, 271.4)    | (0.0, 271.4)
  36  | (0.0, 325.7)    | (0.0, 325.7)
  37  | (54.0, 325.7)   | (54.0, 325.7)
  38  | (108.0, 325.7)  | (108.0, 325.7)
  39  | (162.0, 325.7)  | (162.0, 325.7)
  40  | (216.0, 325.7)  | (216.0, 325.7)
  41  | (270.0, 325.7)  | (270.0, 325.7)
  42  | (270.0, 380.0)  | (270.0, 380.0)
  43  | (216.0, 380.0)  | (216.0, 380.0)
  44  | (162.0, 380.0)  | (162.0, 380.0)
  45  | (108.0, 380.0)  | (108.0, 380.0)
  46  | (54.0, 380.0)   | (54.0, 380.0)
  47  | (0.0, 380.0)    | (0.0, 380.0)
Starting heater checks for heater_bed
Starting heater checks for extruder
webhooks: registering remote method 'shutdown_machine' for connection id: 281473647167376
webhooks: registering remote method 'reboot_machine' for connection id: 281473647167376
webhooks: registering remote method 'pause_job_queue' for connection id: 281473647167376
webhooks: registering remote method 'start_job_queue' for connection id: 281473647167376
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-l', '/home/pi/printer_data/logs/klippy.log', '-I', '/home/pi/printer_data/comms/klippy.serial', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.11.0-275-g8ef0f7d7e-dirty'
Untracked files: klippy/extras/gcode_shell_command.py, klippy/extras/magneto_load_cell.py
Modified files: .github/FUNDING.yml, .github/ISSUE_TEMPLATE/config.yml, .github/workflows/build-test.yaml, .github/workflows/invalid-label-bot.yaml, .github/workflows/klipper3d-deploy.yaml, .github/workflows/reviewer-needed-label.yaml, .github/workflows/stale-issue-bot.yaml, .gitignore, COPYING, Makefile, (+1624 files)
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
Start printer at Tue Mar  5 12:05:03 2024 (1709640303.4 26.0)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set allow_park = False if not macro_found
	else False if client.park_at_cancel is not defined
	else True  if client.park_at_cancel|lower == 'true'
	else False %}
	{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = ""                                    if not macro_found
	else ""                                    if client.park_at_cancel_x is not defined
	else "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}
	{% set park_y = ""                                    if not macro_found
	else ""                                    if client.park_at_cancel_y is not defined
	else "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}
	{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}
	
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
gcode = 
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE={printer[printer.toolhead.extruder].target}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_fan_speed VALUE={printer["fan"].speed}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_jetstream_speed VALUE={printer["fan_generic Jetstream"].speed}
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	G1 Z{printer.gcode_move.position.z+10} F300
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M107
	UPDATE_DELAYED_GCODE ID=cool_hot_end DURATION=240
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = 0
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}
	
	M109 S{last_extruder_temp}
	M106 S{last_fan_speed*255|int}
	SET_FAN_SPEED FAN=Jetstream SPEED={last_jetstream_speed}
	_CLIENT_EXTRUDE
	BASE_RESUME VELOCITY={params.VELOCITY|default(sp_move)}
variable_last_fan_speed = 0
variable_last_jetstream_speed = 0

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1) | int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = False if not macro_found
	else False if client.use_custom_pos is not defined
	else True  if client.use_custom_pos|lower == 'true'
	else False %}
	{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}
	{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}
	{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set use_fw_retract = False if not macro_found
	else False if client.use_fw_retract is not defined
	else True  if client.use_fw_retract|lower == 'true' and printer.firmware_retraction is defined
	else False %}
	
	{% set length = (params.LENGTH|float) if params.LENGTH is defined
	else 1.0 if not macro_found
	else client.unretract|default(1.0) %}
	
	{% set speed = params.SPEED if params.SPEED is defined
	else 35 if not macro_found
	else client.speed_unretract|default(35) %}
	
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.extruder.can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	
	{% set length = (params.LENGTH|float) if params.LENGTH is defined
	else 1.0 if not macro_found
	else client.retract|default(1.0) %}
	
	{% set speed = params.SPEED if params.SPEED is defined
	else 35 if not macro_found
	else client.speed_retract|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}
	{% set attach_macro = kamp_settings.attach_macro | string %}
	{% set detach_macro = kamp_settings.detach_macro | string %}
	{% set mesh_margin = kamp_settings.mesh_margin | float %}
	{% set fuzz_amount = kamp_settings.fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	{% if printer.exclude_object.objects != [] %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% else %}
	
	{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}
	G4 P5000
	{% endif %}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing = QUAD_GANTRY_LEVEL_BASE
gcode = 
	G28
	M118 Heating the bed, please wait...
	M190 S50
	M118 Complete heating and start executing quad gantry level
	QUAD_GANTRY_LEVEL_BASE
	G28 Z

[gcode_macro CALIBRATE_BED]
description = Level bed and create or update the "default" mesh
gcode = 
	LM_ENABLE
	M190 S50
	M109 S150
	QUAD_GANTRY_LEVEL_BASE
	BED_MESH_CALIBRATE_BASE

[gcode_macro TUNE_BED_PID]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro TUNE_EXTRUDER_PID]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=190

[gcode_macro SET_XYZ_POSITION]
gcode = 
	SET_KINEMATIC_POSITION X=100 Y=100 Z=100

[gcode_macro RUN_INPUT_SHAPER]
gcode = 
	SHAPER_CALIBRATE

[gcode_macro PRINT_START]
gcode = 
	{% set EXTRUDER_TEMP = params.EXTRUDER|default(210)|float %}
	{% set BED_TEMP = params.BED|default(50)|float %}
	LM_ENABLE
	MESH_LOAD
	G28
	G90
	
	LINE_PURGE

[gcode_macro Z_TO_BOTTOM]
gcode = 
	G28
	G1 Z295

[delayed_gcode cool_hot_end]
gcode = 
	{% if printer['pause_resume'].is_paused|int == 1 %}
	M104 S0
	{% endif %}

[gcode_macro MESH_LOAD]
gcode = 
	BED_MESH_PROFILE LOAD=default

[delayed_gcode delay_disable_motor]
gcode = 
	LM_DISABLE

[gcode_macro PRINT_END]
gcode = 
	G91
	G1 Z5
	G1 E-5 F300
	G90
	G1 X200 Y10  F12000
	M104 S0
	M140 S0
	M106 S0
	UPDATE_DELAYED_GCODE ID=delay_disable_motor DURATION=30

[gcode_macro LOAD_FILAMENT]
gcode = 
	{% if printer[printer.toolhead.extruder].temperature > printer.configfile.settings['extruder'].min_extrude_temp %}
	{% set speed = params.SPEED|default(300) %}
	{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
	G91
	G92 E0
	G1 E25 F{speed}
	{% else %}
	M118 Extruder temperature too low,please heat the nozzle first
	{% endif %}

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	{% if printer[printer.toolhead.extruder].temperature > printer.configfile.settings['extruder'].min_extrude_temp %}
	{% set speed = params.SPEED|default(300) %}
	{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
	G92 E0
	G1 E-20 F{max_velocity}
	{% else %}
	M118 Extruder temperature too low, please heat the nozzle first
	{% endif %}

[gcode_macro M106]
rename_existing = G106
gcode = 
	{% if params.P is defined %}
	{% if params.P|int == 2 %}
	{% if params.S is defined %}
	{% if params.S|int == 255 %}
	{% set realspeed = 1 %}
	{% else %}
	{% if params.S|int == 0 %}
	{% set realspeed = 0 %}
	{% else %}
	{% set realspeed = params.S|float/255 %}
	{% endif %}
	{% endif %}
	{% else %}
	{% set realspeed = 1 %}
	{% endif %}
	
	SET_FAN_SPEED FAN=Jetstream SPEED={realspeed}
	{% endif %}
	{% else %}
	{% if params.S is defined %}
	G106 S{params.S}
	{% else %}
	G106 S255
	{% endif %}
	{% endif %}

[gcode_macro M107]
rename_existing = G107
gcode = 
	{% if params.P is defined %}
	{% if params.P|int == 2 %}
	SET_FAN_SPEED FAN=Jetstream SPEED=0
	{% endif %}
	{% else %}
	SET_FAN_SPEED FAN=Jetstream SPEED=0
	G107
	{% endif %}

[gcode_shell_command  RESIZE_FILE_SYSTEM]
command = curl -G http://127.0.0.1:8880/auto_resize_filesystem
timeout = 2.
verbose = False

[gcode_macro RESIZE_FILESYSTEM]
gcode = 
	RUN_SHELL_COMMAND CMD=RESIZE_FILE_SYSTEM

[gcode_shell_command  LINER_MOTOR_ENABLE]
command = curl -G http://127.0.0.1:8880/send_command?command=ENABLE
timeout = 2.
verbose = False

[gcode_shell_command  LINER_MOTOR_DISABLE]
command = curl -G http://127.0.0.1:8880/send_command?command=DISABLE
timeout = 2.
verbose = False

[gcode_macro LINER_MOTOR]
gcode = 
	{% if params.ENABLE is defined %}
	{% if params.ENABLE|int == 0 %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_DISABLE
	{% else %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE
	{% endif %}
	{% else %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE
	{% endif %}

[gcode_macro LM_ENABLE]
gcode = 
	G4 P500
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE

[gcode_macro LM_DISABLE]
gcode = 
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_DISABLE

[mcu MAG_TOOL]
canbus_uuid = 70e5d37dad1c

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32h723xx_390038001251313236343430-if00

[heater_fan hotend_fan]
pin = MAG_TOOL:gpio1
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0
fan_speed = 1.0

[magneto_load_cell]
pin = MAG_TOOL:gpio24

[gcode_button UNL_FILA]
pin = ~MAG_TOOL:gpio27
press_gcode = 
	
	UNLOAD_FILAMENT

[gcode_button L_FILA]
pin = ^!MAG_TOOL:gpio20
press_gcode = 
	
	LOAD_FILAMENT

[output_pin _load_cell_reset_pin]
pin = MAG_TOOL:gpio25
pwm = False
value = 1

[gcode_macro CLEAR_LOAD_CELL]
gcode = 
	LC28

[gcode_button loadcell_overload]
pin = !MAG_TOOL:gpio22
press_gcode = 
	{% if printer.idle_timeout.state != 'Printing' %}
	M118 ERROR: Loadcell overloaded, Z moved to safe position.
	M112
	{% endif %}

[adc_temperature magneto_adc]
temperature1 = 16
voltage1 = 3.189
temperature2 = 84
voltage2 = 2.457
temperature3 = 94
voltage3 = 2.02
temperature4 = 103
voltage4 = 1.86
temperature5 = 116
voltage5 = 1.60
temperature6 = 130
voltage6 = 1.33
temperature7 = 146
voltage7 = 1.06
temperature8 = 166
voltage8 = 0.781
temperature9 = 186
voltage9 = 0.573
temperature10 = 201
voltage10 = 0.431
temperature11 = 216
voltage11 = 0.329
temperature12 = 231
voltage12 = 0.263
temperature13 = 251
voltage13 = 0.215
temperature14 = 271
voltage14 = 0.144
temperature15 = 281
voltage15 = 0.121
temperature16 = 294
voltage16 = 0.101

[extruder]
step_pin = MAG_TOOL:gpio5
dir_pin = !MAG_TOOL:gpio4
enable_pin = !MAG_TOOL:gpio10
rotation_distance = 4.637
microsteps = 16
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.75
heater_pin = MAG_TOOL:gpio0
sensor_pin = MAG_TOOL:gpio26
sensor_type = magneto_adc
max_extrude_cross_section = 5
adc_voltage = 3.3
min_temp = -60
max_temp = 310
max_power = 0.75
min_extrude_temp = 160
control = pid
pid_kp = 14.434
pid_ki = 0.631
pid_kd = 82.604
pressure_advance = 0.0
pressure_advance_smooth_time = 0.040

[tmc2209 extruder]
uart_pin = MAG_TOOL:gpio6
interpolate = false
run_current = 0.8
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[adxl345]
cs_pin = MAG_TOOL:gpio13
spi_software_sclk_pin = MAG_TOOL:gpio14
spi_software_mosi_pin = MAG_TOOL:gpio15
spi_software_miso_pin = MAG_TOOL:gpio12

[resonance_tester]
accel_chip = adxl345
accel_per_hz = 100
probe_points = 200,150,20

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}
	{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | min %}
	{% set y_min = [ y_min - purge_margin , y_min ] | min %}
	{% set x_min = [ x_min , axis_minimum_x ] | max %}
	{% set y_min = [ y_min , axis_minimum_y ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	{% if printer.toolhead.position.z < z_height %}
	G0 Z{z_height}
	{% endif %}
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 10
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[idle_timeout]
timeout = 3600

[gcode_arcs]
resolution = 0.1

[probe]
pin = PE12
x_offset = 0
y_offset = 0
z_offset = -0.15
speed = 2
lift_speed = 7
samples = 3
samples_result = median
sample_retract_dist = 2
samples_tolerance = 0.1
samples_tolerance_retries = 5

[force_move]
enable_force_move = True

[quad_gantry_level]
gantry_corners = 
	0,0
	290,390
points = 
	25,25
	25,380
	290,380
	290,25
speed = 250
horizontal_move_z = 20
retries = 3
retry_tolerance = 0.12
max_adjust = 50

[stepper_x]
step_pin = PF13
dir_pin = !PF12
enable_pin = !PF14
microsteps = 16
endstop_pin = ^!PE8
rotation_distance = 3.2
step_pulse_duration = 0.0000002
position_endstop = 0
position_max = 300
homing_speed = 50

[gcode_button kill_switch]
pin = !PG11
press_gcode = 
	PAUSE
	M118 X or Y motion is blocked.
	M107
	M104 S0

[stepper_y]
step_pin = PG0
dir_pin = !PG1
enable_pin = !PF15
step_pulse_duration = 0.0000002
microsteps = 16
endstop_pin = ^!PE9
rotation_distance = 3.2
position_endstop = 0
position_max = 400
homing_speed = 50

[homing_override]
axes = xyz
set_position_z = 0
gcode = 
	LM_ENABLE
	{% if not 'Z' in params and not 'Y' in params and 'X' in params %}
	G28 X
	{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}
	G28 Y
	{% elif not 'Z' in params and 'X' in params and 'Y' in params %}
	G28 X
	G28 Y
	
	{% else %}
	G90
	G1 Z5
	G28 X
	G28 Y
	G0 X150 Y200 F6000
	G4 P3000
	LC28
	G28 Z
	G1 Z5
	{% endif %}

[bed_mesh]
mesh_min = 0, 0
mesh_max = 270,380
speed = 150
horizontal_move_z = 2
probe_count = 6,8
algorithm = bicubic
split_delta_z = 0.0125
move_check_distance = 3
mesh_pps = 4,4
fade_start = 0
fade_end = 3
fade_target = 0

[stepper_z]
step_pin = PF11
dir_pin = !PG3
enable_pin = !PG5
endstop_pin = probe:z_virtual_endstop
rotation_distance = 4
microsteps = 16
position_max = 300
position_min = -25
homing_speed = 5
second_homing_speed = 2
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = true
run_current = 0.9
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA2
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = true
run_current = 0.9
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z2]
step_pin = PF9
dir_pin = !PF10
enable_pin = !PG2
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = true
run_current = 0.9
hold_current = 0.50
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z3]
step_pin = PC13
dir_pin = !PF0
enable_pin = !PF1
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z3]
uart_pin = PE4
interpolate = true
run_current = 0.9
hold_current = 0.50
sense_resistor = 0.110
stealthchop_threshold = 100

[heater_bed]
heater_pin = PA1
sensor_pin = PF3
sensor_type = Generic 3950
control = pid
pid_kp = 63.238
pid_ki = 0.855
pid_kd = 1169.116
min_temp = -200
max_temp = 130

[multi_pin part_cooling]
pins = MAG_TOOL:gpio17, MAG_TOOL:gpio11

[multi_pin part_cooling_enable]
pins = MAG_TOOL:gpio3, MAG_TOOL:gpio2

[temperature_fan pi]
pin = PD15
max_power = 0.60
control = watermark
max_delta = 5.0
sensor_type = temperature_host
min_temp = 10.0
max_temp = 80.0
target_temp = 55.0
shutdown_speed = 0.0

[fan]
pin = multi_pin:part_cooling
max_power = 1.0
kick_start_time = 0.5
off_below = 0.10
enable_pin = multi_pin:part_cooling_enable

[fan_generic Jetstream]
pin = PE10
enable_pin = PE7
max_power = 1.0
kick_start_time = 0.5
cycle_time = 0.01
off_below = 0.4

[exclude_object]

[respond]

[printer]
kinematics = cartesian
max_velocity = 1500
max_accel = 15000
max_z_velocity = 5
max_z_accel = 100

[board_pins]
aliases = 
	
	EXP1_1=PE8, EXP1_2=PE7,
	EXP1_3=PE9, EXP1_4=PE10,
	EXP1_5=PE12, EXP1_6=PE13,
	EXP1_7=PE14, EXP1_8=PE15,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PA6, EXP2_2=PA5,
	EXP2_3=PB1, EXP2_4=PA4,
	EXP2_5=PB2, EXP2_6=PA7,
	EXP2_7=PC15, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=PC5

[output_pin _led_pin]
pin = PE13
pwm = False
value = 0

[gcode_macro TOGGLE_LIGHTS]
gcode = 
	{% if printer['output_pin _led_pin'].value == 1 %}
	SET_PIN PIN=_led_pin VALUE=0
	{% else %}
	SET_PIN PIN=_led_pin VALUE=1
	{% endif %}

[input_shaper]
shaper_type_y = zv
shaper_freq_y = 27.0
shaper_type_x = ei
shaper_freq_x = 44.4

[bed_mesh default]
version = 1
points = 
	-0.351250, -0.200000, -0.107500, -0.043750, -0.066250, -0.163750
	-0.265000, -0.126250, -0.016250, 0.040000, 0.007500, -0.127500
	-0.215000, -0.068750, -0.006250, 0.067500, 0.045000, -0.108750
	-0.165000, -0.070000, 0.005000, 0.051250, -0.002500, -0.166250
	-0.163750, -0.067500, -0.023750, 0.025000, -0.041250, -0.171250
	-0.138750, -0.117500, -0.038750, -0.031250, -0.075000, -0.188750
	-0.176250, -0.118750, -0.048750, -0.028750, -0.085000, -0.230000
	-0.247500, -0.176250, -0.148750, -0.081250, -0.102500, -0.218750
x_count = 6
y_count = 8
mesh_x_pps = 4
mesh_y_pps = 4
algo = bicubic
tension = 0.2
min_x = 0.0
max_x = 270.0
min_y = 0.0
max_y = 379.96
=======================
init magneto load cell
MAG_TOOL:gpio24
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
webhooks client 281472901566672: New connection
webhooks client 281472901566672: Client info {'program': 'Moonraker', 'version': 'v0.8.0-41-g348b7f5'}
Loaded MCU 'mcu' 105 commands (v0.11.0-205-g5f0d252b-dirty-20230817_035150-mainsailos / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3a=PC11,PC12,PC10 BUS_PINS_spi4=PE13,PE14,PE12 BUS_PINS_spi5=PF8,PF9,PF7 BUS_PINS_spi5a=PH7,PF11,PH6 BUS_PINS_spi6=PG12,PG14,PG13 CLOCK_FREQ=400000000 MCU=stm32h723xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PH0,PH1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu 'MAG_TOOL': Starting CAN connect
Created a socket
Loaded MCU 'MAG_TOOL' 107 commands (v0.10.0-530-g3387a9c2-dirty-20221202_025024-mkspi / gcc: (15:7-2018-q2-6) 7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907] binutils: (2.31.1-12+11) 2.31.1)
MCU 'MAG_TOOL' config: ADC_MAX=4095 BUS_PINS_i2c0a=gpio0,gpio1 BUS_PINS_i2c0b=gpio4,gpio5 BUS_PINS_i2c0c=gpio8,gpio9 BUS_PINS_i2c0d=gpio12,gpio13 BUS_PINS_i2c0e=gpio16,gpio17 BUS_PINS_i2c0f=gpio20,gpio21 BUS_PINS_i2c0g=gpio24,gpio25 BUS_PINS_i2c0h=gpio28,gpio29 BUS_PINS_i2c1a=gpio2,gpio3 BUS_PINS_i2c1b=gpio6,gpio7 BUS_PINS_i2c1c=gpio10,gpio11 BUS_PINS_i2c1d=gpio14,gpio15 BUS_PINS_i2c1e=gpio18,gpio19 BUS_PINS_i2c1f=gpio22,gpio23 BUS_PINS_i2c1g=gpio26,gpio27 BUS_PINS_spi0a=gpio0,gpio3,gpio2 BUS_PINS_spi0b=gpio4,gpio7,gpio6 BUS_PINS_spi0c=gpio16,gpio19,gpio18 BUS_PINS_spi0d=gpio20,gpio23,gpio22 BUS_PINS_spi1a=gpio8,gpio11,gpio10 BUS_PINS_spi1b=gpio12,gpio15,gpio14 BUS_PINS_spi1c=gpio24,gpio27,gpio26 CLOCK_FREQ=12000000 MCU=rp2040 PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=gpio8,gpio9 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Sending MCU 'mcu' printer configuration...
Configured MCU 'mcu' (1024 moves)
Sending MCU 'MAG_TOOL' printer configuration...
Configured MCU 'MAG_TOOL' (1024 moves)
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (0.0, 0.0)      | (0.0, 0.0)
  1   | (54.0, 0.0)     | (54.0, 0.0)
  2   | (108.0, 0.0)    | (108.0, 0.0)
  3   | (162.0, 0.0)    | (162.0, 0.0)
  4   | (216.0, 0.0)    | (216.0, 0.0)
  5   | (270.0, 0.0)    | (270.0, 0.0)
  6   | (270.0, 54.3)   | (270.0, 54.3)
  7   | (216.0, 54.3)   | (216.0, 54.3)
  8   | (162.0, 54.3)   | (162.0, 54.3)
  9   | (108.0, 54.3)   | (108.0, 54.3)
  10  | (54.0, 54.3)    | (54.0, 54.3)
  11  | (0.0, 54.3)     | (0.0, 54.3)
  12  | (0.0, 108.6)    | (0.0, 108.6)
  13  | (54.0, 108.6)   | (54.0, 108.6)
  14  | (108.0, 108.6)  | (108.0, 108.6)
  15  | (162.0, 108.6)  | (162.0, 108.6)
  16  | (216.0, 108.6)  | (216.0, 108.6)
  17  | (270.0, 108.6)  | (270.0, 108.6)
  18  | (270.0, 162.8)  | (270.0, 162.8)
  19  | (216.0, 162.8)  | (216.0, 162.8)
  20  | (162.0, 162.8)  | (162.0, 162.8)
  21  | (108.0, 162.8)  | (108.0, 162.8)
  22  | (54.0, 162.8)   | (54.0, 162.8)
  23  | (0.0, 162.8)    | (0.0, 162.8)
  24  | (0.0, 217.1)    | (0.0, 217.1)
  25  | (54.0, 217.1)   | (54.0, 217.1)
  26  | (108.0, 217.1)  | (108.0, 217.1)
  27  | (162.0, 217.1)  | (162.0, 217.1)
  28  | (216.0, 217.1)  | (216.0, 217.1)
  29  | (270.0, 217.1)  | (270.0, 217.1)
  30  | (270.0, 271.4)  | (270.0, 271.4)
  31  | (216.0, 271.4)  | (216.0, 271.4)
  32  | (162.0, 271.4)  | (162.0, 271.4)
  33  | (108.0, 271.4)  | (108.0, 271.4)
  34  | (54.0, 271.4)   | (54.0, 271.4)
  35  | (0.0, 271.4)    | (0.0, 271.4)
  36  | (0.0, 325.7)    | (0.0, 325.7)
  37  | (54.0, 325.7)   | (54.0, 325.7)
  38  | (108.0, 325.7)  | (108.0, 325.7)
  39  | (162.0, 325.7)  | (162.0, 325.7)
  40  | (216.0, 325.7)  | (216.0, 325.7)
  41  | (270.0, 325.7)  | (270.0, 325.7)
  42  | (270.0, 380.0)  | (270.0, 380.0)
  43  | (216.0, 380.0)  | (216.0, 380.0)
  44  | (162.0, 380.0)  | (162.0, 380.0)
  45  | (108.0, 380.0)  | (108.0, 380.0)
  46  | (54.0, 380.0)   | (54.0, 380.0)
  47  | (0.0, 380.0)    | (0.0, 380.0)
Starting heater checks for heater_bed
Starting heater checks for extruder
Stats 32.4: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000002 mcu_task_stddev=0.000001 bytes_write=2406 bytes_read=5684 bytes_retransmit=9 bytes_invalid=0 send_seq=219 receive_seq=219 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=400030945 MAG_TOOL: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1356 bytes_read=4691 bytes_retransmit=0 bytes_invalid=0 send_seq=141 receive_seq=141 retransmit_seq=0 srtt=0.002 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12042770 adj=12041706  heater_bed: target=0 temp=0.0 pwm=0.000 sysload=3.50 cputime=5.416 memavail=540960 print_time=0.013 buffer_time=0.000 print_stall=0 extruder: target=0 temp=0.0 pwm=0.000
webhooks: registering remote method 'shutdown_machine' for connection id: 281472901566672
webhooks: registering remote method 'reboot_machine' for connection id: 281472901566672
webhooks: registering remote method 'pause_job_queue' for connection id: 281472901566672
webhooks: registering remote method 'start_job_queue' for connection id: 281472901566672
Stats 33.4: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.00000Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-l', '/home/pi/printer_data/logs/klippy.log', '-I', '/home/pi/printer_data/comms/klippy.serial', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.11.0-275-g8ef0f7d7e-dirty'
Untracked files: klippy/extras/gcode_shell_command.py, klippy/extras/magneto_load_cell.py
Modified files: .github/FUNDING.yml, .github/ISSUE_TEMPLATE/config.yml, .github/workflows/build-test.yaml, .github/workflows/invalid-label-bot.yaml, .github/workflows/klipper3d-deploy.yaml, .github/workflows/reviewer-needed-label.yaml, .github/workflows/stale-issue-bot.yaml, .gitignore, COPYING, Makefile, (+1624 files)
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
Start printer at Tue Mar  5 12:05:02 2024 (1709640302.2 24.4)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set allow_park = False if not macro_found
	else False if client.park_at_cancel is not defined
	else True  if client.park_at_cancel|lower == 'true'
	else False %}
	{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = ""                                    if not macro_found
	else ""                                    if client.park_at_cancel_x is not defined
	else "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}
	{% set park_y = ""                                    if not macro_found
	else ""                                    if client.park_at_cancel_y is not defined
	else "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}
	{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}
	
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
gcode = 
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE={printer[printer.toolhead.extruder].target}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_fan_speed VALUE={printer["fan"].speed}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_jetstream_speed VALUE={printer["fan_generic Jetstream"].speed}
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	G1 Z{printer.gcode_move.position.z+10} F300
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M107
	UPDATE_DELAYED_GCODE ID=cool_hot_end DURATION=240
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = 0
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}
	
	M109 S{last_extruder_temp}
	M106 S{last_fan_speed*255|int}
	SET_FAN_SPEED FAN=Jetstream SPEED={last_jetstream_speed}
	_CLIENT_EXTRUDE
	BASE_RESUME VELOCITY={params.VELOCITY|default(sp_move)}
variable_last_fan_speed = 0
variable_last_jetstream_speed = 0

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1) | int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = False if not macro_found
	else False if client.use_custom_pos is not defined
	else True  if client.use_custom_pos|lower == 'true'
	else False %}
	{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}
	{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}
	{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set use_fw_retract = False if not macro_found
	else False if client.use_fw_retract is not defined
	else True  if client.use_fw_retract|lower == 'true' and printer.firmware_retraction is defined
	else False %}
	
	{% set length = (params.LENGTH|float) if params.LENGTH is defined
	else 1.0 if not macro_found
	else client.unretract|default(1.0) %}
	
	{% set speed = params.SPEED if params.SPEED is defined
	else 35 if not macro_found
	else client.speed_unretract|default(35) %}
	
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.extruder.can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	
	{% set length = (params.LENGTH|float) if params.LENGTH is defined
	else 1.0 if not macro_found
	else client.retract|default(1.0) %}
	
	{% set speed = params.SPEED if params.SPEED is defined
	else 35 if not macro_found
	else client.speed_retract|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}
	{% set attach_macro = kamp_settings.attach_macro | string %}
	{% set detach_macro = kamp_settings.detach_macro | string %}
	{% set mesh_margin = kamp_settings.mesh_margin | float %}
	{% set fuzz_amount = kamp_settings.fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	{% if printer.exclude_object.objects != [] %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% else %}
	
	{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}
	G4 P5000
	{% endif %}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing = QUAD_GANTRY_LEVEL_BASE
gcode = 
	G28
	M118 Heating the bed, please wait...
	M190 S50
	M118 Complete heating and start executing quad gantry level
	QUAD_GANTRY_LEVEL_BASE
	G28 Z

[gcode_macro CALIBRATE_BED]
description = Level bed and create or update the "default" mesh
gcode = 
	LM_ENABLE
	M190 S50
	M109 S150
	QUAD_GANTRY_LEVEL_BASE
	BED_MESH_CALIBRATE_BASE

[gcode_macro TUNE_BED_PID]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro TUNE_EXTRUDER_PID]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=190

[gcode_macro SET_XYZ_POSITION]
gcode = 
	SET_KINEMATIC_POSITION X=100 Y=100 Z=100

[gcode_macro RUN_INPUT_SHAPER]
gcode = 
	SHAPER_CALIBRATE

[gcode_macro PRINT_START]
gcode = 
	{% set EXTRUDER_TEMP = params.EXTRUDER|default(210)|float %}
	{% set BED_TEMP = params.BED|default(50)|float %}
	LM_ENABLE
	MESH_LOAD
	G28
	G90
	
	LINE_PURGE

[gcode_macro Z_TO_BOTTOM]
gcode = 
	G28
	G1 Z295

[delayed_gcode cool_hot_end]
gcode = 
	{% if printer['pause_resume'].is_paused|int == 1 %}
	M104 S0
	{% endif %}

[gcode_macro MESH_LOAD]
gcode = 
	BED_MESH_PROFILE LOAD=default

[delayed_gcode delay_disable_motor]
gcode = 
	LM_DISABLE

[gcode_macro PRINT_END]
gcode = 
	G91
	G1 Z5
	G1 E-5 F300
	G90
	G1 X200 Y10  F12000
	M104 S0
	M140 S0
	M106 S0
	UPDATE_DELAYED_GCODE ID=delay_disable_motor DURATION=30

[gcode_macro LOAD_FILAMENT]
gcode = 
	{% if printer[printer.toolhead.extruder].temperature > printer.configfile.settings['extruder'].min_extrude_temp %}
	{% set speed = params.SPEED|default(300) %}
	{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
	G91
	G92 E0
	G1 E25 F{speed}
	{% else %}
	M118 Extruder temperature too low,please heat the nozzle first
	{% endif %}

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	{% if printer[printer.toolhead.extruder].temperature > printer.configfile.settings['extruder'].min_extrude_temp %}
	{% set speed = params.SPEED|default(300) %}
	{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
	G92 E0
	G1 E-20 F{max_velocity}
	{% else %}
	M118 Extruder temperature too low, please heat the nozzle first
	{% endif %}

[gcode_macro M106]
rename_existing = G106
gcode = 
	{% if params.P is defined %}
	{% if params.P|int == 2 %}
	{% if params.S is defined %}
	{% if params.S|int == 255 %}
	{% set realspeed = 1 %}
	{% else %}
	{% if params.S|int == 0 %}
	{% set realspeed = 0 %}
	{% else %}
	{% set realspeed = params.S|float/255 %}
	{% endif %}
	{% endif %}
	{% else %}
	{% set realspeed = 1 %}
	{% endif %}
	
	SET_FAN_SPEED FAN=Jetstream SPEED={realspeed}
	{% endif %}
	{% else %}
	{% if params.S is defined %}
	G106 S{params.S}
	{% else %}
	G106 S255
	{% endif %}
	{% endif %}

[gcode_macro M107]
rename_existing = G107
gcode = 
	{% if params.P is defined %}
	{% if params.P|int == 2 %}
	SET_FAN_SPEED FAN=Jetstream SPEED=0
	{% endif %}
	{% else %}
	SET_FAN_SPEED FAN=Jetstream SPEED=0
	G107
	{% endif %}

[gcode_shell_command  RESIZE_FILE_SYSTEM]
command = curl -G http://127.0.0.1:8880/auto_resize_filesystem
timeout = 2.
verbose = False

[gcode_macro RESIZE_FILESYSTEM]
gcode = 
	RUN_SHELL_COMMAND CMD=RESIZE_FILE_SYSTEM

[gcode_shell_command  LINER_MOTOR_ENABLE]
command = curl -G http://127.0.0.1:8880/send_command?command=ENABLE
timeout = 2.
verbose = False

[gcode_shell_command  LINER_MOTOR_DISABLE]
command = curl -G http://127.0.0.1:8880/send_command?command=DISABLE
timeout = 2.
verbose = False

[gcode_macro LINER_MOTOR]
gcode = 
	{% if params.ENABLE is defined %}
	{% if params.ENABLE|int == 0 %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_DISABLE
	{% else %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE
	{% endif %}
	{% else %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE
	{% endif %}

[gcode_macro LM_ENABLE]
gcode = 
	G4 P500
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE

[gcode_macro LM_DISABLE]
gcode = 
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_DISABLE

[mcu MAG_TOOL]
canbus_uuid = 70e5d37dad1c

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32h723xx_390038001251313236343430-if00

[heater_fan hotend_fan]
pin = MAG_TOOL:gpio1
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0
fan_speed = 1.0

[magneto_load_cell]
pin = MAG_TOOL:gpio24

[gcode_button UNL_FILA]
pin = ~MAG_TOOL:gpio27
press_gcode = 
	
	UNLOAD_FILAMENT

[gcode_button L_FILA]
pin = ^!MAG_TOOL:gpio20
press_gcode = 
	
	LOAD_FILAMENT

[output_pin _load_cell_reset_pin]
pin = MAG_TOOL:gpio25
pwm = False
value = 1

[gcode_macro CLEAR_LOAD_CELL]
gcode = 
	LC28

[gcode_button loadcell_overload]
pin = !MAG_TOOL:gpio22
press_gcode = 
	{% if printer.idle_timeout.state != 'Printing' %}
	M118 ERROR: Loadcell overloaded, Z moved to safe position.
	M112
	{% endif %}

[adc_temperature magneto_adc]
temperature1 = 16
voltage1 = 3.189
temperature2 = 84
voltage2 = 2.457
temperature3 = 94
voltage3 = 2.02
temperature4 = 103
voltage4 = 1.86
temperature5 = 116
voltage5 = 1.60
temperature6 = 130
voltage6 = 1.33
temperature7 = 146
voltage7 = 1.06
temperature8 = 166
voltage8 = 0.781
temperature9 = 186
voltage9 = 0.573
temperature10 = 201
voltage10 = 0.431
temperature11 = 216
voltage11 = 0.329
temperature12 = 231
voltage12 = 0.263
temperature13 = 251
voltage13 = 0.215
temperature14 = 271
voltage14 = 0.144
temperature15 = 281
voltage15 = 0.121
temperature16 = 294
voltage16 = 0.101

[extruder]
step_pin = MAG_TOOL:gpio5
dir_pin = !MAG_TOOL:gpio4
enable_pin = !MAG_TOOL:gpio10
rotation_distance = 4.637
microsteps = 16
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.75
heater_pin = MAG_TOOL:gpio0
sensor_pin = MAG_TOOL:gpio26
sensor_type = magneto_adc
max_extrude_cross_section = 5
adc_voltage = 3.3
min_temp = -60
max_temp = 310
max_power = 0.75
min_extrude_temp = 160
control = pid
pid_kp = 14.434
pid_ki = 0.631
pid_kd = 82.604
pressure_advance = 0.0
pressure_advance_smooth_time = 0.040

[tmc2209 extruder]
uart_pin = MAG_TOOL:gpio6
interpolate = false
run_current = 0.8
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[adxl345]
cs_pin = MAG_TOOL:gpio13
spi_software_sclk_pin = MAG_TOOL:gpio14
spi_software_mosi_pin = MAG_TOOL:gpio15
spi_software_miso_pin = MAG_TOOL:gpio12

[resonance_tester]
accel_chip = adxl345
accel_per_hz = 100
probe_points = 200,150,20

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}
	{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | min %}
	{% set y_min = [ y_min - purge_margin , y_min ] | min %}
	{% set x_min = [ x_min , axis_minimum_x ] | max %}
	{% set y_min = [ y_min , axis_minimum_y ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	{% if printer.toolhead.position.z < z_height %}
	G0 Z{z_height}
	{% endif %}
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 10
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[idle_timeout]
timeout = 3600

[gcode_arcs]
resolution = 0.1

[probe]
pin = PE12
x_offset = 0
y_offset = 0
z_offset = -0.15
speed = 2
lift_speed = 7
samples = 3
samples_result = median
sample_retract_dist = 2
samples_tolerance = 0.1
samples_tolerance_retries = 5

[force_move]
enable_force_move = True

[quad_gantry_level]
gantry_corners = 
	0,0
	290,390
points = 
	25,25
	25,380
	290,380
	290,25
speed = 250
horizontal_move_z = 20
retries = 3
retry_tolerance = 0.12
max_adjust = 50

[stepper_x]
step_pin = PF13
dir_pin = !PF12
enable_pin = !PF14
microsteps = 16
endstop_pin = ^!PE8
rotation_distance = 3.2
step_pulse_duration = 0.0000002
position_endstop = 0
position_max = 300
homing_speed = 50

[gcode_button kill_switch]
pin = !PG11
press_gcode = 
	PAUSE
	M118 X or Y motion is blocked.
	M107
	M104 S0

[stepper_y]
step_pin = PG0
dir_pin = !PG1
enable_pin = !PF15
step_pulse_duration = 0.0000002
microsteps = 16
endstop_pin = ^!PE9
rotation_distance = 3.2
position_endstop = 0
position_max = 400
homing_speed = 50

[homing_override]
axes = xyz
set_position_z = 0
gcode = 
	LM_ENABLE
	{% if not 'Z' in params and not 'Y' in params and 'X' in params %}
	G28 X
	{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}
	G28 Y
	{% elif not 'Z' in params and 'X' in params and 'Y' in params %}
	G28 X
	G28 Y
	
	{% else %}
	G90
	G1 Z5
	G28 X
	G28 Y
	G0 X150 Y200 F6000
	G4 P3000
	LC28
	G28 Z
	G1 Z5
	{% endif %}

[bed_mesh]
mesh_min = 0, 0
mesh_max = 270,380
speed = 150
horizontal_move_z = 2
probe_count = 6,8
algorithm = bicubic
split_delta_z = 0.0125
move_check_distance = 3
mesh_pps = 4,4
fade_start = 0
fade_end = 3
fade_target = 0

[stepper_z]
step_pin = PF11
dir_pin = !PG3
enable_pin = !PG5
endstop_pin = probe:z_virtual_endstop
rotation_distance = 4
microsteps = 16
position_max = 300
position_min = -25
homing_speed = 5
second_homing_speed = 2
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = true
run_current = 0.9
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA2
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = true
run_current = 0.9
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z2]
step_pin = PF9
dir_pin = !PF10
enable_pin = !PG2
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = true
run_current = 0.9
hold_current = 0.50
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z3]
step_pin = PC13
dir_pin = !PF0
enable_pin = !PF1
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z3]
uart_pin = PE4
interpolate = true
run_current = 0.9
hold_current = 0.50
sense_resistor = 0.110
stealthchop_threshold = 100

[heater_bed]
heater_pin = PA1
sensor_pin = PF3
sensor_type = Generic 3950
control = pid
pid_kp = 63.238
pid_ki = 0.855
pid_kd = 1169.116
min_temp = -200
max_temp = 130

[multi_pin part_cooling]
pins = MAG_TOOL:gpio17, MAG_TOOL:gpio11

[multi_pin part_cooling_enable]
pins = MAG_TOOL:gpio3, MAG_TOOL:gpio2

[temperature_fan pi]
pin = PD15
max_power = 0.60
control = watermark
max_delta = 5.0
sensor_type = temperature_host
min_temp = 10.0
max_temp = 80.0
target_temp = 55.0
shutdown_speed = 0.0

[fan]
pin = multi_pin:part_cooling
max_power = 1.0
kick_start_time = 0.5
off_below = 0.10
enable_pin = multi_pin:part_cooling_enable

[fan_generic Jetstream]
pin = PE10
enable_pin = PE7
max_power = 1.0
kick_start_time = 0.5
cycle_time = 0.01
off_below = 0.4

[exclude_object]

[respond]

[printer]
kinematics = cartesian
max_velocity = 1500
max_accel = 15000
max_z_velocity = 5
max_z_accel = 100

[board_pins]
aliases = 
	
	EXP1_1=PE8, EXP1_2=PE7,
	EXP1_3=PE9, EXP1_4=PE10,
	EXP1_5=PE12, EXP1_6=PE13,
	EXP1_7=PE14, EXP1_8=PE15,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PA6, EXP2_2=PA5,
	EXP2_3=PB1, EXP2_4=PA4,
	EXP2_5=PB2, EXP2_6=PA7,
	EXP2_7=PC15, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=PC5

[output_pin _led_pin]
pin = PE13
pwm = False
value = 0

[gcode_macro TOGGLE_LIGHTS]
gcode = 
	{% if printer['output_pin _led_pin'].value == 1 %}
	SET_PIN PIN=_led_pin VALUE=0
	{% else %}
	SET_PIN PIN=_led_pin VALUE=1
	{% endif %}

[input_shaper]
shaper_type_y = zv
shaper_freq_y = 27.0
shaper_type_x = ei
shaper_freq_x = 44.4

[bed_mesh default]
version = 1
points = 
	-0.351250, -0.200000, -0.107500, -0.043750, -0.066250, -0.163750
	-0.265000, -0.126250, -0.016250, 0.040000, 0.007500, -0.127500
	-0.215000, -0.068750, -0.006250, 0.067500, 0.045000, -0.108750
	-0.165000, -0.070000, 0.005000, 0.051250, -0.002500, -0.166250
	-0.163750, -0.067500, -0.023750, 0.025000, -0.041250, -0.171250
	-0.138750, -0.117500, -0.038750, -0.031250, -0.075000, -0.188750
	-0.176250, -0.118750, -0.048750, -0.028750, -0.085000, -0.230000
	-0.247500, -0.176250, -0.148750, -0.081250, -0.102500, -0.218750
x_count = 6
y_count = 8
mesh_x_pps = 4
mesh_y_pps = 4
algo = bicubic
tension = 0.2
min_x = 0.0
max_x = 270.0
min_y = 0.0
max_y = 379.96
=======================
init magneto load cell
MAG_TOOL:gpio24
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
webhooks client 281473546669216: New connection
Loaded MCU 'mcu' 105 commands (v0.11.0-205-g5f0d252b-dirty-20230817_035150-mainsailos / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3a=PC11,PC12,PC10 BUS_PINS_spi4=PE13,PE14,PE12 BUS_PINS_spi5=PF8,PF9,PF7 BUS_PINS_spi5a=PH7,PF11,PH6 BUS_PINS_spi6=PG12,PG14,PG13 CLOCK_FREQ=400000000 MCU=stm32h723xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PH0,PH1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu 'MAG_TOOL': Starting CAN connect
Created a socket
webhooks client 281473546669216: Client info {'program': 'Moonraker', 'version': 'v0.8.0-41-g348b7f5'}
Loaded MCU 'MAG_TOOL' 107 commands (v0.10.0-530-g3387a9c2-dirty-20221202_025024-mkspi / gcc: (15:7-2018-q2-6) 7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907] binutils: (2.31.1-12+11) 2.31.1)
MCU 'MAG_TOOL' config: ADC_MAX=4095 BUS_PINS_i2c0a=gpio0,gpio1 BUS_PINS_i2c0b=gpio4,gpio5 BUS_PINS_i2c0c=gpio8,gpio9 BUS_PINS_i2c0d=gpio12,gpio13 BUS_PINS_i2c0e=gpio16,gpio17 BUS_PINS_i2c0f=gpio20,gpio21 BUS_PINS_i2c0g=gpio24,gpio25 BUS_PINS_i2c0h=gpio28,gpio29 BUS_PINS_i2c1a=gpio2,gpio3 BUS_PINS_i2c1b=gpio6,gpio7 BUS_PINS_i2c1c=gpio10,gpio11 BUS_PINS_i2c1d=gpio14,gpio15 BUS_PINS_i2c1e=gpio18,gpio19 BUS_PINS_i2c1f=gpio22,gpio23 BUS_PINS_i2c1g=gpio26,gpio27 BUS_PINS_spi0a=gpio0,gpio3,gpio2 BUS_PINS_spi0b=gpio4,gpio7,gpio6 BUS_PINS_spi0c=gpio16,gpio19,gpio18 BUS_PINS_spi0d=gpio20,gpio23,gpio22 BUS_PINS_spi1a=gpio8,gpio11,gpio10 BUS_PINS_spi1b=gpio12,gpio15,gpio14 BUS_PINS_spi1c=gpio24,gpio27,gpio26 CLOCK_FREQ=12000000 MCU=rp2040 PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=gpio8,gpio9 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Sending MCU 'mcu' printer configuration...
Configured MCU 'mcu' (1024 moves)
Sending MCU 'MAG_TOOL' printer configuration...
Configured MCU 'MAG_TOOL' (1024 moves)
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (0.0, 0.0)      | (0.0, 0.0)
  1   | (54.0, 0.0)     | (54.0, 0.0)
  2   | (108.0, 0.0)    | (108.0, 0.0)
  3   | (162.0, 0.0)    | (162.0, 0.0)
  4   | (216.0, 0.0)    | (216.0, 0.0)
  5   | (270.0, 0.0)    | (270.0, 0.0)
  6   | (270.0, 54.3)   | (270.0, 54.3)
  7   | (216.0, 54.3)   | (216.0, 54.3)
  8   | (162.0, 54.3)   | (162.0, 54.3)
  9   | (108.0, 54.3)   | (108.0, 54.3)
  10  | (54.0, 54.3)    | (54.0, 54.3)
  11  | (0.0, 54.3)     | (0.0, 54.3)
  12  | (0.0, 108.6)    | (0.0, 108.6)
  13  | (54.0, 108.6)   | (54.0, 108.6)
  14  | (108.0, 108.6)  | (108.0, 108.6)
  15  | (162.0, 108.6)  | (162.0, 108.6)
  16  | (216.0, 108.6)  | (216.0, 108.6)
  17  | (270.0, 108.6)  | (270.0, 108.6)
  18  | (270.0, 162.8)  | (270.0, 162.8)
  19  | (216.0, 162.8)  | (216.0, 162.8)
  20  | (162.0, 162.8)  | (162.0, 162.8)
  21  | (108.0, 162.8)  | (108.0, 162.8)
  22  | (54.0, 162.8)   | (54.0, 162.8)
  23  | (0.0, 162.8)    | (0.0, 162.8)
  24  | (0.0, 217.1)    | (0.0, 217.1)
  25  | (54.0, 217.1)   | (54.0, 217.1)
  26  | (108.0, 217.1)  | (108.0, 217.1)
  27  | (162.0, 217.1)  | (162.0, 217.1)
  28  | (216.0, 217.1)  | (216.0, 217.1)
  29  | (270.0, 217.1)  | (270.0, 217.1)
  30  | (270.0, 271.4)  | (270.0, 271.4)
  31  | (216.0, 271.4)  | (216.0, 271.4)
  32  | (162.0, 271.4)  | (162.0, 271.4)
  33  | (108.0, 271.4)  | (108.0, 271.4)
  34  | (54.0, 271.4)   | (54.0, 271.4)
  35  | (0.0, 271.4)    | (0.0, 271.4)
  36  | (0.0, 325.7)    | (0.0, 325.7)
  37  | (54.0, 325.7)   | (54.0, 325.7)
  38  | (108.0, 325.7)  | (108.0, 325.7)
  39  | (162.0, 325.7)  | (162.0, 325.7)
  40  | (216.0, 325.7)  | (216.0, 325.7)
  41  | (270.0, 325.7)  | (270.0, 325.7)
  42  | (270.0, 380.0)  | (270.0, 380.0)
  43  | (216.0, 380.0)  | (216.0, 380.0)
  44  | (162.0, 380.0)  | (162.0, 380.0)
  45  | (108.0, 380.0)  | (108.0, 380.0)
  46  | (54.0, 380.0)   | (54.0, 380.0)
  47  | (0.0, 380.0)    | (0.0, 380.0)
Starting heater checks for heater_bed
Starting heater checks for extruder
Stats 30.8: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=2395 bytes_read=5670 bytes_retransmit=9 bytes_invalid=0 send_seq=219 receive_seq=219 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=400029008 MAG_TOOL: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1351 bytes_read=4672 bytes_retransmit=0 bytes_invalid=0 send_seq=140 receive_seq=140 retransmit_seq=0 srtt=0.002 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12041560 adj=12041011  heater_bed: target=0 temp=0.0 pwm=0.000 sysload=2.83 cputime=5.692 memavail=620664 print_time=0.013 buffer_time=0.000 print_stall=0 extruder: target=0 temp=0.0 pwm=0.000
webhooks: registering remote method 'shutdown_machine' for connection id: 281473546669216
webhooks: registering remote method 'reboot_machine' for connection id: 281473546669216
webhooks: registering remote method 'pause_job_queue' for connection id: 281473546669216
webhooks: registering remote method 'start_job_queue' for connection id: 281473546669216
Stats 31.8: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000002 mcu_task_stddev=0.000002 bytes_write=2401 bytes_read=5716 bytes_retransmit=9 bytes_invalid=0 send_seq=220 receive_seq=220 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=400029505 MAG_TOOL: mcu_awake=0.018 mcu_task_avg=0.000017 mcu_task_stddev=0.000030 bytes_write=1365 bytes_read=4747 bytes_retransmit=0 bytes_invalid=0 send_seq=142 receive_seq=142 retransmit_seq=0 srtt=0.003 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12041809 adj=12040594  heater_bed: target=0 temp=24.3 pwm=0.000 sysload=2.83 cputime=5.764 memavail=539192 print_time=0.013 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.4 pwm=0.000
Stats 32.8: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000002 mcu_task_stddev=0.000002 bytes_write=2407 bytes_read=5792 bytes_retransmit=9 bytes_invalid=0 send_seq=221 receive_seq=221 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=400028127 MAG_TOOL: mcu_awake=0.018 mcu_task_avg=0.000017 mcu_task_stddev=0.000030 bytes_write=1371 bytes_read=4808 bytes_retransmit=0 bytes_invalid=0 send_seq=143 receive_seq=143 retransmit_seq=0 srtt=0.003 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12041895 adj=12040967  heater_bed: target=0 temp=24.4 pwm=0.000 sysload=2.83 cputime=5.782 memavail=562972 print_time=0.013 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.3 pwm=0.000
Stats 33.8: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000002 mcu_task_stddev=0.000002 bytes_write=2413 bytes_read=5853 bytes_retransmit=9 bytes_invalid=0 send_seq=222 receive_seq=222 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=400027675 MAG_TOOL: mcu_awake=0.018 mcu_task_avg=0.000017 mcu_task_stddev=0.000030 bytes_write=1377 bytes_read=4869 bytes_retransmit=0 bytes_invalid=0 send_seq=144 receive_seq=144 retransmit_seq=0 srtt=0.002 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12041993 adj=12041224  heater_bed: target=0 temp=24.4 pwm=0.000 sysload=2.83 cputime=5.801 memavail=579888 print_time=0.013 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.4 pwm=0.000
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-l', '/home/pi/printer_data/logs/klippy.log', '-I', '/home/pi/printer_data/comms/klippy.serial', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.11.0-275-g8ef0f7d7e-dirty'
Untracked files: klippy/extras/gcode_shell_command.py, klippy/extras/magneto_load_cell.py
Modified files: .github/FUNDING.yml, .github/ISSUE_TEMPLATE/config.yml, .github/workflows/build-test.yaml, .github/workflows/invalid-label-bot.yaml, .github/workflows/klipper3d-deploy.yaml, .github/workflows/reviewer-needed-label.yaml, .github/workflows/stale-issue-bot.yaml, .gitignore, COPYING, Makefile, (+1624 files)
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
Start printer at Tue Mar  5 12:05:02 2024 (1709640302.4 24.3)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set allow_park = False if not macro_found
	else False if client.park_at_cancel is not defined
	else True  if client.park_at_cancel|lower == 'true'
	else False %}
	{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = ""                                    if not macro_found
	else ""                                    if client.park_at_cancel_x is not defined
	else "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}
	{% set park_y = ""                                    if not macro_found
	else ""                                    if client.park_at_cancel_y is not defined
	else "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}
	{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}
	
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
gcode = 
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE={printer[printer.toolhead.extruder].target}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_fan_speed VALUE={printer["fan"].speed}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_jetstream_speed VALUE={printer["fan_generic Jetstream"].speed}
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	G1 Z{printer.gcode_move.position.z+10} F300
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M107
	UPDATE_DELAYED_GCODE ID=cool_hot_end DURATION=240
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = 0
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}
	
	M109 S{last_extruder_temp}
	M106 S{last_fan_speed*255|int}
	SET_FAN_SPEED FAN=Jetstream SPEED={last_jetstream_speed}
	_CLIENT_EXTRUDE
	BASE_RESUME VELOCITY={params.VELOCITY|default(sp_move)}
variable_last_fan_speed = 0
variable_last_jetstream_speed = 0

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1) | int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = False if not macro_found
	else False if client.use_custom_pos is not defined
	else True  if client.use_custom_pos|lower == 'true'
	else False %}
	{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}
	{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}
	{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set use_fw_retract = False if not macro_found
	else False if client.use_fw_retract is not defined
	else True  if client.use_fw_retract|lower == 'true' and printer.firmware_retraction is defined
	else False %}
	
	{% set length = (params.LENGTH|float) if params.LENGTH is defined
	else 1.0 if not macro_found
	else client.unretract|default(1.0) %}
	
	{% set speed = params.SPEED if params.SPEED is defined
	else 35 if not macro_found
	else client.speed_unretract|default(35) %}
	
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.extruder.can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	
	{% set length = (params.LENGTH|float) if params.LENGTH is defined
	else 1.0 if not macro_found
	else client.retract|default(1.0) %}
	
	{% set speed = params.SPEED if params.SPEED is defined
	else 35 if not macro_found
	else client.speed_retract|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}
	{% set attach_macro = kamp_settings.attach_macro | string %}
	{% set detach_macro = kamp_settings.detach_macro | string %}
	{% set mesh_margin = kamp_settings.mesh_margin | float %}
	{% set fuzz_amount = kamp_settings.fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	{% if printer.exclude_object.objects != [] %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% else %}
	
	{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}
	G4 P5000
	{% endif %}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing = QUAD_GANTRY_LEVEL_BASE
gcode = 
	G28
	M118 Heating the bed, please wait...
	M190 S50
	M118 Complete heating and start executing quad gantry level
	QUAD_GANTRY_LEVEL_BASE
	G28 Z

[gcode_macro CALIBRATE_BED]
description = Level bed and create or update the "default" mesh
gcode = 
	LM_ENABLE
	M190 S50
	M109 S150
	QUAD_GANTRY_LEVEL_BASE
	BED_MESH_CALIBRATE_BASE

[gcode_macro TUNE_BED_PID]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro TUNE_EXTRUDER_PID]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=190

[gcode_macro SET_XYZ_POSITION]
gcode = 
	SET_KINEMATIC_POSITION X=100 Y=100 Z=100

[gcode_macro RUN_INPUT_SHAPER]
gcode = 
	SHAPER_CALIBRATE

[gcode_macro PRINT_START]
gcode = 
	{% set EXTRUDER_TEMP = params.EXTRUDER|default(210)|float %}
	{% set BED_TEMP = params.BED|default(50)|float %}
	LM_ENABLE
	MESH_LOAD
	G28
	G90
	
	LINE_PURGE

[gcode_macro Z_TO_BOTTOM]
gcode = 
	G28
	G1 Z295

[delayed_gcode cool_hot_end]
gcode = 
	{% if printer['pause_resume'].is_paused|int == 1 %}
	M104 S0
	{% endif %}

[gcode_macro MESH_LOAD]
gcode = 
	BED_MESH_PROFILE LOAD=default

[delayed_gcode delay_disable_motor]
gcode = 
	LM_DISABLE

[gcode_macro PRINT_END]
gcode = 
	G91
	G1 Z5
	G1 E-5 F300
	G90
	G1 X200 Y10  F12000
	M104 S0
	M140 S0
	M106 S0
	UPDATE_DELAYED_GCODE ID=delay_disable_motor DURATION=30

[gcode_macro LOAD_FILAMENT]
gcode = 
	{% if printer[printer.toolhead.extruder].temperature > printer.configfile.settings['extruder'].min_extrude_temp %}
	{% set speed = params.SPEED|default(300) %}
	{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
	G91
	G92 E0
	G1 E25 F{speed}
	{% else %}
	M118 Extruder temperature too low,please heat the nozzle first
	{% endif %}

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	{% if printer[printer.toolhead.extruder].temperature > printer.configfile.settings['extruder'].min_extrude_temp %}
	{% set speed = params.SPEED|default(300) %}
	{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
	G92 E0
	G1 E-20 F{max_velocity}
	{% else %}
	M118 Extruder temperature too low, please heat the nozzle first
	{% endif %}

[gcode_macro M106]
rename_existing = G106
gcode = 
	{% if params.P is defined %}
	{% if params.P|int == 2 %}
	{% if params.S is defined %}
	{% if params.S|int == 255 %}
	{% set realspeed = 1 %}
	{% else %}
	{% if params.S|int == 0 %}
	{% set realspeed = 0 %}
	{% else %}
	{% set realspeed = params.S|float/255 %}
	{% endif %}
	{% endif %}
	{% else %}
	{% set realspeed = 1 %}
	{% endif %}
	
	SET_FAN_SPEED FAN=Jetstream SPEED={realspeed}
	{% endif %}
	{% else %}
	{% if params.S is defined %}
	G106 S{params.S}
	{% else %}
	G106 S255
	{% endif %}
	{% endif %}

[gcode_macro M107]
rename_existing = G107
gcode = 
	{% if params.P is defined %}
	{% if params.P|int == 2 %}
	SET_FAN_SPEED FAN=Jetstream SPEED=0
	{% endif %}
	{% else %}
	SET_FAN_SPEED FAN=Jetstream SPEED=0
	G107
	{% endif %}

[gcode_shell_command  RESIZE_FILE_SYSTEM]
command = curl -G http://127.0.0.1:8880/auto_resize_filesystem
timeout = 2.
verbose = False

[gcode_macro RESIZE_FILESYSTEM]
gcode = 
	RUN_SHELL_COMMAND CMD=RESIZE_FILE_SYSTEM

[gcode_shell_command  LINER_MOTOR_ENABLE]
command = curl -G http://127.0.0.1:8880/send_command?command=ENABLE
timeout = 2.
verbose = False

[gcode_shell_command  LINER_MOTOR_DISABLE]
command = curl -G http://127.0.0.1:8880/send_command?command=DISABLE
timeout = 2.
verbose = False

[gcode_macro LINER_MOTOR]
gcode = 
	{% if params.ENABLE is defined %}
	{% if params.ENABLE|int == 0 %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_DISABLE
	{% else %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE
	{% endif %}
	{% else %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE
	{% endif %}

[gcode_macro LM_ENABLE]
gcode = 
	G4 P500
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE

[gcode_macro LM_DISABLE]
gcode = 
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_DISABLE

[mcu MAG_TOOL]
canbus_uuid = 70e5d37dad1c

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32h723xx_390038001251313236343430-if00

[heater_fan hotend_fan]
pin = MAG_TOOL:gpio1
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0
fan_speed = 1.0

[magneto_load_cell]
pin = MAG_TOOL:gpio24

[gcode_button UNL_FILA]
pin = ~MAG_TOOL:gpio27
press_gcode = 
	
	UNLOAD_FILAMENT

[gcode_button L_FILA]
pin = ^!MAG_TOOL:gpio20
press_gcode = 
	
	LOAD_FILAMENT

[output_pin _load_cell_reset_pin]
pin = MAG_TOOL:gpio25
pwm = False
value = 1

[gcode_macro CLEAR_LOAD_CELL]
gcode = 
	LC28

[gcode_button loadcell_overload]
pin = !MAG_TOOL:gpio22
press_gcode = 
	{% if printer.idle_timeout.state != 'Printing' %}
	M118 ERROR: Loadcell overloaded, Z moved to safe position.
	M112
	{% endif %}

[adc_temperature magneto_adc]
temperature1 = 16
voltage1 = 3.189
temperature2 = 84
voltage2 = 2.457
temperature3 = 94
voltage3 = 2.02
temperature4 = 103
voltage4 = 1.86
temperature5 = 116
voltage5 = 1.60
temperature6 = 130
voltage6 = 1.33
temperature7 = 146
voltage7 = 1.06
temperature8 = 166
voltage8 = 0.781
temperature9 = 186
voltage9 = 0.573
temperature10 = 201
voltage10 = 0.431
temperature11 = 216
voltage11 = 0.329
temperature12 = 231
voltage12 = 0.263
temperature13 = 251
voltage13 = 0.215
temperature14 = 271
voltage14 = 0.144
temperature15 = 281
voltage15 = 0.121
temperature16 = 294
voltage16 = 0.101

[extruder]
step_pin = MAG_TOOL:gpio5
dir_pin = !MAG_TOOL:gpio4
enable_pin = !MAG_TOOL:gpio10
rotation_distance = 4.637
microsteps = 16
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.75
heater_pin = MAG_TOOL:gpio0
sensor_pin = MAG_TOOL:gpio26
sensor_type = magneto_adc
max_extrude_cross_section = 5
adc_voltage = 3.3
min_temp = -60
max_temp = 310
max_power = 0.75
min_extrude_temp = 160
control = pid
pid_kp = 14.434
pid_ki = 0.631
pid_kd = 82.604
pressure_advance = 0.0
pressure_advance_smooth_time = 0.040

[tmc2209 extruder]
uart_pin = MAG_TOOL:gpio6
interpolate = false
run_current = 0.8
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[adxl345]
cs_pin = MAG_TOOL:gpio13
spi_software_sclk_pin = MAG_TOOL:gpio14
spi_software_mosi_pin = MAG_TOOL:gpio15
spi_software_miso_pin = MAG_TOOL:gpio12

[resonance_tester]
accel_chip = adxl345
accel_per_hz = 100
probe_points = 200,150,20

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}
	{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | min %}
	{% set y_min = [ y_min - purge_margin , y_min ] | min %}
	{% set x_min = [ x_min , axis_minimum_x ] | max %}
	{% set y_min = [ y_min , axis_minimum_y ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	{% if printer.toolhead.position.z < z_height %}
	G0 Z{z_height}
	{% endif %}
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 10
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[idle_timeout]
timeout = 3600

[gcode_arcs]
resolution = 0.1

[probe]
pin = PE12
x_offset = 0
y_offset = 0
z_offset = -0.15
speed = 2
lift_speed = 7
samples = 3
samples_result = median
sample_retract_dist = 2
samples_tolerance = 0.1
samples_tolerance_retries = 5

[force_move]
enable_force_move = True

[quad_gantry_level]
gantry_corners = 
	0,0
	290,390
points = 
	25,25
	25,380
	290,380
	290,25
speed = 250
horizontal_move_z = 20
retries = 3
retry_tolerance = 0.12
max_adjust = 50

[stepper_x]
step_pin = PF13
dir_pin = !PF12
enable_pin = !PF14
microsteps = 16
endstop_pin = ^!PE8
rotation_distance = 3.2
step_pulse_duration = 0.0000002
position_endstop = 0
position_max = 300
homing_speed = 50

[gcode_button kill_switch]
pin = !PG11
press_gcode = 
	PAUSE
	M118 X or Y motion is blocked.
	M107
	M104 S0

[stepper_y]
step_pin = PG0
dir_pin = !PG1
enable_pin = !PF15
step_pulse_duration = 0.0000002
microsteps = 16
endstop_pin = ^!PE9
rotation_distance = 3.2
position_endstop = 0
position_max = 400
homing_speed = 50

[homing_override]
axes = xyz
set_position_z = 0
gcode = 
	LM_ENABLE
	{% if not 'Z' in params and not 'Y' in params and 'X' in params %}
	G28 X
	{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}
	G28 Y
	{% elif not 'Z' in params and 'X' in params and 'Y' in params %}
	G28 X
	G28 Y
	
	{% else %}
	G90
	G1 Z5
	G28 X
	G28 Y
	G0 X150 Y200 F6000
	G4 P3000
	LC28
	G28 Z
	G1 Z5
	{% endif %}

[bed_mesh]
mesh_min = 0, 0
mesh_max = 270,380
speed = 150
horizontal_move_z = 2
probe_count = 6,8
algorithm = bicubic
split_delta_z = 0.0125
move_check_distance = 3
mesh_pps = 4,4
fade_start = 0
fade_end = 3
fade_target = 0

[stepper_z]
step_pin = PF11
dir_pin = !PG3
enable_pin = !PG5
endstop_pin = probe:z_virtual_endstop
rotation_distance = 4
microsteps = 16
position_max = 300
position_min = -25
homing_speed = 5
second_homing_speed = 2
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = true
run_current = 0.9
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA2
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = true
run_current = 0.9
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z2]
step_pin = PF9
dir_pin = !PF10
enable_pin = !PG2
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = true
run_current = 0.9
hold_current = 0.50
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z3]
step_pin = PC13
dir_pin = !PF0
enable_pin = !PF1
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z3]
uart_pin = PE4
interpolate = true
run_current = 0.9
hold_current = 0.50
sense_resistor = 0.110
stealthchop_threshold = 100

[heater_bed]
heater_pin = PA1
sensor_pin = PF3
sensor_type = Generic 3950
control = pid
pid_kp = 63.238
pid_ki = 0.855
pid_kd = 1169.116
min_temp = -200
max_temp = 130

[multi_pin part_cooling]
pins = MAG_TOOL:gpio17, MAG_TOOL:gpio11

[multi_pin part_cooling_enable]
pins = MAG_TOOL:gpio3, MAG_TOOL:gpio2

[temperature_fan pi]
pin = PD15
max_power = 0.60
control = watermark
max_delta = 5.0
sensor_type = temperature_host
min_temp = 10.0
max_temp = 80.0
target_temp = 55.0
shutdown_speed = 0.0

[fan]
pin = multi_pin:part_cooling
max_power = 1.0
kick_start_time = 0.5
off_below = 0.10
enable_pin = multi_pin:part_cooling_enable

[fan_generic Jetstream]
pin = PE10
enable_pin = PE7
max_power = 1.0
kick_start_time = 0.5
cycle_time = 0.01
off_below = 0.4

[exclude_object]

[respond]

[printer]
kinematics = cartesian
max_velocity = 1500
max_accel = 15000
max_z_velocity = 5
max_z_accel = 100

[board_pins]
aliases = 
	
	EXP1_1=PE8, EXP1_2=PE7,
	EXP1_3=PE9, EXP1_4=PE10,
	EXP1_5=PE12, EXP1_6=PE13,
	EXP1_7=PE14, EXP1_8=PE15,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PA6, EXP2_2=PA5,
	EXP2_3=PB1, EXP2_4=PA4,
	EXP2_5=PB2, EXP2_6=PA7,
	EXP2_7=PC15, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=PC5

[output_pin _led_pin]
pin = PE13
pwm = False
value = 0

[gcode_macro TOGGLE_LIGHTS]
gcode = 
	{% if printer['output_pin _led_pin'].value == 1 %}
	SET_PIN PIN=_led_pin VALUE=0
	{% else %}
	SET_PIN PIN=_led_pin VALUE=1
	{% endif %}

[input_shaper]
shaper_type_y = zv
shaper_freq_y = 27.0
shaper_type_x = ei
shaper_freq_x = 44.4

[bed_mesh default]
version = 1
points = 
	-0.351250, -0.200000, -0.107500, -0.043750, -0.066250, -0.163750
	-0.265000, -0.126250, -0.016250, 0.040000, 0.007500, -0.127500
	-0.215000, -0.068750, -0.006250, 0.067500, 0.045000, -0.108750
	-0.165000, -0.070000, 0.005000, 0.051250, -0.002500, -0.166250
	-0.163750, -0.067500, -0.023750, 0.025000, -0.041250, -0.171250
	-0.138750, -0.117500, -0.038750, -0.031250, -0.075000, -0.188750
	-0.176250, -0.118750, -0.048750, -0.028750, -0.085000, -0.230000
	-0.247500, -0.176250, -0.148750, -0.081250, -0.102500, -0.218750
x_count = 6
y_count = 8
mesh_x_pps = 4
mesh_y_pps = 4
algo = bicubic
tension = 0.2
min_x = 0.0
max_x = 270.0
min_y = 0.0
max_y = 379.96
=======================
init magneto load cell
MAG_TOOL:gpio24
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
webhooks client 281472917348016: New connection
webhooks client 281472917348016: Client info {'program': 'Moonraker', 'version': 'v0.8.0-41-g348b7f5'}
Loaded MCU 'mcu' 105 commands (v0.11.0-205-g5f0d252b-dirty-20230817_035150-mainsailos / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3a=PC11,PC12,PC10 BUS_PINS_spi4=PE13,PE14,PE12 BUS_PINS_spi5=PF8,PF9,PF7 BUS_PINS_spi5a=PH7,PF11,PH6 BUS_PINS_spi6=PG12,PG14,PG13 CLOCK_FREQ=400000000 MCU=stm32h723xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PH0,PH1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu 'MAG_TOOL': Starting CAN connect
Created a socket
Loaded MCU 'MAG_TOOL' 107 commands (v0.10.0-530-g3387a9c2-dirty-20221202_025024-mkspi / gcc: (15:7-2018-q2-6) 7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907] binutils: (2.31.1-12+11) 2.31.1)
MCU 'MAG_TOOL' config: ADC_MAX=4095 BUS_PINS_i2c0a=gpio0,gpio1 BUS_PINS_i2c0b=gpio4,gpio5 BUS_PINS_i2c0c=gpio8,gpio9 BUS_PINS_i2c0d=gpio12,gpio13 BUS_PINS_i2c0e=gpio16,gpio17 BUS_PINS_i2c0f=gpio20,gpio21 BUS_PINS_i2c0g=gpio24,gpio25 BUS_PINS_i2c0h=gpio28,gpio29 BUS_PINS_i2c1a=gpio2,gpio3 BUS_PINS_i2c1b=gpio6,gpio7 BUS_PINS_i2c1c=gpio10,gpio11 BUS_PINS_i2c1d=gpio14,gpio15 BUS_PINS_i2c1e=gpio18,gpio19 BUS_PINS_i2c1f=gpio22,gpio23 BUS_PINS_i2c1g=gpio26,gpio27 BUS_PINS_spi0a=gpio0,gpio3,gpio2 BUS_PINS_spi0b=gpio4,gpio7,gpio6 BUS_PINS_spi0c=gpio16,gpio19,gpio18 BUS_PINS_spi0d=gpio20,gpio23,gpio22 BUS_PINS_spi1a=gpio8,gpio11,gpio10 BUS_PINS_spi1b=gpio12,gpio15,gpio14 BUS_PINS_spi1c=gpio24,gpio27,gpio26 CLOCK_FREQ=12000000 MCU=rp2040 PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=gpio8,gpio9 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Sending MCU 'mcu' printer configuration...
Configured MCU 'mcu' (1024 moves)
Sending MCU 'MAG_TOOL' printer configuration...
Configured MCU 'MAG_TOOL' (1024 moves)
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (0.0, 0.0)      | (0.0, 0.0)
  1   | (54.0, 0.0)     | (54.0, 0.0)
  2   | (108.0, 0.0)    | (108.0, 0.0)
  3   | (162.0, 0.0)    | (162.0, 0.0)
  4   | (216.0, 0.0)    | (216.0, 0.0)
  5   | (270.0, 0.0)    | (270.0, 0.0)
  6   | (270.0, 54.3)   | (270.0, 54.3)
  7   | (216.0, 54.3)   | (216.0, 54.3)
  8   | (162.0, 54.3)   | (162.0, 54.3)
  9   | (108.0, 54.3)   | (108.0, 54.3)
  10  | (54.0, 54.3)    | (54.0, 54.3)
  11  | (0.0, 54.3)     | (0.0, 54.3)
  12  | (0.0, 108.6)    | (0.0, 108.6)
  13  | (54.0, 108.6)   | (54.0, 108.6)
  14  | (108.0, 108.6)  | (108.0, 108.6)
  15  | (162.0, 108.6)  | (162.0, 108.6)
  16  | (216.0, 108.6)  | (216.0, 108.6)
  17  | (270.0, 108.6)  | (270.0, 108.6)
  18  | (270.0, 162.8)  | (270.0, 162.8)
  19  | (216.0, 162.8)  | (216.0, 162.8)
  20  | (162.0, 162.8)  | (162.0, 162.8)
  21  | (108.0, 162.8)  | (108.0, 162.8)
  22  | (54.0, 162.8)   | (54.0, 162.8)
  23  | (0.0, 162.8)    | (0.0, 162.8)
  24  | (0.0, 217.1)    | (0.0, 217.1)
  25  | (54.0, 217.1)   | (54.0, 217.1)
  26  | (108.0, 217.1)  | (108.0, 217.1)
  27  | (162.0, 217.1)  | (162.0, 217.1)
  28  | (216.0, 217.1)  | (216.0, 217.1)
  29  | (270.0, 217.1)  | (270.0, 217.1)
  30  | (270.0, 271.4)  | (270.0, 271.4)
  31  | (216.0, 271.4)  | (216.0, 271.4)
  32  | (162.0, 271.4)  | (162.0, 271.4)
  33  | (108.0, 271.4)  | (108.0, 271.4)
  34  | (54.0, 271.4)   | (54.0, 271.4)
  35  | (0.0, 271.4)    | (0.0, 271.4)
  36  | (0.0, 325.7)    | (0.0, 325.7)
  37  | (54.0, 325.7)   | (54.0, 325.7)
  38  | (108.0, 325.7)  | (108.0, 325.7)
  39  | (162.0, 325.7)  | (162.0, 325.7)
  40  | (216.0, 325.7)  | (216.0, 325.7)
  41  | (270.0, 325.7)  | (270.0, 325.7)
  42  | (270.0, 380.0)  | (270.0, 380.0)
  43  | (216.0, 380.0)  | (216.0, 380.0)
  44  | (162.0, 380.0)  | (162.0, 380.0)
  45  | (108.0, 380.0)  | (108.0, 380.0)
  46  | (54.0, 380.0)   | (54.0, 380.0)
  47  | (0.0, 380.0)    | (0.0, 380.0)
TMC stepper_z3 failed to init: Unable to read tmc uart 'stepper_z3' register IFCNT
Starting heater checks for heater_bed
Unable to obtain tmc stepper_z3 phase
Starting heater checks for extruder
Stats 30.9: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=2243 bytes_read=5466 bytes_retransmit=9 bytes_invalid=0 send_seq=211 receive_seq=211 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=400033194 MAG_TOOL: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1361 bytes_read=4682 bytes_retransmit=0 bytes_invalid=0 send_seq=142 receive_seq=142 retransmit_seq=0 srtt=0.002 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12042674 adj=12041736  heater_bed: target=0 temp=0.0 pwm=0.000 sysload=2.98 cputime=5.786 memavail=616404 print_time=0.013 buffer_time=0.000 print_stall=0 extruder: target=0 temp=0.0 pwm=0.000
webhooks: registering remote method 'shutdown_machine' for connection id: 281472917348016
webhooks: registering remote method 'reboot_machine' for connection id: 281472917348016
webhooks: registering remote method 'pause_job_queue' for connection id: 281472917348016
webhooks: registering remote method 'start_job_queue' for connection id: 281472917348016
Stats 31.9: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000002 mcu_task_stddev=0.000002 bytes_write=2249 bytes_read=5527 bytes_retransmit=9 bytes_invalid=0 send_seq=212 receive_seq=212 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=400029570 MAG_TOOL: mcu_awake=0.018 mcu_task_avg=0.000017 mcu_task_stddev=0.000030 bytes_write=1375 bytes_read=4757 bytes_retransmit=0 bytes_invalid=0 send_seq=144 receive_seq=144 retransmit_seq=0 srtt=0.002 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12042540 adj=12041659  heater_bed: target=0 temp=24.2 pwm=0.000 sysload=2.98 cputime=5.852 memavail=573856 print_time=0.013 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.2 pwm=0.000
Stats 32.9: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000002 mcu_task_stddev=0.000002 bytes_write=2255 bytes_read=5588 bytes_retransmit=9 bytes_invalid=0 send_seq=213 receive_seq=213 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=400028689 MAG_TOOL: mcu_awake=0.018 mcu_task_avg=0.000017 mcu_task_stddev=0.000030 bytes_write=1381 bytes_read=4818 bytes_retransmit=0 bytes_invalid=0 send_seq=145 receive_seq=145 retransmit_seq=0 srtt=0.002 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12042385 adj=12041680  heater_bed: target=0 temp=24.2 pwm=0.000 sysload=2.98 cputime=5.870 memavail=534044 print_time=0.013 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.2 pwm=0.000
Stats 33.9: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000002 mcu_task_stddev=0.000002 bytes_write=2261 bytes_read=5664 bytes_retransmit=9 bytes_invalid=0 send_seq=214 receive_seq=214 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=400027902 MAG_TOOL: mcu_awake=0.018 mcu_task_avg=0.000017 mcu_task_stddev=0.000030 bytes_write=1387 bytes_read=4894 bytes_retransmit=0 bytes_invalid=0 send_seq=146 receive_seq=146 retransmit_seq=0 srtt=0.002 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12042249 adj=12041461  heater_bed: target=0 temp=24.2 pwm=0.000 sysload=2.98 cputime=5.885 memavail=526964 print_time=0.013 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.3 pwm=0.000
Stats 34.9: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000002 mcu_task_stddev=0.000002 bytes_write=2267 bytes_read=5725 bytes_retransmit=9 bytes_invalid=0 send_seq=215 receive_seq=215 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=400027854 MAG_TOOL: mcu_awake=0.018 mcu_task_avg=0.000017 mcu_task_stddev=0.000030 bytes_write=1393 bytes_read=4955 bytes_retransmit=0 bytes_invalid=0 send_seq=147 receive_seq=147 retransmit_seq=0 srtt=0.002 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12042245 adj=12041439  heater_bed: target=0 temp=24.2 pwm=0.000 sysload=2.98 cputime=5.934 memavail=562440 print_time=0.013 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.3 pwm=0.000
Stats 35.9: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000002 mcu_task_stddev=0.000002 bytes_write=2273 bytes_read=5786 bytes_retransmit=9 bytes_invalid=0 send_seq=216 receive_seq=216 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=400027622 MAG_TOOL: mcu_awake=0.018 mcu_task_avg=0.000017 mcu_task_stddev=0.000030 bytes_write=1399 bytes_read=5016 bytes_retransmit=0 bytes_invalid=0 send_seq=148 receive_seq=148 retransmit_seq=0 srtt=0.002 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12042240 adj=12041427  heater_bed: target=0 temp=24.2 pwm=0.000 sysload=3.22 cputime=5.952 memavail=583744 print_time=0.013 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.3 pwm=0.000
Stats 36.9: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000001 mcu_task_stddev=0.000001 bytes_write=2279 bytes_read=5875 bytes_retransmit=9 bytes_invalid=0 send_seq=217 receive_seq=217 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=400027446 MAG_TOOL: mcu_awake=0.002 mcu_task_avg=0.000011 mcu_task_stddev=0.000019 bytes_write=1405 bytes_read=5106 bytes_retransmit=0 bytes_invalid=0 send_seq=149 receive_seq=149 retransmit_seq=0 srtt=0.002 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12042222 adj=12041430  heater_bed: target=0 temp=24.2 pwm=0.000 sysload=3.22 cputime=5.975 memavail=628184 print_time=0.013 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.3 pwm=0.000
Stats 37.9: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000001 mcu_task_stddev=0.000001 bytes_write=2285 bytes_read=5936 bytes_retransmit=9 bytes_invalid=0 send_seq=218 receive_seq=218 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=400027877 MAG_TOOL: mcu_awake=0.002 mcu_task_avg=0.000011 mcu_task_stddev=0.000019 bytes_write=1411 bytes_read=5167 bytes_retransmit=0 bytes_invalid=0 send_seq=150 receive_seq=150 retransmit_seq=0 srtt=0.002 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12042229 adj=12041393  heater_bed: target=0 temp=24.2 pwm=0.000 sysload=3.22 cputime=5.995 memavail=624700 print_time=0.013 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.3 pwm=0.000
Stats 38.9: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000001 mcu_task_stddev=0.000001 bytes_write=2291 bytes_read=5997 bytes_retransmit=9 bytes_invalid=0 send_seq=219 receive_seq=219 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=400027781 MAG_TOOL: mcu_awake=0.002 mcu_task_avg=0.000011 mcu_task_stddev=0.000019 bytes_write=1417 bytes_read=5228 bytes_retransmit=0 bytes_invalid=0 send_seq=151 receive_seq=151 retransmit_seq=0 srtt=0.002 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12042220 adj=12041371  heater_bed: target=0 temp=24.2 pwm=0.000 sysload=3.22 cputime=6.014 memavail=632012 print_time=0.013 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.3 pwm=0.000
Stats 39.9: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000001 mcu_task_stddev=0.000001 bytes_write=2297 bytes_read=6071 bytes_retransmit=9 bytes_invalid=0 send_seq=220 receive_seq=220 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=400027659 MAG_TOOL: mcu_awake=0.002 mcu_task_avg=0.000011 mcu_task_stddev=0.000019 bytes_write=1423 bytes_read=5304 bytes_retransmit=0 bytes_invalid=0 send_seq=152 receive_seq=152 retransmit_seq=0 srtt=0.002 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12042226 adj=12041358  heater_bed: target=0 temp=24.2 pwm=0.000 sysload=3.22 cputime=6.032 memavail=616136 print_time=0.013 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.3 pwm=0.000
Stats 40.9: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000001 mcu_task_stddev=0.000001 bytes_write=2303 bytes_read=6132 bytes_retransmit=9 bytes_invalid=0 send_seq=221 receive_seq=221 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=400027579 MAG_TOOL: mcu_awake=0.002 mcu_task_avg=0.000011 mcu_task_stddev=0.000019 bytes_write=1429 bytes_read=5365 bytes_retransmit=0 bytes_invalid=0 send_seq=153 receive_seq=153 retransmit_seq=0 srtt=0.002 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12042221 adj=12041398  heater_bed: target=0 temp=24.2 pwm=0.000 sysload=3.20 cputime=6.050 memavail=608576 print_time=0.013 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.3 pwm=0.000
Stats 41.9: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000001 mcu_task_stddev=0.000001 bytes_write=2309 bytes_read=6206 bytes_retransmit=9 bytes_invalid=0 send_seq=222 receive_seq=222 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=400027534 MAG_TOOL: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000019 bytes_write=1435 bytes_read=5440 bytes_retransmit=0 bytes_invalid=0 send_seq=154 receive_seq=154 retransmit_seq=0 srtt=0.002 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12042221 adj=12041388  heater_bed: target=0 temp=24.2 pwm=0.000 sysload=3.20 cputime=6.067 memavail=609576 print_time=0.013 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.2 pwm=0.000
Stats 42.9: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000001 mcu_task_stddev=0.000001 bytes_write=2315 bytes_read=6282 bytes_retransmit=9 bytes_invalid=0 send_seq=223 receive_seq=223 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=400027430 MAG_TOOL: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000019 bytes_write=1441 bytes_read=5516 bytes_retransmit=0 bytes_invalid=0 send_seq=155 receive_seq=155 retransmit_seq=0 srtt=0.002 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12042221 adj=12041397  heater_bed: target=0 temp=24.3 pwm=0.000 sysload=3.20 cputime=6.085 memavail=614876 print_time=0.013 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.3 pwm=0.000
Stats 43.9: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000001 mcu_task_stddev=0.000001 bytes_write=2321 bytes_read=6343 bytes_retransmit=9 bytes_invalid=0 send_seq=224 receive_seq=224 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=400027393 MAG_TOOL: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000019 bytes_write=1447 bytes_read=5577 bytes_retransmit=0 bytes_invalid=0 send_seq=156 receive_seq=156 retransmit_seq=0 srtt=0.002 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12042221 adj=12041408  heater_bed: target=0 temp=24.2 pwm=0.000 sysload=3.20 cputime=6.103 memavail=609584 print_time=0.013 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.3 pwm=0.000
Stats 44.9: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000001 mcu_task_stddev=0.000001 bytes_write=2327 bytes_read=6404 bytes_retransmit=9 bytes_invalid=0 send_seq=225 receive_seq=225 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=400027520 MAG_TOOL: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000019 bytes_write=1453 bytes_read=5653 bytes_retransmit=0 bytes_invalid=0 send_seq=157 receive_seq=157 retransmit_seq=0 srtt=0.002 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12042225 adj=12041409  heater_bed: target=0 temp=24.3 pwm=0.000 sysload=3.20 cputime=6.123 memavail=614884 print_time=0.013 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.3 pwm=0.000
Stats 45.9: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000001 mcu_task_stddev=0.000001 bytes_write=2333 bytes_read=6480 bytes_retransmit=9 bytes_invalid=0 send_seq=226 receive_seq=226 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=400027491 MAG_TOOL: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000019 bytes_write=1459 bytes_read=5714 bytes_retransmit=0 bytes_invalid=0 send_seq=158 receive_seq=158 retransmit_seq=0 srtt=0.002 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12042223 adj=12041407  heater_bed: target=0 temp=24.3 pwm=0.000 sysload=3.35 cputime=6.143 memavail=642120 print_time=0.013 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.2 pwm=0.000
Stats 46.9: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000001 mcu_task_stddev=0.000001 bytes_write=2339 bytes_read=6554 bytes_retransmit=9 bytes_invalid=0 send_seq=227 receive_seq=227 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=400027536 MAG_TOOL: mcu_awake=0.002 mcu_task_avg=0.000011 mcu_task_stddev=0.000019 bytes_write=1465 bytes_read=5789 bytes_retransmit=0 bytes_invalid=0 send_seq=159 receive_seq=159 retransmit_seq=0 srtt=0.002 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12042227 adj=12041402  heater_bed: target=0 temp=24.2 pwm=0.000 sysload=3.35 cputime=6.168 memavail=643140 print_time=0.013 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.2 pwm=0.000
Stats 47.9: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000001 mcu_task_stddev=0.000001 bytes_write=2345 bytes_read=6615 bytes_retransmit=9 bytes_invalid=0 send_seq=228 receive_seq=228 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=400027620 MAG_TOOL: mcu_awake=0.002 mcu_task_avg=0.000011 mcu_task_stddev=0.000019 bytes_write=1471 bytes_read=5865 bytes_retransmit=0 bytes_invalid=0 send_seq=160 receive_seq=160 retransmit_seq=0 srtt=0.002 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12042233 adj=12041413  heater_bed: target=0 temp=24.3 pwm=0.000 sysload=3.35 cputime=6.192 memavail=643420 print_time=0.013 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.3 pwm=0.000
Stats 48.9: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000001 mcu_task_stddev=0.000001 bytes_write=2357 bytes_read=6707 bytes_retransmit=9 bytes_invalid=0 send_seq=230 receive_seq=230 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=400027675 MAG_TOOL: mcu_awake=0.002 mcu_task_avg=0.000011 mcu_task_stddev=0.000019 bytes_write=1477 bytes_read=5926 bytes_retransmit=0 bytes_invalid=0 send_seq=161 receive_seq=161 retransmit_seq=0 srtt=0.002 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12042235 adj=12041423  heater_bed: target=0 temp=24.3 pwm=0.000 sysload=3.35 cputime=6.217 memavail=643952 print_time=0.013 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.3 pwm=0.000
Stats 49.9: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000001 mcu_task_stddev=0.000001 bytes_write=2363 bytes_read=6766 bytes_retransmit=9 bytes_invalid=0 send_seq=231 receive_seq=231 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=400027723 MAG_TOOL: mcu_awake=0.002 mcu_task_avg=0.000011 mcu_task_stddev=0.000019 bytes_write=1489 bytes_read=6003 bytes_retransmit=0 bytes_invalid=0 send_seq=163 receive_seq=163 retransmit_seq=0 srtt=0.002 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12042243 adj=12041421  heater_bed: target=0 temp=24.3 pwm=0.000 sysload=3.35 cputime=6.244 memavail=643952 print_time=0.013 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.3 pwm=0.000
Stats 50.9: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000001 mcu_task_stddev=0.000001 bytes_write=2369 bytes_read=6826 bytes_retransmit=9 bytes_invalid=0 send_seq=232 receive_seq=232 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=400027744 MAG_TOOL: mcu_awake=0.002 mcu_task_avg=0.000011 mcu_task_stddev=0.000019 bytes_write=1495 bytes_read=6079 bytes_retransmit=0 bytes_invalid=0 send_seq=164 receive_seq=164 retransmit_seq=0 srtt=0.002 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12042246 adj=12041448  heater_bed: target=0 temp=24.2 pwm=0.000 sysload=3.32 cputime=6.264 memavail=642704 print_time=0.013 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.3 pwm=0.000
Stats 51.9: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000001 mcu_task_stddev=0.000001 bytes_write=2375 bytes_read=6915 bytes_retransmit=9 bytes_invalid=0 send_seq=233 receive_seq=233 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=400027680 MAG_TOOL: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000018 bytes_write=1501 bytes_read=6154 bytes_retransmit=0 bytes_invalid=0 send_seq=165 receive_seq=165 retransmit_seq=0 srtt=0.002 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12042245 adj=12041456  heater_bed: target=0 temp=24.3 pwm=0.000 sysload=3.32 cputime=6.282 memavail=644048 print_time=0.013 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.3 pwm=0.000
Stats 52.9: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000001 mcu_task_stddev=0.000001 bytes_write=2381 bytes_read=6976 bytes_retransmit=9 bytes_invalid=0 send_seq=234 receive_seq=234 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=400027653 MAG_TOOL: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000018 bytes_write=1507 bytes_read=6215 bytes_retransmit=0 bytes_invalid=0 send_seq=166 receive_seq=166 retransmit_seq=0 srtt=0.002 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12042244 adj=12041447  heater_bed: target=0 temp=24.3 pwm=0.000 sysload=3.32 cputime=6.296 memavail=643800 print_time=0.013 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.3 pwm=0.000
Stats 53.9: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000001 mcu_task_stddev=0.000001 bytes_write=2387 bytes_read=7037 bytes_retransmit=9 bytes_invalid=0 send_seq=235 receive_seq=235 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=400027594 MAG_TOOL: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000018 bytes_write=1513 bytes_read=6291 bytes_retransmit=0 bytes_invalid=0 send_seq=167 receive_seq=167 retransmit_seq=0 srtt=0.002 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12042243 adj=12041439  heater_bed: target=0 temp=24.3 pwm=0.000 sysload=3.32 cputime=6.311 memavail=644052 print_time=0.013 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.2 pwm=0.000
Stats 54.9: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000001 mcu_task_stddev=0.000001 bytes_write=2393 bytes_read=7113 bytes_retransmit=9 bytes_invalid=0 send_seq=236 receive_seq=236 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=400027604 MAG_TOOL: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000018 bytes_write=1519 bytes_read=6352 bytes_retransmit=0 bytes_invalid=0 send_seq=168 receive_seq=168 retransmit_seq=0 srtt=0.002 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12042244 adj=12041430  heater_bed: target=0 temp=24.3 pwm=0.000 sysload=3.32 cputime=6.335 memavail=644080 print_time=0.013 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.2 pwm=0.000
Stats 55.9: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000001 mcu_task_stddev=0.000001 bytes_write=2399 bytes_read=7174 bytes_retransmit=9 bytes_invalid=0 send_seq=237 receive_seq=237 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=400027562 MAG_TOOL: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000018 bytes_write=1525 bytes_read=6413 bytes_retransmit=0 bytes_invalid=0 send_seq=169 receive_seq=169 retransmit_seq=0 srtt=0.002 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12042244 adj=12041433  heater_bed: target=0 temp=24.3 pwm=0.000 sysload=3.21 cputime=6.351 memavail=643844 print_time=0.013 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.3 pwm=0.000
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-l', '/home/pi/printer_data/logs/klippy.log', '-I', '/home/pi/printer_data/comms/klippy.serial', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.11.0-275-g8ef0f7d7e-dirty'
Untracked files: klippy/extras/gcode_shell_command.py, klippy/extras/magneto_load_cell.py
Modified files: .github/FUNDING.yml, .github/ISSUE_TEMPLATE/config.yml, .github/workflows/build-test.yaml, .github/workflows/invalid-label-bot.yaml, .github/workflows/klipper3d-deploy.yaml, .github/workflows/reviewer-needed-label.yaml, .github/workflows/stale-issue-bot.yaml, .gitignore, COPYING, Makefile, (+1624 files)
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
Start printer at Wed Mar  6 08:17:20 2024 (1709713040.3 26.0)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set allow_park = False if not macro_found
	else False if client.park_at_cancel is not defined
	else True  if client.park_at_cancel|lower == 'true'
	else False %}
	{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = ""                                    if not macro_found
	else ""                                    if client.park_at_cancel_x is not defined
	else "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}
	{% set park_y = ""                                    if not macro_found
	else ""                                    if client.park_at_cancel_y is not defined
	else "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}
	{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}
	
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
gcode = 
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE={printer[printer.toolhead.extruder].target}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_fan_speed VALUE={printer["fan"].speed}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_jetstream_speed VALUE={printer["fan_generic Jetstream"].speed}
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	G1 Z{printer.gcode_move.position.z+10} F300
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M107
	UPDATE_DELAYED_GCODE ID=cool_hot_end DURATION=240
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = 0
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}
	
	M109 S{last_extruder_temp}
	M106 S{last_fan_speed*255|int}
	SET_FAN_SPEED FAN=Jetstream SPEED={last_jetstream_speed}
	_CLIENT_EXTRUDE
	BASE_RESUME VELOCITY={params.VELOCITY|default(sp_move)}
variable_last_fan_speed = 0
variable_last_jetstream_speed = 0

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1) | int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = False if not macro_found
	else False if client.use_custom_pos is not defined
	else True  if client.use_custom_pos|lower == 'true'
	else False %}
	{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}
	{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}
	{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set use_fw_retract = False if not macro_found
	else False if client.use_fw_retract is not defined
	else True  if client.use_fw_retract|lower == 'true' and printer.firmware_retraction is defined
	else False %}
	
	{% set length = (params.LENGTH|float) if params.LENGTH is defined
	else 1.0 if not macro_found
	else client.unretract|default(1.0) %}
	
	{% set speed = params.SPEED if params.SPEED is defined
	else 35 if not macro_found
	else client.speed_unretract|default(35) %}
	
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.extruder.can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	
	{% set length = (params.LENGTH|float) if params.LENGTH is defined
	else 1.0 if not macro_found
	else client.retract|default(1.0) %}
	
	{% set speed = params.SPEED if params.SPEED is defined
	else 35 if not macro_found
	else client.speed_retract|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}
	{% set attach_macro = kamp_settings.attach_macro | string %}
	{% set detach_macro = kamp_settings.detach_macro | string %}
	{% set mesh_margin = kamp_settings.mesh_margin | float %}
	{% set fuzz_amount = kamp_settings.fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	{% if printer.exclude_object.objects != [] %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% else %}
	
	{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}
	G4 P5000
	{% endif %}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing = QUAD_GANTRY_LEVEL_BASE
gcode = 
	G28
	M118 Heating the bed, please wait...
	M190 S50
	M118 Complete heating and start executing quad gantry level
	QUAD_GANTRY_LEVEL_BASE
	G28 Z

[gcode_macro CALIBRATE_BED]
description = Level bed and create or update the "default" mesh
gcode = 
	LM_ENABLE
	M190 S50
	M109 S150
	QUAD_GANTRY_LEVEL_BASE
	BED_MESH_CALIBRATE_BASE

[gcode_macro TUNE_BED_PID]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro TUNE_EXTRUDER_PID]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=190

[gcode_macro SET_XYZ_POSITION]
gcode = 
	SET_KINEMATIC_POSITION X=100 Y=100 Z=100

[gcode_macro RUN_INPUT_SHAPER]
gcode = 
	SHAPER_CALIBRATE

[gcode_macro PRINT_START]
gcode = 
	{% set EXTRUDER_TEMP = params.EXTRUDER|default(210)|float %}
	{% set BED_TEMP = params.BED|default(50)|float %}
	LM_ENABLE
	MESH_LOAD
	G28
	G90
	
	LINE_PURGE

[gcode_macro Z_TO_BOTTOM]
gcode = 
	G28
	G1 Z295

[delayed_gcode cool_hot_end]
gcode = 
	{% if printer['pause_resume'].is_paused|int == 1 %}
	M104 S0
	{% endif %}

[gcode_macro MESH_LOAD]
gcode = 
	BED_MESH_PROFILE LOAD=default

[delayed_gcode delay_disable_motor]
gcode = 
	LM_DISABLE

[gcode_macro PRINT_END]
gcode = 
	G91
	G1 Z5
	G1 E-5 F300
	G90
	G1 X200 Y10  F12000
	M104 S0
	M140 S0
	M106 S0
	UPDATE_DELAYED_GCODE ID=delay_disable_motor DURATION=30

[gcode_macro LOAD_FILAMENT]
gcode = 
	{% if printer[printer.toolhead.extruder].temperature > printer.configfile.settings['extruder'].min_extrude_temp %}
	{% set speed = params.SPEED|default(300) %}
	{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
	G91
	G92 E0
	G1 E25 F{speed}
	{% else %}
	M118 Extruder temperature too low,please heat the nozzle first
	{% endif %}

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	{% if printer[printer.toolhead.extruder].temperature > printer.configfile.settings['extruder'].min_extrude_temp %}
	{% set speed = params.SPEED|default(300) %}
	{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
	G92 E0
	G1 E-20 F{max_velocity}
	{% else %}
	M118 Extruder temperature too low, please heat the nozzle first
	{% endif %}

[gcode_macro M106]
rename_existing = G106
gcode = 
	{% if params.P is defined %}
	{% if params.P|int == 2 %}
	{% if params.S is defined %}
	{% if params.S|int == 255 %}
	{% set realspeed = 1 %}
	{% else %}
	{% if params.S|int == 0 %}
	{% set realspeed = 0 %}
	{% else %}
	{% set realspeed = params.S|float/255 %}
	{% endif %}
	{% endif %}
	{% else %}
	{% set realspeed = 1 %}
	{% endif %}
	
	SET_FAN_SPEED FAN=Jetstream SPEED={realspeed}
	{% endif %}
	{% else %}
	{% if params.S is defined %}
	G106 S{params.S}
	{% else %}
	G106 S255
	{% endif %}
	{% endif %}

[gcode_macro M107]
rename_existing = G107
gcode = 
	{% if params.P is defined %}
	{% if params.P|int == 2 %}
	SET_FAN_SPEED FAN=Jetstream SPEED=0
	{% endif %}
	{% else %}
	SET_FAN_SPEED FAN=Jetstream SPEED=0
	G107
	{% endif %}

[gcode_shell_command  RESIZE_FILE_SYSTEM]
command = curl -G http://127.0.0.1:8880/auto_resize_filesystem
timeout = 2.
verbose = False

[gcode_macro RESIZE_FILESYSTEM]
gcode = 
	RUN_SHELL_COMMAND CMD=RESIZE_FILE_SYSTEM

[gcode_shell_command  LINER_MOTOR_ENABLE]
command = curl -G http://127.0.0.1:8880/send_command?command=ENABLE
timeout = 2.
verbose = False

[gcode_shell_command  LINER_MOTOR_DISABLE]
command = curl -G http://127.0.0.1:8880/send_command?command=DISABLE
timeout = 2.
verbose = False

[gcode_macro LINER_MOTOR]
gcode = 
	{% if params.ENABLE is defined %}
	{% if params.ENABLE|int == 0 %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_DISABLE
	{% else %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE
	{% endif %}
	{% else %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE
	{% endif %}

[gcode_macro LM_ENABLE]
gcode = 
	G4 P500
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE

[gcode_macro LM_DISABLE]
gcode = 
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_DISABLE

[mcu MAG_TOOL]
canbus_uuid = 70e5d37dad1c

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32h723xx_390038001251313236343430-if00

[heater_fan hotend_fan]
pin = MAG_TOOL:gpio1
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0
fan_speed = 1.0

[magneto_load_cell]
pin = MAG_TOOL:gpio24

[gcode_button UNL_FILA]
pin = ~MAG_TOOL:gpio27
press_gcode = 
	
	UNLOAD_FILAMENT

[gcode_button L_FILA]
pin = ^!MAG_TOOL:gpio20
press_gcode = 
	
	LOAD_FILAMENT

[output_pin _load_cell_reset_pin]
pin = MAG_TOOL:gpio25
pwm = False
value = 1

[gcode_macro CLEAR_LOAD_CELL]
gcode = 
	LC28

[gcode_button loadcell_overload]
pin = !MAG_TOOL:gpio22
press_gcode = 
	{% if printer.idle_timeout.state != 'Printing' %}
	M118 ERROR: Loadcell overloaded, Z moved to safe position.
	M112
	{% endif %}

[adc_temperature magneto_adc]
temperature1 = 16
voltage1 = 3.189
temperature2 = 84
voltage2 = 2.457
temperature3 = 94
voltage3 = 2.02
temperature4 = 103
voltage4 = 1.86
temperature5 = 116
voltage5 = 1.60
temperature6 = 130
voltage6 = 1.33
temperature7 = 146
voltage7 = 1.06
temperature8 = 166
voltage8 = 0.781
temperature9 = 186
voltage9 = 0.573
temperature10 = 201
voltage10 = 0.431
temperature11 = 216
voltage11 = 0.329
temperature12 = 231
voltage12 = 0.263
temperature13 = 251
voltage13 = 0.215
temperature14 = 271
voltage14 = 0.144
temperature15 = 281
voltage15 = 0.121
temperature16 = 294
voltage16 = 0.101

[extruder]
step_pin = MAG_TOOL:gpio5
dir_pin = !MAG_TOOL:gpio4
enable_pin = !MAG_TOOL:gpio10
rotation_distance = 4.637
microsteps = 16
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.75
heater_pin = MAG_TOOL:gpio0
sensor_pin = MAG_TOOL:gpio26
sensor_type = magneto_adc
max_extrude_cross_section = 5
adc_voltage = 3.3
min_temp = -60
max_temp = 310
max_power = 0.75
min_extrude_temp = 160
control = pid
pid_kp = 14.434
pid_ki = 0.631
pid_kd = 82.604
pressure_advance = 0.0
pressure_advance_smooth_time = 0.040

[tmc2209 extruder]
uart_pin = MAG_TOOL:gpio6
interpolate = false
run_current = 0.8
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[adxl345]
cs_pin = MAG_TOOL:gpio13
spi_software_sclk_pin = MAG_TOOL:gpio14
spi_software_mosi_pin = MAG_TOOL:gpio15
spi_software_miso_pin = MAG_TOOL:gpio12

[resonance_tester]
accel_chip = adxl345
accel_per_hz = 100
probe_points = 200,150,20

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}
	{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | min %}
	{% set y_min = [ y_min - purge_margin , y_min ] | min %}
	{% set x_min = [ x_min , axis_minimum_x ] | max %}
	{% set y_min = [ y_min , axis_minimum_y ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	{% if printer.toolhead.position.z < z_height %}
	G0 Z{z_height}
	{% endif %}
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 10
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[idle_timeout]
timeout = 3600

[gcode_arcs]
resolution = 0.1

[probe]
pin = PE12
x_offset = 0
y_offset = 0
z_offset = -0.15
speed = 2
lift_speed = 7
samples = 3
samples_result = median
sample_retract_dist = 2
samples_tolerance = 0.1
samples_tolerance_retries = 5

[force_move]
enable_force_move = True

[quad_gantry_level]
gantry_corners = 
	0,0
	290,390
points = 
	25,25
	25,380
	290,380
	290,25
speed = 250
horizontal_move_z = 20
retries = 3
retry_tolerance = 0.12
max_adjust = 50

[stepper_x]
step_pin = PF13
dir_pin = !PF12
enable_pin = !PF14
microsteps = 16
endstop_pin = ^!PE8
rotation_distance = 3.2
step_pulse_duration = 0.0000002
position_endstop = 0
position_max = 300
homing_speed = 50

[gcode_button kill_switch]
pin = !PG11
press_gcode = 
	PAUSE
	M118 X or Y motion is blocked.
	M107
	M104 S0

[stepper_y]
step_pin = PG0
dir_pin = !PG1
enable_pin = !PF15
step_pulse_duration = 0.0000002
microsteps = 16
endstop_pin = ^!PE9
rotation_distance = 3.2
position_endstop = 0
position_max = 400
homing_speed = 50

[homing_override]
axes = xyz
set_position_z = 0
gcode = 
	LM_ENABLE
	{% if not 'Z' in params and not 'Y' in params and 'X' in params %}
	G28 X
	{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}
	G28 Y
	{% elif not 'Z' in params and 'X' in params and 'Y' in params %}
	G28 X
	G28 Y
	
	{% else %}
	G90
	G1 Z5
	G28 X
	G28 Y
	G0 X150 Y200 F6000
	G4 P3000
	LC28
	G28 Z
	G1 Z5
	{% endif %}

[bed_mesh]
mesh_min = 0, 0
mesh_max = 270,380
speed = 150
horizontal_move_z = 2
probe_count = 6,8
algorithm = bicubic
split_delta_z = 0.0125
move_check_distance = 3
mesh_pps = 4,4
fade_start = 0
fade_end = 3
fade_target = 0

[stepper_z]
step_pin = PF11
dir_pin = !PG3
enable_pin = !PG5
endstop_pin = probe:z_virtual_endstop
rotation_distance = 4
microsteps = 16
position_max = 300
position_min = -25
homing_speed = 5
second_homing_speed = 2
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = true
run_current = 0.9
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA2
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = true
run_current = 0.9
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z2]
step_pin = PF9
dir_pin = !PF10
enable_pin = !PG2
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = true
run_current = 0.9
hold_current = 0.50
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z3]
step_pin = PC13
dir_pin = !PF0
enable_pin = !PF1
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z3]
uart_pin = PE4
interpolate = true
run_current = 0.9
hold_current = 0.50
sense_resistor = 0.110
stealthchop_threshold = 100

[heater_bed]
heater_pin = PA1
sensor_pin = PF3
sensor_type = Generic 3950
control = pid
pid_kp = 63.238
pid_ki = 0.855
pid_kd = 1169.116
min_temp = -200
max_temp = 130

[multi_pin part_cooling]
pins = MAG_TOOL:gpio17, MAG_TOOL:gpio11

[multi_pin part_cooling_enable]
pins = MAG_TOOL:gpio3, MAG_TOOL:gpio2

[temperature_fan pi]
pin = PD15
max_power = 0.60
control = watermark
max_delta = 5.0
sensor_type = temperature_host
min_temp = 10.0
max_temp = 80.0
target_temp = 55.0
shutdown_speed = 0.0

[fan]
pin = multi_pin:part_cooling
max_power = 1.0
kick_start_time = 0.5
off_below = 0.10
enable_pin = multi_pin:part_cooling_enable

[fan_generic Jetstream]
pin = PE10
enable_pin = PE7
max_power = 1.0
kick_start_time = 0.5
cycle_time = 0.01
off_below = 0.4

[exclude_object]

[respond]

[printer]
kinematics = cartesian
max_velocity = 1500
max_accel = 15000
max_z_velocity = 5
max_z_accel = 100

[board_pins]
aliases = 
	
	EXP1_1=PE8, EXP1_2=PE7,
	EXP1_3=PE9, EXP1_4=PE10,
	EXP1_5=PE12, EXP1_6=PE13,
	EXP1_7=PE14, EXP1_8=PE15,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PA6, EXP2_2=PA5,
	EXP2_3=PB1, EXP2_4=PA4,
	EXP2_5=PB2, EXP2_6=PA7,
	EXP2_7=PC15, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=PC5

[output_pin _led_pin]
pin = PE13
pwm = False
value = 0

[gcode_macro TOGGLE_LIGHTS]
gcode = 
	{% if printer['output_pin _led_pin'].value == 1 %}
	SET_PIN PIN=_led_pin VALUE=0
	{% else %}
	SET_PIN PIN=_led_pin VALUE=1
	{% endif %}

[input_shaper]
shaper_type_y = zv
shaper_freq_y = 27.0
shaper_type_x = ei
shaper_freq_x = 44.4

[bed_mesh default]
version = 1
points = 
	-0.351250, -0.200000, -0.107500, -0.043750, -0.066250, -0.163750
	-0.265000, -0.126250, -0.016250, 0.040000, 0.007500, -0.127500
	-0.215000, -0.068750, -0.006250, 0.067500, 0.045000, -0.108750
	-0.165000, -0.070000, 0.005000, 0.051250, -0.002500, -0.166250
	-0.163750, -0.067500, -0.023750, 0.025000, -0.041250, -0.171250
	-0.138750, -0.117500, -0.038750, -0.031250, -0.075000, -0.188750
	-0.176250, -0.118750, -0.048750, -0.028750, -0.085000, -0.230000
	-0.247500, -0.176250, -0.148750, -0.081250, -0.102500, -0.218750
x_count = 6
y_count = 8
mesh_x_pps = 4
mesh_y_pps = 4
algo = bicubic
tension = 0.2
min_x = 0.0
max_x = 270.0
min_y = 0.0
max_y = 379.96
=======================
init magneto load cell
MAG_TOOL:gpio24
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
webhooks client 281473807764880: New connection
Loaded MCU 'mcu' 105 commands (v0.11.0-205-g5f0d252b-dirty-20230817_035150-mainsailos / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3a=PC11,PC12,PC10 BUS_PINS_spi4=PE13,PE14,PE12 BUS_PINS_spi5=PF8,PF9,PF7 BUS_PINS_spi5a=PH7,PF11,PH6 BUS_PINS_spi6=PG12,PG14,PG13 CLOCK_FREQ=400000000 MCU=stm32h723xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PH0,PH1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
