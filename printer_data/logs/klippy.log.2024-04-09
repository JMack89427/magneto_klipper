===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set allow_park = False if not macro_found
	else False if client.park_at_cancel is not defined
	else True  if client.park_at_cancel|lower == 'true'
	else False %}
	{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = ""                                    if not macro_found
	else ""                                    if client.park_at_cancel_x is not defined
	else "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}
	{% set park_y = ""                                    if not macro_found
	else ""                                    if client.park_at_cancel_y is not defined
	else "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}
	{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}
	
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
gcode = 
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE={printer[printer.toolhead.extruder].target}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_fan_speed VALUE={printer["fan"].speed}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_jetstream_speed VALUE={printer["fan_generic Jetstream"].speed}
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	G1 Z{printer.gcode_move.position.z+10} F300
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M107
	UPDATE_DELAYED_GCODE ID=cool_hot_end DURATION=240
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = 0
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}
	
	M109 S{last_extruder_temp}
	M106 S{last_fan_speed*255|int}
	SET_FAN_SPEED FAN=Jetstream SPEED={last_jetstream_speed}
	_CLIENT_EXTRUDE
	BASE_RESUME VELOCITY={params.VELOCITY|default(sp_move)}
variable_last_fan_speed = 0
variable_last_jetstream_speed = 0

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1) | int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = False if not macro_found
	else False if client.use_custom_pos is not defined
	else True  if client.use_custom_pos|lower == 'true'
	else False %}
	{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}
	{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}
	{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set use_fw_retract = False if not macro_found
	else False if client.use_fw_retract is not defined
	else True  if client.use_fw_retract|lower == 'true' and printer.firmware_retraction is defined
	else False %}
	
	{% set length = (params.LENGTH|float) if params.LENGTH is defined
	else 1.0 if not macro_found
	else client.unretract|default(1.0) %}
	
	{% set speed = params.SPEED if params.SPEED is defined
	else 35 if not macro_found
	else client.speed_unretract|default(35) %}
	
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.extruder.can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	
	{% set length = (params.LENGTH|float) if params.LENGTH is defined
	else 1.0 if not macro_found
	else client.retract|default(1.0) %}
	
	{% set speed = params.SPEED if params.SPEED is defined
	else 35 if not macro_found
	else client.speed_retract|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_BASE
gcode = 
	{% if "z" not in printer.toolhead.homed_axes %}
	G28 Z
	{% endif %}
	M118 Heating the bed, please wait...
	M190 S70
	M118 Complete heating and start executing bed mesh calibrate
	BED_MESH_CALIBRATE_BASE
	G28 Z

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing = QUAD_GANTRY_LEVEL_BASE
gcode = 
	G28
	M118 Heating the bed, please wait...
	M190 S70
	M118 Complete heating and start executing quad gantry level
	QUAD_GANTRY_LEVEL_BASE
	G28 Z

[gcode_macro CALIBRATE_BED]
description = Level bed and create or update the "default" mesh
gcode = 
	LM_ENABLE
	M190 S50
	M109 S150
	QUAD_GANTRY_LEVEL_BASE
	BED_MESH_CALIBRATE_BASE

[gcode_macro TUNE_BED_PID]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro TUNE_EXTRUDER_PID]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=190

[gcode_macro SET_XYZ_POSITION]
gcode = 
	SET_KINEMATIC_POSITION X=100 Y=100 Z=100

[gcode_macro RUN_INPUT_SHAPER]
gcode = 
	SHAPER_CALIBRATE

[gcode_macro PRINT_START]
gcode = 
	{% set EXTRUDER_TEMP = params.EXTRUDER|default(210)|float %}
	{% set BED_TEMP = params.BED|default(50)|float %}
	LM_ENABLE
	MESH_LOAD
	G28
	G90
	
	LINE_PURGE

[gcode_macro Z_TO_BOTTOM]
gcode = 
	G28
	G1 Z295

[delayed_gcode cool_hot_end]
gcode = 
	{% if printer['pause_resume'].is_paused|int == 1 %}
	M104 S0
	{% endif %}

[gcode_macro MESH_LOAD]
gcode = 
	BED_MESH_PROFILE LOAD=default

[delayed_gcode delay_disable_motor]
gcode = 
	LM_DISABLE

[gcode_macro PRINT_END]
gcode = 
	G91
	G1 Z5
	G1 E-5 F300
	G90
	G1 X200 Y10  F12000
	M104 S0
	M140 S0
	M106 S0
	UPDATE_DELAYED_GCODE ID=delay_disable_motor DURATION=30

[gcode_macro _C_UNLOAD_FILAMENT]
gcode = 
	{% if printer[printer.toolhead.extruder].temperature > printer.configfile.settings['extruder'].min_extrude_temp %}
	{% set speed = params.SPEED|default(300) %}
	{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
	G92 E0
	G1 E-20 F1200
	{% else %}
	M118 Extruder temperature too low, please heat the nozzle first
	{% endif %}

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M118 Unloading filament
	G28
	G0 Z50 F300
	G0 X250 Y200 F5000
	M118 Heating nozzle...
	M109 S240
	G91
	M118 Unloading...
	G0 E10 F360
	G0 E5 F1200
	G0 E-45 F1200
	G0 E-45 F1200
	G0 E-45 F1200
	G0 E-45 F1200
	G90
	G92 E0
	M104 S0
	M118 Unload finish

[gcode_macro LOAD_FILAMENT]
gcode = 
	{% if printer[printer.toolhead.extruder].temperature > printer.configfile.settings['extruder'].min_extrude_temp %}
	{% set speed = params.SPEED|default(300) %}
	{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
	G91
	G92 E0
	G1 E25 F{speed}
	{% else %}
	M118 Extruder temperature too low,please heat the nozzle first
	{% endif %}

[gcode_macro M106]
rename_existing = G106
gcode = 
	{% if params.P is defined %}
	{% if params.P|int == 2 %}
	{% if params.S is defined %}
	{% if params.S|int == 255 %}
	{% set realspeed = 1 %}
	{% else %}
	{% if params.S|int == 0 %}
	{% set realspeed = 0 %}
	{% else %}
	{% set realspeed = params.S|float/255 %}
	{% endif %}
	{% endif %}
	{% else %}
	{% set realspeed = 1 %}
	{% endif %}
	
	SET_FAN_SPEED FAN=Jetstream SPEED={realspeed}
	{% endif %}
	{% else %}
	{% if params.S is defined %}
	G106 S{params.S}
	{% else %}
	G106 S255
	{% endif %}
	{% endif %}

[gcode_macro M107]
rename_existing = G107
gcode = 
	{% if params.P is defined %}
	{% if params.P|int == 2 %}
	SET_FAN_SPEED FAN=Jetstream SPEED=0
	{% endif %}
	{% else %}
	SET_FAN_SPEED FAN=Jetstream SPEED=0
	G107
	{% endif %}

[gcode_shell_command  GET_MIRROR_VERSION]
command = curl -G http://127.0.0.1:8880/get_os_version
timeout = 2.
verbose = True

[gcode_macro MAGNETO_OS_VERSION]
gcode = 
	RUN_SHELL_COMMAND CMD=GET_MIRROR_VERSION

[gcode_shell_command  RESIZE_FILE_SYSTEM]
command = curl -G http://127.0.0.1:8880/auto_resize_filesystem
timeout = 2.
verbose = False

[gcode_macro RESIZE_FILESYSTEM]
gcode = 
	RUN_SHELL_COMMAND CMD=RESIZE_FILE_SYSTEM

[gcode_shell_command  LINER_MOTOR_ENABLE]
command = curl -G http://127.0.0.1:8880/send_command?command=ENABLE
timeout = 2.
verbose = False

[gcode_shell_command  LINER_MOTOR_DISABLE]
command = curl -G http://127.0.0.1:8880/send_command?command=DISABLE
timeout = 2.
verbose = False

[gcode_macro LINER_MOTOR]
gcode = 
	{% if params.ENABLE is defined %}
	{% if params.ENABLE|int == 0 %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_DISABLE
	{% else %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE
	{% endif %}
	{% else %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE
	{% endif %}

[gcode_macro LM_ENABLE]
gcode = 
	G4 P500
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE

[gcode_macro LM_DISABLE]
gcode = 
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_DISABLE

[mcu MAG_TOOL]
canbus_uuid = c9fc3c9e8515

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00

[heater_fan hotend_fan]
pin = MAG_TOOL:gpio1
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0
fan_speed = 1.0

[magneto_load_cell]
pin = MAG_TOOL:gpio24

[gcode_button UNL_FILA]
pin = ~MAG_TOOL:gpio27
press_gcode = 
	
	_C_UNLOAD_FILAMENT

[gcode_button L_FILA]
pin = ^!MAG_TOOL:gpio20
press_gcode = 
	
	LOAD_FILAMENT

[output_pin _load_cell_reset_pin]
pin = MAG_TOOL:gpio25
pwm = False
value = 1

[gcode_macro CLEAR_LOAD_CELL]
gcode = 
	LC28

[adc_temperature magneto_adc]
temperature1 = 16
voltage1 = 3.189
temperature2 = 84
voltage2 = 2.457
temperature3 = 94
voltage3 = 2.02
temperature4 = 103
voltage4 = 1.86
temperature5 = 116
voltage5 = 1.60
temperature6 = 130
voltage6 = 1.33
temperature7 = 146
voltage7 = 1.06
temperature8 = 166
voltage8 = 0.781
temperature9 = 186
voltage9 = 0.573
temperature10 = 201
voltage10 = 0.431
temperature11 = 216
voltage11 = 0.329
temperature12 = 231
voltage12 = 0.263
temperature13 = 251
voltage13 = 0.215
temperature14 = 271
voltage14 = 0.144
temperature15 = 281
voltage15 = 0.121
temperature16 = 294
voltage16 = 0.101

[extruder]
step_pin = MAG_TOOL:gpio5
dir_pin = !MAG_TOOL:gpio4
enable_pin = !MAG_TOOL:gpio10
rotation_distance = 4.637
microsteps = 16
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.75
heater_pin = MAG_TOOL:gpio0
sensor_pin = MAG_TOOL:gpio26
sensor_type = magneto_adc
max_extrude_cross_section = 5
adc_voltage = 3.3
min_temp = -60
max_temp = 310
max_power = 0.75
min_extrude_temp = 160
control = pid
pid_kp = 14.434
pid_ki = 0.631
pid_kd = 82.604
pressure_advance = 0.0
pressure_advance_smooth_time = 0.040

[tmc2209 extruder]
uart_pin = MAG_TOOL:gpio6
interpolate = false
run_current = 0.8
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[adxl345]
cs_pin = MAG_TOOL:gpio13
spi_software_sclk_pin = MAG_TOOL:gpio14
spi_software_mosi_pin = MAG_TOOL:gpio15
spi_software_miso_pin = MAG_TOOL:gpio12

[resonance_tester]
accel_chip = adxl345
accel_per_hz = 100
probe_points = 200,150,20

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}
	{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | min %}
	{% set y_min = [ y_min - purge_margin , y_min ] | min %}
	{% set x_min = [ x_min , axis_minimum_x ] | max %}
	{% set y_min = [ y_min , axis_minimum_y ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	{% if printer.toolhead.position.z < z_height %}
	G0 Z{z_height}
	{% endif %}
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 10
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[idle_timeout]
timeout = 3600

[gcode_arcs]
resolution = 0.1

[probe]
pin = PE12
x_offset = 0
y_offset = 0
z_offset = -0.15
speed = 2
lift_speed = 7
samples = 3
samples_result = median
sample_retract_dist = 2
samples_tolerance = 0.1
samples_tolerance_retries = 5

[force_move]
enable_force_move = True

[quad_gantry_level]
gantry_corners = 
	0,0
	290,390
points = 
	25,25
	25,380
	290,380
	290,25
speed = 250
horizontal_move_z = 20
retries = 3
retry_tolerance = 0.12
max_adjust = 50

[stepper_x]
step_pin = PF13
dir_pin = !PF12
enable_pin = !PF14
microsteps = 16
endstop_pin = ^!PE8
rotation_distance = 3.2
step_pulse_duration = 0.0000002
position_endstop = 0
position_max = 300
homing_speed = 50

[gcode_button kill_switch]
pin = !PG11
press_gcode = 
	PAUSE
	M118 X or Y motion is blocked.
	M107
	M104 S0

[stepper_y]
step_pin = PG0
dir_pin = !PG1
enable_pin = !PF15
step_pulse_duration = 0.0000002
microsteps = 16
endstop_pin = ^!PE9
rotation_distance = 3.2
position_endstop = 0
position_max = 400
homing_speed = 50

[homing_override]
axes = xyz
set_position_z = 0
gcode = 
	LM_ENABLE
	{% if not 'Z' in params and not 'Y' in params and 'X' in params %}
	G28 X
	{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}
	G28 Y
	{% elif not 'Z' in params and 'X' in params and 'Y' in params %}
	G28 X
	G28 Y
	
	{% else %}
	G90
	G1 Z5
	G28 X
	G28 Y
	G0 X150 Y200 F6000
	G4 P3000
	LC28
	G28 Z
	G1 Z5
	{% endif %}

[bed_mesh]
mesh_min = 0, 0
mesh_max = 270,380
speed = 150
horizontal_move_z = 2
probe_count = 6,8
algorithm = bicubic
split_delta_z = 0.0125
move_check_distance = 3
mesh_pps = 4,4
fade_start = 0
fade_end = 3
fade_target = 0

[stepper_z]
step_pin = PF11
dir_pin = !PG3
enable_pin = !PG5
endstop_pin = probe:z_virtual_endstop
rotation_distance = 4
microsteps = 16
position_max = 300
position_min = -25
homing_speed = 5
second_homing_speed = 2
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = true
run_current = 0.9
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA2
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = true
run_current = 0.9
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z2]
step_pin = PF9
dir_pin = !PF10
enable_pin = !PG2
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = true
run_current = 0.9
hold_current = 0.50
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z3]
step_pin = PC13
dir_pin = !PF0
enable_pin = !PF1
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z3]
uart_pin = PE4
interpolate = true
run_current = 0.9
hold_current = 0.50
sense_resistor = 0.110
stealthchop_threshold = 100

[heater_bed]
heater_pin = PA1
sensor_pin = PF3
sensor_type = Generic 3950
control = pid
pid_kp = 63.238
pid_ki = 0.855
pid_kd = 1169.116
min_temp = -200
max_temp = 130

[multi_pin part_cooling]
pins = MAG_TOOL:gpio17, MAG_TOOL:gpio11

[multi_pin part_cooling_enable]
pins = MAG_TOOL:gpio3, MAG_TOOL:gpio2

[temperature_fan pi]
pin = PD15
max_power = 0.60
control = watermark
max_delta = 5.0
sensor_type = temperature_host
min_temp = 10.0
max_temp = 80.0
target_temp = 55.0
shutdown_speed = 0.0

[fan]
pin = multi_pin:part_cooling
max_power = 1.0
kick_start_time = 0.5
off_below = 0.10
enable_pin = multi_pin:part_cooling_enable

[fan_generic Jetstream]
pin = PE10
enable_pin = PE7
max_power = 1.0
kick_start_time = 0.5
cycle_time = 0.01
off_below = 0.4

[exclude_object]

[respond]

[printer]
kinematics = cartesian
max_velocity = 1500
max_accel = 15000
max_z_velocity = 5
max_z_accel = 100

[board_pins]
aliases = 
	
	EXP1_1=PE8, EXP1_2=PE7,
	EXP1_3=PE9, EXP1_4=PE10,
	EXP1_5=PE12, EXP1_6=PE13,
	EXP1_7=PE14, EXP1_8=PE15,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PA6, EXP2_2=PA5,
	EXP2_3=PB1, EXP2_4=PA4,
	EXP2_5=PB2, EXP2_6=PA7,
	EXP2_7=PC15, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=PC5

[output_pin _led_pin]
pin = PE13
pwm = False
value = 0

[gcode_macro TOGGLE_LIGHTS]
gcode = 
	{% if printer['output_pin _led_pin'].value == 1 %}
	SET_PIN PIN=_led_pin VALUE=0
	{% else %}
	SET_PIN PIN=_led_pin VALUE=1
	{% endif %}

[input_shaper]
shaper_type_y = zv
shaper_freq_y = 27.0
shaper_type_x = ei
shaper_freq_x = 44.4

[bed_mesh default]
version = 1
points = 
	-0.351250, -0.200000, -0.107500, -0.043750, -0.066250, -0.163750
	-0.265000, -0.126250, -0.016250, 0.040000, 0.007500, -0.127500
	-0.215000, -0.068750, -0.006250, 0.067500, 0.045000, -0.108750
	-0.165000, -0.070000, 0.005000, 0.051250, -0.002500, -0.166250
	-0.163750, -0.067500, -0.023750, 0.025000, -0.041250, -0.171250
	-0.138750, -0.117500, -0.038750, -0.031250, -0.075000, -0.188750
	-0.176250, -0.118750, -0.048750, -0.028750, -0.085000, -0.230000
	-0.247500, -0.176250, -0.148750, -0.081250, -0.102500, -0.218750
x_count = 6
y_count = 8
mesh_x_pps = 4
mesh_y_pps = 4
algo = bicubic
tension = 0.2
min_x = 0.0
max_x = 270.0
min_y = 0.0
max_y = 379.96
=======================
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-l', '/home/pi/printer_data/logs/klippy.log', '-I', '/home/pi/printer_data/comms/klippy.serial', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.11.0-275-g8ef0f7d7e-dirty'
Untracked files: klippy/extras/gcode_shell_command.py, klippy/extras/magneto_load_cell.py
Modified files: .github/FUNDING.yml, .github/ISSUE_TEMPLATE/config.yml, .github/workflows/build-test.yaml, .github/workflows/invalid-label-bot.yaml, .github/workflows/klipper3d-deploy.yaml, .github/workflows/reviewer-needed-label.yaml, .github/workflows/stale-issue-bot.yaml, .gitignore, COPYING, Makefile, (+1624 files)
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
webhooks client 281473753791648: {'program': 'Moonraker', 'version': 'v0.8.0-41-g348b7f5'}
=============== Log rollover at Tue Apr  9 12:17:03 2024 ===============
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 798, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 803, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
No build file /home/pi/klipper/klippy/../.config
No build file /home/pi/klipper/klippy/../out/klipper.dict
No build file /home/pi/klipper/klippy/../out/klipper.elf
Attempting MCU 'mcu' reset
Unhandled exception during post run
Traceback (most recent call last):
  File "/home/pi/klippy-env/lib/python3.9/site-packages/serial/serialposix.py", line 265, in open
    self.fd = os.open(self.portstr, os.O_RDWR | os.O_NOCTTY | os.O_NONBLOCK)
FileNotFoundError: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 234, in run
    self.send_event("klippy:firmware_restart")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 949, in _firmware_restart
    self._restart_arduino()
  File "/home/pi/klipper/klippy/mcu.py", line 909, in _restart_arduino
    serialhdl.arduino_reset(self._serialport, self._reactor)
  File "/home/pi/klipper/klippy/serialhdl.py", line 379, in arduino_reset
    ser = serial.Serial(serialport, 2400, timeout=0, exclusive=True)
  File "/home/pi/klippy-env/lib/python3.9/site-packages/serial/serialutil.py", line 240, in __init__
    self.open()
  File "/home/pi/klippy-env/lib/python3.9/site-packages/serial/serialposix.py", line 268, in open
    raise SerialException(msg.errno, "could not open port {}: {}".format(self._port, msg))
serial.serialutil.SerialException: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
Restarting printer
Start printer at Tue Apr  9 12:19:44 2024 (1712665184.2 193.6)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set allow_park = False if not macro_found
	else False if client.park_at_cancel is not defined
	else True  if client.park_at_cancel|lower == 'true'
	else False %}
	{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = ""                                    if not macro_found
	else ""                                    if client.park_at_cancel_x is not defined
	else "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}
	{% set park_y = ""                                    if not macro_found
	else ""                                    if client.park_at_cancel_y is not defined
	else "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}
	{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}
	
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
gcode = 
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE={printer[printer.toolhead.extruder].target}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_fan_speed VALUE={printer["fan"].speed}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_jetstream_speed VALUE={printer["fan_generic Jetstream"].speed}
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	G1 Z{printer.gcode_move.position.z+10} F300
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M107
	UPDATE_DELAYED_GCODE ID=cool_hot_end DURATION=240
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = 0
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}
	
	M109 S{last_extruder_temp}
	M106 S{last_fan_speed*255|int}
	SET_FAN_SPEED FAN=Jetstream SPEED={last_jetstream_speed}
	_CLIENT_EXTRUDE
	BASE_RESUME VELOCITY={params.VELOCITY|default(sp_move)}
variable_last_fan_speed = 0
variable_last_jetstream_speed = 0

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1) | int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = False if not macro_found
	else False if client.use_custom_pos is not defined
	else True  if client.use_custom_pos|lower == 'true'
	else False %}
	{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}
	{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}
	{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set use_fw_retract = False if not macro_found
	else False if client.use_fw_retract is not defined
	else True  if client.use_fw_retract|lower == 'true' and printer.firmware_retraction is defined
	else False %}
	
	{% set length = (params.LENGTH|float) if params.LENGTH is defined
	else 1.0 if not macro_found
	else client.unretract|default(1.0) %}
	
	{% set speed = params.SPEED if params.SPEED is defined
	else 35 if not macro_found
	else client.speed_unretract|default(35) %}
	
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.extruder.can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	
	{% set length = (params.LENGTH|float) if params.LENGTH is defined
	else 1.0 if not macro_found
	else client.retract|default(1.0) %}
	
	{% set speed = params.SPEED if params.SPEED is defined
	else 35 if not macro_found
	else client.speed_retract|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_BASE
gcode = 
	{% if "z" not in printer.toolhead.homed_axes %}
	G28 Z
	{% endif %}
	M118 Heating the bed, please wait...
	M190 S70
	M118 Complete heating and start executing bed mesh calibrate
	BED_MESH_CALIBRATE_BASE
	G28 Z

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing = QUAD_GANTRY_LEVEL_BASE
gcode = 
	G28
	M118 Heating the bed, please wait...
	M190 S70
	M118 Complete heating and start executing quad gantry level
	QUAD_GANTRY_LEVEL_BASE
	G28 Z

[gcode_macro CALIBRATE_BED]
description = Level bed and create or update the "default" mesh
gcode = 
	LM_ENABLE
	M190 S50
	M109 S150
	QUAD_GANTRY_LEVEL_BASE
	BED_MESH_CALIBRATE_BASE

[gcode_macro TUNE_BED_PID]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro TUNE_EXTRUDER_PID]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=190

[gcode_macro SET_XYZ_POSITION]
gcode = 
	SET_KINEMATIC_POSITION X=100 Y=100 Z=100

[gcode_macro RUN_INPUT_SHAPER]
gcode = 
	SHAPER_CALIBRATE

[gcode_macro PRINT_START]
gcode = 
	{% set EXTRUDER_TEMP = params.EXTRUDER|default(210)|float %}
	{% set BED_TEMP = params.BED|default(50)|float %}
	LM_ENABLE
	MESH_LOAD
	G28
	G90
	
	LINE_PURGE

[gcode_macro Z_TO_BOTTOM]
gcode = 
	G28
	G1 Z295

[delayed_gcode cool_hot_end]
gcode = 
	{% if printer['pause_resume'].is_paused|int == 1 %}
	M104 S0
	{% endif %}

[gcode_macro MESH_LOAD]
gcode = 
	BED_MESH_PROFILE LOAD=default

[delayed_gcode delay_disable_motor]
gcode = 
	LM_DISABLE

[gcode_macro PRINT_END]
gcode = 
	G91
	G1 Z5
	G1 E-5 F300
	G90
	G1 X200 Y10  F12000
	M104 S0
	M140 S0
	M106 S0
	UPDATE_DELAYED_GCODE ID=delay_disable_motor DURATION=30

[gcode_macro _C_UNLOAD_FILAMENT]
gcode = 
	{% if printer[printer.toolhead.extruder].temperature > printer.configfile.settings['extruder'].min_extrude_temp %}
	{% set speed = params.SPEED|default(300) %}
	{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
	G92 E0
	G1 E-20 F1200
	{% else %}
	M118 Extruder temperature too low, please heat the nozzle first
	{% endif %}

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M118 Unloading filament
	G28
	G0 Z50 F300
	G0 X250 Y200 F5000
	M118 Heating nozzle...
	M109 S250
	G91
	M118 Unloading...
	G0 E40 F360
	G0 E40 F360
	G0 E5 F1200
	M118 Heating nozzle to 165 ...
	M109 S165
	G0 E-45 F1200
	G0 E-45 F1200
	G0 E-45 F1200
	G0 E-45 F1200
	G90
	G92 E0
	M104 S0
	M118 Unload finish

[gcode_macro LOAD_FILAMENT]
gcode = 
	{% if printer[printer.toolhead.extruder].temperature > printer.configfile.settings['extruder'].min_extrude_temp %}
	{% set speed = params.SPEED|default(300) %}
	{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
	G91
	G92 E0
	G1 E25 F{speed}
	{% else %}
	M118 Extruder temperature too low,please heat the nozzle first
	{% endif %}

[gcode_macro M106]
rename_existing = G106
gcode = 
	{% if params.P is defined %}
	{% if params.P|int == 2 %}
	{% if params.S is defined %}
	{% if params.S|int == 255 %}
	{% set realspeed = 1 %}
	{% else %}
	{% if params.S|int == 0 %}
	{% set realspeed = 0 %}
	{% else %}
	{% set realspeed = params.S|float/255 %}
	{% endif %}
	{% endif %}
	{% else %}
	{% set realspeed = 1 %}
	{% endif %}
	
	SET_FAN_SPEED FAN=Jetstream SPEED={realspeed}
	{% endif %}
	{% else %}
	{% if params.S is defined %}
	G106 S{params.S}
	{% else %}
	G106 S255
	{% endif %}
	{% endif %}

[gcode_macro M107]
rename_existing = G107
gcode = 
	{% if params.P is defined %}
	{% if params.P|int == 2 %}
	SET_FAN_SPEED FAN=Jetstream SPEED=0
	{% endif %}
	{% else %}
	SET_FAN_SPEED FAN=Jetstream SPEED=0
	G107
	{% endif %}

[gcode_shell_command  GET_MIRROR_VERSION]
command = curl -G http://127.0.0.1:8880/get_os_version
timeout = 2.
verbose = True

[gcode_macro MAGNETO_OS_VERSION]
gcode = 
	RUN_SHELL_COMMAND CMD=GET_MIRROR_VERSION

[gcode_shell_command  RESIZE_FILE_SYSTEM]
command = curl -G http://127.0.0.1:8880/auto_resize_filesystem
timeout = 2.
verbose = False

[gcode_macro RESIZE_FILESYSTEM]
gcode = 
	RUN_SHELL_COMMAND CMD=RESIZE_FILE_SYSTEM

[gcode_shell_command  LINER_MOTOR_ENABLE]
command = curl -G http://127.0.0.1:8880/send_command?command=ENABLE
timeout = 2.
verbose = False

[gcode_shell_command  LINER_MOTOR_DISABLE]
command = curl -G http://127.0.0.1:8880/send_command?command=DISABLE
timeout = 2.
verbose = False

[gcode_macro LINER_MOTOR]
gcode = 
	{% if params.ENABLE is defined %}
	{% if params.ENABLE|int == 0 %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_DISABLE
	{% else %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE
	{% endif %}
	{% else %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE
	{% endif %}

[gcode_macro LM_ENABLE]
gcode = 
	G4 P500
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE

[gcode_macro LM_DISABLE]
gcode = 
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_DISABLE

[mcu MAG_TOOL]
canbus_uuid = c9fc3c9e8515

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00

[heater_fan hotend_fan]
pin = MAG_TOOL:gpio1
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0
fan_speed = 1.0

[magneto_load_cell]
pin = MAG_TOOL:gpio24

[gcode_button UNL_FILA]
pin = ~MAG_TOOL:gpio27
press_gcode = 
	
	_C_UNLOAD_FILAMENT

[gcode_button L_FILA]
pin = ^!MAG_TOOL:gpio20
press_gcode = 
	
	LOAD_FILAMENT

[output_pin _load_cell_reset_pin]
pin = MAG_TOOL:gpio25
pwm = False
value = 1

[gcode_macro CLEAR_LOAD_CELL]
gcode = 
	LC28

[adc_temperature magneto_adc]
temperature1 = 16
voltage1 = 3.189
temperature2 = 84
voltage2 = 2.457
temperature3 = 94
voltage3 = 2.02
temperature4 = 103
voltage4 = 1.86
temperature5 = 116
voltage5 = 1.60
temperature6 = 130
voltage6 = 1.33
temperature7 = 146
voltage7 = 1.06
temperature8 = 166
voltage8 = 0.781
temperature9 = 186
voltage9 = 0.573
temperature10 = 201
voltage10 = 0.431
temperature11 = 216
voltage11 = 0.329
temperature12 = 231
voltage12 = 0.263
temperature13 = 251
voltage13 = 0.215
temperature14 = 271
voltage14 = 0.144
temperature15 = 281
voltage15 = 0.121
temperature16 = 294
voltage16 = 0.101

[extruder]
step_pin = MAG_TOOL:gpio5
dir_pin = !MAG_TOOL:gpio4
enable_pin = !MAG_TOOL:gpio10
rotation_distance = 4.637
microsteps = 16
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.75
heater_pin = MAG_TOOL:gpio0
sensor_pin = MAG_TOOL:gpio26
sensor_type = magneto_adc
max_extrude_cross_section = 5
adc_voltage = 3.3
min_temp = -60
max_temp = 310
max_power = 0.75
min_extrude_temp = 160
control = pid
pid_kp = 14.434
pid_ki = 0.631
pid_kd = 82.604
pressure_advance = 0.0
pressure_advance_smooth_time = 0.040

[tmc2209 extruder]
uart_pin = MAG_TOOL:gpio6
interpolate = false
run_current = 0.8
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[adxl345]
cs_pin = MAG_TOOL:gpio13
spi_software_sclk_pin = MAG_TOOL:gpio14
spi_software_mosi_pin = MAG_TOOL:gpio15
spi_software_miso_pin = MAG_TOOL:gpio12

[resonance_tester]
accel_chip = adxl345
accel_per_hz = 100
probe_points = 200,150,20

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}
	{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | min %}
	{% set y_min = [ y_min - purge_margin , y_min ] | min %}
	{% set x_min = [ x_min , axis_minimum_x ] | max %}
	{% set y_min = [ y_min , axis_minimum_y ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	{% if printer.toolhead.position.z < z_height %}
	G0 Z{z_height}
	{% endif %}
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 10
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[idle_timeout]
timeout = 3600

[gcode_arcs]
resolution = 0.1

[probe]
pin = PE12
x_offset = 0
y_offset = 0
z_offset = -0.15
speed = 2
lift_speed = 7
samples = 3
samples_result = median
sample_retract_dist = 2
samples_tolerance = 0.1
samples_tolerance_retries = 5

[force_move]
enable_force_move = True

[quad_gantry_level]
gantry_corners = 
	0,0
	290,390
points = 
	25,25
	25,380
	290,380
	290,25
speed = 250
horizontal_move_z = 20
retries = 3
retry_tolerance = 0.12
max_adjust = 50

[stepper_x]
step_pin = PF13
dir_pin = !PF12
enable_pin = !PF14
microsteps = 16
endstop_pin = ^!PE8
rotation_distance = 3.2
step_pulse_duration = 0.0000002
position_endstop = 0
position_max = 300
homing_speed = 50

[gcode_button kill_switch]
pin = !PG11
press_gcode = 
	PAUSE
	M118 X or Y motion is blocked.
	M107
	M104 S0

[stepper_y]
step_pin = PG0
dir_pin = !PG1
enable_pin = !PF15
step_pulse_duration = 0.0000002
microsteps = 16
endstop_pin = ^!PE9
rotation_distance = 3.2
position_endstop = 0
position_max = 400
homing_speed = 50

[homing_override]
axes = xyz
set_position_z = 0
gcode = 
	LM_ENABLE
	{% if not 'Z' in params and not 'Y' in params and 'X' in params %}
	G28 X
	{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}
	G28 Y
	{% elif not 'Z' in params and 'X' in params and 'Y' in params %}
	G28 X
	G28 Y
	
	{% else %}
	G90
	G1 Z5
	G28 X
	G28 Y
	G0 X150 Y200 F6000
	G4 P3000
	LC28
	G28 Z
	G1 Z5
	{% endif %}

[bed_mesh]
mesh_min = 0, 0
mesh_max = 270,380
speed = 150
horizontal_move_z = 2
probe_count = 6,8
algorithm = bicubic
split_delta_z = 0.0125
move_check_distance = 3
mesh_pps = 4,4
fade_start = 0
fade_end = 3
fade_target = 0

[stepper_z]
step_pin = PF11
dir_pin = !PG3
enable_pin = !PG5
endstop_pin = probe:z_virtual_endstop
rotation_distance = 4
microsteps = 16
position_max = 300
position_min = -25
homing_speed = 5
second_homing_speed = 2
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = true
run_current = 0.9
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA2
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = true
run_current = 0.9
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z2]
step_pin = PF9
dir_pin = !PF10
enable_pin = !PG2
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = true
run_current = 0.9
hold_current = 0.50
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z3]
step_pin = PC13
dir_pin = !PF0
enable_pin = !PF1
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z3]
uart_pin = PE4
interpolate = true
run_current = 0.9
hold_current = 0.50
sense_resistor = 0.110
stealthchop_threshold = 100

[heater_bed]
heater_pin = PA1
sensor_pin = PF3
sensor_type = Generic 3950
control = pid
pid_kp = 63.238
pid_ki = 0.855
pid_kd = 1169.116
min_temp = -200
max_temp = 130

[multi_pin part_cooling]
pins = MAG_TOOL:gpio17, MAG_TOOL:gpio11

[multi_pin part_cooling_enable]
pins = MAG_TOOL:gpio3, MAG_TOOL:gpio2

[temperature_fan pi]
pin = PD15
max_power = 0.60
control = watermark
max_delta = 5.0
sensor_type = temperature_host
min_temp = 10.0
max_temp = 80.0
target_temp = 55.0
shutdown_speed = 0.0

[fan]
pin = multi_pin:part_cooling
max_power = 1.0
kick_start_time = 0.5
off_below = 0.10
enable_pin = multi_pin:part_cooling_enable

[fan_generic Jetstream]
pin = PE10
enable_pin = PE7
max_power = 1.0
kick_start_time = 0.5
cycle_time = 0.01
off_below = 0.4

[exclude_object]

[respond]

[printer]
kinematics = cartesian
max_velocity = 1500
max_accel = 15000
max_z_velocity = 5
max_z_accel = 100

[board_pins]
aliases = 
	
	EXP1_1=PE8, EXP1_2=PE7,
	EXP1_3=PE9, EXP1_4=PE10,
	EXP1_5=PE12, EXP1_6=PE13,
	EXP1_7=PE14, EXP1_8=PE15,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PA6, EXP2_2=PA5,
	EXP2_3=PB1, EXP2_4=PA4,
	EXP2_5=PB2, EXP2_6=PA7,
	EXP2_7=PC15, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=PC5

[output_pin _led_pin]
pin = PE13
pwm = False
value = 0

[gcode_macro TOGGLE_LIGHTS]
gcode = 
	{% if printer['output_pin _led_pin'].value == 1 %}
	SET_PIN PIN=_led_pin VALUE=0
	{% else %}
	SET_PIN PIN=_led_pin VALUE=1
	{% endif %}

[input_shaper]
shaper_type_y = zv
shaper_freq_y = 27.0
shaper_type_x = ei
shaper_freq_x = 44.4

[bed_mesh default]
version = 1
points = 
	-0.351250, -0.200000, -0.107500, -0.043750, -0.066250, -0.163750
	-0.265000, -0.126250, -0.016250, 0.040000, 0.007500, -0.127500
	-0.215000, -0.068750, -0.006250, 0.067500, 0.045000, -0.108750
	-0.165000, -0.070000, 0.005000, 0.051250, -0.002500, -0.166250
	-0.163750, -0.067500, -0.023750, 0.025000, -0.041250, -0.171250
	-0.138750, -0.117500, -0.038750, -0.031250, -0.075000, -0.188750
	-0.176250, -0.118750, -0.048750, -0.028750, -0.085000, -0.230000
	-0.247500, -0.176250, -0.148750, -0.081250, -0.102500, -0.218750
x_count = 6
y_count = 8
mesh_x_pps = 4
mesh_y_pps = 4
algo = bicubic
tension = 0.2
min_x = 0.0
max_x = 270.0
min_y = 0.0
max_y = 379.96
=======================
init magneto load cell
MAG_TOOL:gpio24
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
webhooks client 281473753333424: New connection
webhooks client 281473753333424: Client info {'program': 'Moonraker', 'version': 'v0.8.0-41-g348b7f5'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
Attempting MCU 'mcu' reset
Unhandled exception during post run
Traceback (most recent call last):
  File "/home/pi/klippy-env/lib/python3.9/site-packages/serial/serialposix.py", line 265, in open
    self.fd = os.open(self.portstr, os.O_RDWR | os.O_NOCTTY | os.O_NONBLOCK)
FileNotFoundError: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 234, in run
    self.send_event("klippy:firmware_restart")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 949, in _firmware_restart
    self._restart_arduino()
  File "/home/pi/klipper/klippy/mcu.py", line 909, in _restart_arduino
    serialhdl.arduino_reset(self._serialport, self._reactor)
  File "/home/pi/klipper/klippy/serialhdl.py", line 379, in arduino_reset
    ser = serial.Serial(serialport, 2400, timeout=0, exclusive=True)
  File "/home/pi/klippy-env/lib/python3.9/site-packages/serial/serialutil.py", line 240, in __init__
    self.open()
  File "/home/pi/klippy-env/lib/python3.9/site-packages/serial/serialposix.py", line 268, in open
    raise SerialException(msg.errno, "could not open port {}: {}".format(self._port, msg))
serial.serialutil.SerialException: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
Restarting printer
Start printer at Tue Apr  9 12:19:53 2024 (1712665193.6 203.1)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set allow_park = False if not macro_found
	else False if client.park_at_cancel is not defined
	else True  if client.park_at_cancel|lower == 'true'
	else False %}
	{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = ""                                    if not macro_found
	else ""                                    if client.park_at_cancel_x is not defined
	else "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}
	{% set park_y = ""                                    if not macro_found
	else ""                                    if client.park_at_cancel_y is not defined
	else "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}
	{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}
	
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
gcode = 
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE={printer[printer.toolhead.extruder].target}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_fan_speed VALUE={printer["fan"].speed}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_jetstream_speed VALUE={printer["fan_generic Jetstream"].speed}
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	G1 Z{printer.gcode_move.position.z+10} F300
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M107
	UPDATE_DELAYED_GCODE ID=cool_hot_end DURATION=240
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = 0
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}
	
	M109 S{last_extruder_temp}
	M106 S{last_fan_speed*255|int}
	SET_FAN_SPEED FAN=Jetstream SPEED={last_jetstream_speed}
	_CLIENT_EXTRUDE
	BASE_RESUME VELOCITY={params.VELOCITY|default(sp_move)}
variable_last_fan_speed = 0
variable_last_jetstream_speed = 0

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1) | int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = False if not macro_found
	else False if client.use_custom_pos is not defined
	else True  if client.use_custom_pos|lower == 'true'
	else False %}
	{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}
	{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}
	{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set use_fw_retract = False if not macro_found
	else False if client.use_fw_retract is not defined
	else True  if client.use_fw_retract|lower == 'true' and printer.firmware_retraction is defined
	else False %}
	
	{% set length = (params.LENGTH|float) if params.LENGTH is defined
	else 1.0 if not macro_found
	else client.unretract|default(1.0) %}
	
	{% set speed = params.SPEED if params.SPEED is defined
	else 35 if not macro_found
	else client.speed_unretract|default(35) %}
	
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.extruder.can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	
	{% set length = (params.LENGTH|float) if params.LENGTH is defined
	else 1.0 if not macro_found
	else client.retract|default(1.0) %}
	
	{% set speed = params.SPEED if params.SPEED is defined
	else 35 if not macro_found
	else client.speed_retract|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_BASE
gcode = 
	{% if "z" not in printer.toolhead.homed_axes %}
	G28 Z
	{% endif %}
	M118 Heating the bed, please wait...
	M190 S70
	M118 Complete heating and start executing bed mesh calibrate
	BED_MESH_CALIBRATE_BASE
	G28 Z

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing = QUAD_GANTRY_LEVEL_BASE
gcode = 
	G28
	M118 Heating the bed, please wait...
	M190 S70
	M118 Complete heating and start executing quad gantry level
	QUAD_GANTRY_LEVEL_BASE
	G28 Z

[gcode_macro CALIBRATE_BED]
description = Level bed and create or update the "default" mesh
gcode = 
	LM_ENABLE
	M190 S50
	M109 S150
	QUAD_GANTRY_LEVEL_BASE
	BED_MESH_CALIBRATE_BASE

[gcode_macro TUNE_BED_PID]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro TUNE_EXTRUDER_PID]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=190

[gcode_macro SET_XYZ_POSITION]
gcode = 
	SET_KINEMATIC_POSITION X=100 Y=100 Z=100

[gcode_macro RUN_INPUT_SHAPER]
gcode = 
	SHAPER_CALIBRATE

[gcode_macro PRINT_START]
gcode = 
	{% set EXTRUDER_TEMP = params.EXTRUDER|default(210)|float %}
	{% set BED_TEMP = params.BED|default(50)|float %}
	LM_ENABLE
	MESH_LOAD
	G28
	G90
	
	LINE_PURGE

[gcode_macro Z_TO_BOTTOM]
gcode = 
	G28
	G1 Z295

[delayed_gcode cool_hot_end]
gcode = 
	{% if printer['pause_resume'].is_paused|int == 1 %}
	M104 S0
	{% endif %}

[gcode_macro MESH_LOAD]
gcode = 
	BED_MESH_PROFILE LOAD=default

[delayed_gcode delay_disable_motor]
gcode = 
	LM_DISABLE

[gcode_macro PRINT_END]
gcode = 
	G91
	G1 Z5
	G1 E-5 F300
	G90
	G1 X200 Y10  F12000
	M104 S0
	M140 S0
	M106 S0
	UPDATE_DELAYED_GCODE ID=delay_disable_motor DURATION=30

[gcode_macro _C_UNLOAD_FILAMENT]
gcode = 
	{% if printer[printer.toolhead.extruder].temperature > printer.configfile.settings['extruder'].min_extrude_temp %}
	{% set speed = params.SPEED|default(300) %}
	{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
	G92 E0
	G1 E-20 F1200
	{% else %}
	M118 Extruder temperature too low, please heat the nozzle first
	{% endif %}

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M118 Unloading filament
	G28
	G0 Z50 F300
	G0 X250 Y200 F5000
	M118 Heating nozzle...
	M109 S250
	G91
	M118 Unloading...
	G0 E40 F360
	G0 E40 F360
	G0 E5 F1200
	M118 Heating nozzle to 165 ...
	M109 S165
	G0 E-45 F1200
	G0 E-45 F1200
	G0 E-45 F1200
	G0 E-45 F1200
	G90
	G92 E0
	M104 S0
	M118 Unload finish

[gcode_macro LOAD_FILAMENT]
gcode = 
	{% if printer[printer.toolhead.extruder].temperature > printer.configfile.settings['extruder'].min_extrude_temp %}
	{% set speed = params.SPEED|default(300) %}
	{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
	G91
	G92 E0
	G1 E25 F{speed}
	{% else %}
	M118 Extruder temperature too low,please heat the nozzle first
	{% endif %}

[gcode_macro M106]
rename_existing = G106
gcode = 
	{% if params.P is defined %}
	{% if params.P|int == 2 %}
	{% if params.S is defined %}
	{% if params.S|int == 255 %}
	{% set realspeed = 1 %}
	{% else %}
	{% if params.S|int == 0 %}
	{% set realspeed = 0 %}
	{% else %}
	{% set realspeed = params.S|float/255 %}
	{% endif %}
	{% endif %}
	{% else %}
	{% set realspeed = 1 %}
	{% endif %}
	
	SET_FAN_SPEED FAN=Jetstream SPEED={realspeed}
	{% endif %}
	{% else %}
	{% if params.S is defined %}
	G106 S{params.S}
	{% else %}
	G106 S255
	{% endif %}
	{% endif %}

[gcode_macro M107]
rename_existing = G107
gcode = 
	{% if params.P is defined %}
	{% if params.P|int == 2 %}
	SET_FAN_SPEED FAN=Jetstream SPEED=0
	{% endif %}
	{% else %}
	SET_FAN_SPEED FAN=Jetstream SPEED=0
	G107
	{% endif %}

[gcode_shell_command  GET_MIRROR_VERSION]
command = curl -G http://127.0.0.1:8880/get_os_version
timeout = 2.
verbose = True

[gcode_macro MAGNETO_OS_VERSION]
gcode = 
	RUN_SHELL_COMMAND CMD=GET_MIRROR_VERSION

[gcode_shell_command  RESIZE_FILE_SYSTEM]
command = curl -G http://127.0.0.1:8880/auto_resize_filesystem
timeout = 2.
verbose = False

[gcode_macro RESIZE_FILESYSTEM]
gcode = 
	RUN_SHELL_COMMAND CMD=RESIZE_FILE_SYSTEM

[gcode_shell_command  LINER_MOTOR_ENABLE]
command = curl -G http://127.0.0.1:8880/send_command?command=ENABLE
timeout = 2.
verbose = False

[gcode_shell_command  LINER_MOTOR_DISABLE]
command = curl -G http://127.0.0.1:8880/send_command?command=DISABLE
timeout = 2.
verbose = False

[gcode_macro LINER_MOTOR]
gcode = 
	{% if params.ENABLE is defined %}
	{% if params.ENABLE|int == 0 %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_DISABLE
	{% else %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE
	{% endif %}
	{% else %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE
	{% endif %}

[gcode_macro LM_ENABLE]
gcode = 
	G4 P500
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE

[gcode_macro LM_DISABLE]
gcode = 
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_DISABLE

[mcu MAG_TOOL]
canbus_uuid = c9fc3c9e8515

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00

[heater_fan hotend_fan]
pin = MAG_TOOL:gpio1
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0
fan_speed = 1.0

[magneto_load_cell]
pin = MAG_TOOL:gpio24

[gcode_button UNL_FILA]
pin = ~MAG_TOOL:gpio27
press_gcode = 
	
	_C_UNLOAD_FILAMENT

[gcode_button L_FILA]
pin = ^!MAG_TOOL:gpio20
press_gcode = 
	
	LOAD_FILAMENT

[output_pin _load_cell_reset_pin]
pin = MAG_TOOL:gpio25
pwm = False
value = 1

[gcode_macro CLEAR_LOAD_CELL]
gcode = 
	LC28

[adc_temperature magneto_adc]
temperature1 = 16
voltage1 = 3.189
temperature2 = 84
voltage2 = 2.457
temperature3 = 94
voltage3 = 2.02
temperature4 = 103
voltage4 = 1.86
temperature5 = 116
voltage5 = 1.60
temperature6 = 130
voltage6 = 1.33
temperature7 = 146
voltage7 = 1.06
temperature8 = 166
voltage8 = 0.781
temperature9 = 186
voltage9 = 0.573
temperature10 = 201
voltage10 = 0.431
temperature11 = 216
voltage11 = 0.329
temperature12 = 231
voltage12 = 0.263
temperature13 = 251
voltage13 = 0.215
temperature14 = 271
voltage14 = 0.144
temperature15 = 281
voltage15 = 0.121
temperature16 = 294
voltage16 = 0.101

[extruder]
step_pin = MAG_TOOL:gpio5
dir_pin = !MAG_TOOL:gpio4
enable_pin = !MAG_TOOL:gpio10
rotation_distance = 4.637
microsteps = 16
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.75
heater_pin = MAG_TOOL:gpio0
sensor_pin = MAG_TOOL:gpio26
sensor_type = magneto_adc
max_extrude_cross_section = 5
adc_voltage = 3.3
min_temp = -60
max_temp = 310
max_power = 0.75
min_extrude_temp = 160
control = pid
pid_kp = 14.434
pid_ki = 0.631
pid_kd = 82.604
pressure_advance = 0.0
pressure_advance_smooth_time = 0.040

[tmc2209 extruder]
uart_pin = MAG_TOOL:gpio6
interpolate = false
run_current = 0.8
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[adxl345]
cs_pin = MAG_TOOL:gpio13
spi_software_sclk_pin = MAG_TOOL:gpio14
spi_software_mosi_pin = MAG_TOOL:gpio15
spi_software_miso_pin = MAG_TOOL:gpio12

[resonance_tester]
accel_chip = adxl345
accel_per_hz = 100
probe_points = 200,150,20

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}
	{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | min %}
	{% set y_min = [ y_min - purge_margin , y_min ] | min %}
	{% set x_min = [ x_min , axis_minimum_x ] | max %}
	{% set y_min = [ y_min , axis_minimum_y ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	{% if printer.toolhead.position.z < z_height %}
	G0 Z{z_height}
	{% endif %}
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 10
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[idle_timeout]
timeout = 3600

[gcode_arcs]
resolution = 0.1

[probe]
pin = PE12
x_offset = 0
y_offset = 0
z_offset = -0.15
speed = 2
lift_speed = 7
samples = 3
samples_result = median
sample_retract_dist = 2
samples_tolerance = 0.1
samples_tolerance_retries = 5

[force_move]
enable_force_move = True

[quad_gantry_level]
gantry_corners = 
	0,0
	290,390
points = 
	25,25
	25,380
	290,380
	290,25
speed = 250
horizontal_move_z = 20
retries = 3
retry_tolerance = 0.12
max_adjust = 50

[stepper_x]
step_pin = PF13
dir_pin = !PF12
enable_pin = !PF14
microsteps = 16
endstop_pin = ^!PE8
rotation_distance = 3.2
step_pulse_duration = 0.0000002
position_endstop = 0
position_max = 300
homing_speed = 50

[gcode_button kill_switch]
pin = !PG11
press_gcode = 
	PAUSE
	M118 X or Y motion is blocked.
	M107
	M104 S0

[stepper_y]
step_pin = PG0
dir_pin = !PG1
enable_pin = !PF15
step_pulse_duration = 0.0000002
microsteps = 16
endstop_pin = ^!PE9
rotation_distance = 3.2
position_endstop = 0
position_max = 400
homing_speed = 50

[homing_override]
axes = xyz
set_position_z = 0
gcode = 
	LM_ENABLE
	{% if not 'Z' in params and not 'Y' in params and 'X' in params %}
	G28 X
	{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}
	G28 Y
	{% elif not 'Z' in params and 'X' in params and 'Y' in params %}
	G28 X
	G28 Y
	
	{% else %}
	G90
	G1 Z5
	G28 X
	G28 Y
	G0 X150 Y200 F6000
	G4 P3000
	LC28
	G28 Z
	G1 Z5
	{% endif %}

[bed_mesh]
mesh_min = 0, 0
mesh_max = 270,380
speed = 150
horizontal_move_z = 2
probe_count = 6,8
algorithm = bicubic
split_delta_z = 0.0125
move_check_distance = 3
mesh_pps = 4,4
fade_start = 0
fade_end = 3
fade_target = 0

[stepper_z]
step_pin = PF11
dir_pin = !PG3
enable_pin = !PG5
endstop_pin = probe:z_virtual_endstop
rotation_distance = 4
microsteps = 16
position_max = 300
position_min = -25
homing_speed = 5
second_homing_speed = 2
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = true
run_current = 0.9
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA2
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = true
run_current = 0.9
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z2]
step_pin = PF9
dir_pin = !PF10
enable_pin = !PG2
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = true
run_current = 0.9
hold_current = 0.50
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z3]
step_pin = PC13
dir_pin = !PF0
enable_pin = !PF1
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z3]
uart_pin = PE4
interpolate = true
run_current = 0.9
hold_current = 0.50
sense_resistor = 0.110
stealthchop_threshold = 100

[heater_bed]
heater_pin = PA1
sensor_pin = PF3
sensor_type = Generic 3950
control = pid
pid_kp = 63.238
pid_ki = 0.855
pid_kd = 1169.116
min_temp = -200
max_temp = 130

[multi_pin part_cooling]
pins = MAG_TOOL:gpio17, MAG_TOOL:gpio11

[multi_pin part_cooling_enable]
pins = MAG_TOOL:gpio3, MAG_TOOL:gpio2

[temperature_fan pi]
pin = PD15
max_power = 0.60
control = watermark
max_delta = 5.0
sensor_type = temperature_host
min_temp = 10.0
max_temp = 80.0
target_temp = 55.0
shutdown_speed = 0.0

[fan]
pin = multi_pin:part_cooling
max_power = 1.0
kick_start_time = 0.5
off_below = 0.10
enable_pin = multi_pin:part_cooling_enable

[fan_generic Jetstream]
pin = PE10
enable_pin = PE7
max_power = 1.0
kick_start_time = 0.5
cycle_time = 0.01
off_below = 0.4

[exclude_object]

[respond]

[printer]
kinematics = cartesian
max_velocity = 1500
max_accel = 15000
max_z_velocity = 5
max_z_accel = 100

[board_pins]
aliases = 
	
	EXP1_1=PE8, EXP1_2=PE7,
	EXP1_3=PE9, EXP1_4=PE10,
	EXP1_5=PE12, EXP1_6=PE13,
	EXP1_7=PE14, EXP1_8=PE15,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PA6, EXP2_2=PA5,
	EXP2_3=PB1, EXP2_4=PA4,
	EXP2_5=PB2, EXP2_6=PA7,
	EXP2_7=PC15, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=PC5

[output_pin _led_pin]
pin = PE13
pwm = False
value = 0

[gcode_macro TOGGLE_LIGHTS]
gcode = 
	{% if printer['output_pin _led_pin'].value == 1 %}
	SET_PIN PIN=_led_pin VALUE=0
	{% else %}
	SET_PIN PIN=_led_pin VALUE=1
	{% endif %}

[input_shaper]
shaper_type_y = zv
shaper_freq_y = 27.0
shaper_type_x = ei
shaper_freq_x = 44.4

[bed_mesh default]
version = 1
points = 
	-0.351250, -0.200000, -0.107500, -0.043750, -0.066250, -0.163750
	-0.265000, -0.126250, -0.016250, 0.040000, 0.007500, -0.127500
	-0.215000, -0.068750, -0.006250, 0.067500, 0.045000, -0.108750
	-0.165000, -0.070000, 0.005000, 0.051250, -0.002500, -0.166250
	-0.163750, -0.067500, -0.023750, 0.025000, -0.041250, -0.171250
	-0.138750, -0.117500, -0.038750, -0.031250, -0.075000, -0.188750
	-0.176250, -0.118750, -0.048750, -0.028750, -0.085000, -0.230000
	-0.247500, -0.176250, -0.148750, -0.081250, -0.102500, -0.218750
x_count = 6
y_count = 8
mesh_x_pps = 4
mesh_y_pps = 4
algo = bicubic
tension = 0.2
min_x = 0.0
max_x = 270.0
min_y = 0.0
max_y = 379.96
=======================
init magneto load cell
MAG_TOOL:gpio24
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
webhooks client 281473753241680: New connection
webhooks client 281473753241680: Client info {'program': 'Moonraker', 'version': 'v0.8.0-41-g348b7f5'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 798, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 803, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
No build file /home/pi/klipper/klippy/../.config
No build file /home/pi/klipper/klippy/../out/klipper.dict
No build file /home/pi/klipper/klippy/../out/klipper.elf
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-l', '/home/pi/printer_data/logs/klippy.log', '-I', '/home/pi/printer_data/comms/klippy.serial', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.11.0-275-g8ef0f7d7e-dirty'
Untracked files: klippy/extras/gcode_shell_command.py, klippy/extras/magneto_load_cell.py
Modified files: .github/FUNDING.yml, .github/ISSUE_TEMPLATE/config.yml, .github/workflows/build-test.yaml, .github/workflows/invalid-label-bot.yaml, .github/workflows/klipper3d-deploy.yaml, .github/workflows/reviewer-needed-label.yaml, .github/workflows/stale-issue-bot.yaml, .gitignore, COPYING, Makefile, (+1624 files)
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
Start printer at Tue Apr  9 12:17:33 2024 (1712665053.7 24.0)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set allow_park = False if not macro_found
	else False if client.park_at_cancel is not defined
	else True  if client.park_at_cancel|lower == 'true'
	else False %}
	{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = ""                                    if not macro_found
	else ""                                    if client.park_at_cancel_x is not defined
	else "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}
	{% set park_y = ""                                    if not macro_found
	else ""                                    if client.park_at_cancel_y is not defined
	else "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}
	{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}
	
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
gcode = 
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE={printer[printer.toolhead.extruder].target}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_fan_speed VALUE={printer["fan"].speed}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_jetstream_speed VALUE={printer["fan_generic Jetstream"].speed}
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	G1 Z{printer.gcode_move.position.z+10} F300
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M107
	UPDATE_DELAYED_GCODE ID=cool_hot_end DURATION=240
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = 0
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}
	
	M109 S{last_extruder_temp}
	M106 S{last_fan_speed*255|int}
	SET_FAN_SPEED FAN=Jetstream SPEED={last_jetstream_speed}
	_CLIENT_EXTRUDE
	BASE_RESUME VELOCITY={params.VELOCITY|default(sp_move)}
variable_last_fan_speed = 0
variable_last_jetstream_speed = 0

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1) | int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = False if not macro_found
	else False if client.use_custom_pos is not defined
	else True  if client.use_custom_pos|lower == 'true'
	else False %}
	{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}
	{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}
	{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set use_fw_retract = False if not macro_found
	else False if client.use_fw_retract is not defined
	else True  if client.use_fw_retract|lower == 'true' and printer.firmware_retraction is defined
	else False %}
	
	{% set length = (params.LENGTH|float) if params.LENGTH is defined
	else 1.0 if not macro_found
	else client.unretract|default(1.0) %}
	
	{% set speed = params.SPEED if params.SPEED is defined
	else 35 if not macro_found
	else client.speed_unretract|default(35) %}
	
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.extruder.can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	
	{% set length = (params.LENGTH|float) if params.LENGTH is defined
	else 1.0 if not macro_found
	else client.retract|default(1.0) %}
	
	{% set speed = params.SPEED if params.SPEED is defined
	else 35 if not macro_found
	else client.speed_retract|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_BASE
gcode = 
	{% if "z" not in printer.toolhead.homed_axes %}
	G28 Z
	{% endif %}
	M118 Heating the bed, please wait...
	M190 S70
	M118 Complete heating and start executing bed mesh calibrate
	BED_MESH_CALIBRATE_BASE
	G28 Z

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing = QUAD_GANTRY_LEVEL_BASE
gcode = 
	G28
	M118 Heating the bed, please wait...
	M190 S70
	M118 Complete heating and start executing quad gantry level
	QUAD_GANTRY_LEVEL_BASE
	G28 Z

[gcode_macro CALIBRATE_BED]
description = Level bed and create or update the "default" mesh
gcode = 
	LM_ENABLE
	M190 S50
	M109 S150
	QUAD_GANTRY_LEVEL_BASE
	BED_MESH_CALIBRATE_BASE

[gcode_macro TUNE_BED_PID]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro TUNE_EXTRUDER_PID]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=190

[gcode_macro SET_XYZ_POSITION]
gcode = 
	SET_KINEMATIC_POSITION X=100 Y=100 Z=100

[gcode_macro RUN_INPUT_SHAPER]
gcode = 
	SHAPER_CALIBRATE

[gcode_macro PRINT_START]
gcode = 
	{% set EXTRUDER_TEMP = params.EXTRUDER|default(210)|float %}
	{% set BED_TEMP = params.BED|default(50)|float %}
	LM_ENABLE
	MESH_LOAD
	G28
	G90
	
	LINE_PURGE

[gcode_macro Z_TO_BOTTOM]
gcode = 
	G28
	G1 Z295

[delayed_gcode cool_hot_end]
gcode = 
	{% if printer['pause_resume'].is_paused|int == 1 %}
	M104 S0
	{% endif %}

[gcode_macro MESH_LOAD]
gcode = 
	BED_MESH_PROFILE LOAD=default

[delayed_gcode delay_disable_motor]
gcode = 
	LM_DISABLE

[gcode_macro PRINT_END]
gcode = 
	G91
	G1 Z5
	G1 E-5 F300
	G90
	G1 X200 Y10  F12000
	M104 S0
	M140 S0
	M106 S0
	UPDATE_DELAYED_GCODE ID=delay_disable_motor DURATION=30

[gcode_macro _C_UNLOAD_FILAMENT]
gcode = 
	{% if printer[printer.toolhead.extruder].temperature > printer.configfile.settings['extruder'].min_extrude_temp %}
	{% set speed = params.SPEED|default(300) %}
	{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
	G92 E0
	G1 E-20 F1200
	{% else %}
	M118 Extruder temperature too low, please heat the nozzle first
	{% endif %}

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M118 Unloading filament
	G28
	G0 Z50 F300
	G0 X250 Y200 F5000
	M118 Heating nozzle...
	M109 S250
	G91
	M118 Unloading...
	G0 E40 F360
	G0 E40 F360
	G0 E5 F1200
	M118 Heating nozzle to 165 ...
	M109 S165
	G0 E-45 F1200
	G0 E-45 F1200
	G0 E-45 F1200
	G0 E-45 F1200
	G90
	G92 E0
	M104 S0
	M118 Unload finish

[gcode_macro LOAD_FILAMENT]
gcode = 
	{% if printer[printer.toolhead.extruder].temperature > printer.configfile.settings['extruder'].min_extrude_temp %}
	{% set speed = params.SPEED|default(300) %}
	{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
	G91
	G92 E0
	G1 E25 F{speed}
	{% else %}
	M118 Extruder temperature too low,please heat the nozzle first
	{% endif %}

[gcode_macro M106]
rename_existing = G106
gcode = 
	{% if params.P is defined %}
	{% if params.P|int == 2 %}
	{% if params.S is defined %}
	{% if params.S|int == 255 %}
	{% set realspeed = 1 %}
	{% else %}
	{% if params.S|int == 0 %}
	{% set realspeed = 0 %}
	{% else %}
	{% set realspeed = params.S|float/255 %}
	{% endif %}
	{% endif %}
	{% else %}
	{% set realspeed = 1 %}
	{% endif %}
	
	SET_FAN_SPEED FAN=Jetstream SPEED={realspeed}
	{% endif %}
	{% else %}
	{% if params.S is defined %}
	G106 S{params.S}
	{% else %}
	G106 S255
	{% endif %}
	{% endif %}

[gcode_macro M107]
rename_existing = G107
gcode = 
	{% if params.P is defined %}
	{% if params.P|int == 2 %}
	SET_FAN_SPEED FAN=Jetstream SPEED=0
	{% endif %}
	{% else %}
	SET_FAN_SPEED FAN=Jetstream SPEED=0
	G107
	{% endif %}

[gcode_shell_command  GET_MIRROR_VERSION]
command = curl -G http://127.0.0.1:8880/get_os_version
timeout = 2.
verbose = True

[gcode_macro MAGNETO_OS_VERSION]
gcode = 
	RUN_SHELL_COMMAND CMD=GET_MIRROR_VERSION

[gcode_shell_command  RESIZE_FILE_SYSTEM]
command = curl -G http://127.0.0.1:8880/auto_resize_filesystem
timeout = 2.
verbose = False

[gcode_macro RESIZE_FILESYSTEM]
gcode = 
	RUN_SHELL_COMMAND CMD=RESIZE_FILE_SYSTEM

[gcode_shell_command  LINER_MOTOR_ENABLE]
command = curl -G http://127.0.0.1:8880/send_command?command=ENABLE
timeout = 2.
verbose = False

[gcode_shell_command  LINER_MOTOR_DISABLE]
command = curl -G http://127.0.0.1:8880/send_command?command=DISABLE
timeout = 2.
verbose = False

[gcode_macro LINER_MOTOR]
gcode = 
	{% if params.ENABLE is defined %}
	{% if params.ENABLE|int == 0 %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_DISABLE
	{% else %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE
	{% endif %}
	{% else %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE
	{% endif %}

[gcode_macro LM_ENABLE]
gcode = 
	G4 P500
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE

[gcode_macro LM_DISABLE]
gcode = 
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_DISABLE

[mcu MAG_TOOL]
canbus_uuid = c9fc3c9e8515

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00

[heater_fan hotend_fan]
pin = MAG_TOOL:gpio1
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0
fan_speed = 1.0

[magneto_load_cell]
pin = MAG_TOOL:gpio24

[gcode_button UNL_FILA]
pin = ~MAG_TOOL:gpio27
press_gcode = 
	
	_C_UNLOAD_FILAMENT

[gcode_button L_FILA]
pin = ^!MAG_TOOL:gpio20
press_gcode = 
	
	LOAD_FILAMENT

[output_pin _load_cell_reset_pin]
pin = MAG_TOOL:gpio25
pwm = False
value = 1

[gcode_macro CLEAR_LOAD_CELL]
gcode = 
	LC28

[adc_temperature magneto_adc]
temperature1 = 16
voltage1 = 3.189
temperature2 = 84
voltage2 = 2.457
temperature3 = 94
voltage3 = 2.02
temperature4 = 103
voltage4 = 1.86
temperature5 = 116
voltage5 = 1.60
temperature6 = 130
voltage6 = 1.33
temperature7 = 146
voltage7 = 1.06
temperature8 = 166
voltage8 = 0.781
temperature9 = 186
voltage9 = 0.573
temperature10 = 201
voltage10 = 0.431
temperature11 = 216
voltage11 = 0.329
temperature12 = 231
voltage12 = 0.263
temperature13 = 251
voltage13 = 0.215
temperature14 = 271
voltage14 = 0.144
temperature15 = 281
voltage15 = 0.121
temperature16 = 294
voltage16 = 0.101

[extruder]
step_pin = MAG_TOOL:gpio5
dir_pin = !MAG_TOOL:gpio4
enable_pin = !MAG_TOOL:gpio10
rotation_distance = 4.637
microsteps = 16
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.75
heater_pin = MAG_TOOL:gpio0
sensor_pin = MAG_TOOL:gpio26
sensor_type = magneto_adc
max_extrude_cross_section = 5
adc_voltage = 3.3
min_temp = -60
max_temp = 310
max_power = 0.75
min_extrude_temp = 160
control = pid
pid_kp = 14.434
pid_ki = 0.631
pid_kd = 82.604
pressure_advance = 0.0
pressure_advance_smooth_time = 0.040

[tmc2209 extruder]
uart_pin = MAG_TOOL:gpio6
interpolate = false
run_current = 0.8
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[adxl345]
cs_pin = MAG_TOOL:gpio13
spi_software_sclk_pin = MAG_TOOL:gpio14
spi_software_mosi_pin = MAG_TOOL:gpio15
spi_software_miso_pin = MAG_TOOL:gpio12

[resonance_tester]
accel_chip = adxl345
accel_per_hz = 100
probe_points = 200,150,20

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}
	{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | min %}
	{% set y_min = [ y_min - purge_margin , y_min ] | min %}
	{% set x_min = [ x_min , axis_minimum_x ] | max %}
	{% set y_min = [ y_min , axis_minimum_y ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	{% if printer.toolhead.position.z < z_height %}
	G0 Z{z_height}
	{% endif %}
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 10
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[idle_timeout]
timeout = 3600

[gcode_arcs]
resolution = 0.1

[probe]
pin = PE12
x_offset = 0
y_offset = 0
z_offset = -0.15
speed = 2
lift_speed = 7
samples = 3
samples_result = median
sample_retract_dist = 2
samples_tolerance = 0.1
samples_tolerance_retries = 5

[force_move]
enable_force_move = True

[quad_gantry_level]
gantry_corners = 
	0,0
	290,390
points = 
	25,25
	25,380
	290,380
	290,25
speed = 250
horizontal_move_z = 20
retries = 3
retry_tolerance = 0.12
max_adjust = 50

[stepper_x]
step_pin = PF13
dir_pin = !PF12
enable_pin = !PF14
microsteps = 16
endstop_pin = ^!PE8
rotation_distance = 3.2
step_pulse_duration = 0.0000002
position_endstop = 0
position_max = 300
homing_speed = 50

[gcode_button kill_switch]
pin = !PG11
press_gcode = 
	PAUSE
	M118 X or Y motion is blocked.
	M107
	M104 S0

[stepper_y]
step_pin = PG0
dir_pin = !PG1
enable_pin = !PF15
step_pulse_duration = 0.0000002
microsteps = 16
endstop_pin = ^!PE9
rotation_distance = 3.2
position_endstop = 0
position_max = 400
homing_speed = 50

[homing_override]
axes = xyz
set_position_z = 0
gcode = 
	LM_ENABLE
	{% if not 'Z' in params and not 'Y' in params and 'X' in params %}
	G28 X
	{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}
	G28 Y
	{% elif not 'Z' in params and 'X' in params and 'Y' in params %}
	G28 X
	G28 Y
	
	{% else %}
	G90
	G1 Z5
	G28 X
	G28 Y
	G0 X150 Y200 F6000
	G4 P3000
	LC28
	G28 Z
	G1 Z5
	{% endif %}

[bed_mesh]
mesh_min = 0, 0
mesh_max = 270,380
speed = 150
horizontal_move_z = 2
probe_count = 6,8
algorithm = bicubic
split_delta_z = 0.0125
move_check_distance = 3
mesh_pps = 4,4
fade_start = 0
fade_end = 3
fade_target = 0

[stepper_z]
step_pin = PF11
dir_pin = !PG3
enable_pin = !PG5
endstop_pin = probe:z_virtual_endstop
rotation_distance = 4
microsteps = 16
position_max = 300
position_min = -25
homing_speed = 5
second_homing_speed = 2
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = true
run_current = 0.9
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA2
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = true
run_current = 0.9
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z2]
step_pin = PF9
dir_pin = !PF10
enable_pin = !PG2
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = true
run_current = 0.9
hold_current = 0.50
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z3]
step_pin = PC13
dir_pin = !PF0
enable_pin = !PF1
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z3]
uart_pin = PE4
interpolate = true
run_current = 0.9
hold_current = 0.50
sense_resistor = 0.110
stealthchop_threshold = 100

[heater_bed]
heater_pin = PA1
sensor_pin = PF3
sensor_type = Generic 3950
control = pid
pid_kp = 63.238
pid_ki = 0.855
pid_kd = 1169.116
min_temp = -200
max_temp = 130

[multi_pin part_cooling]
pins = MAG_TOOL:gpio17, MAG_TOOL:gpio11

[multi_pin part_cooling_enable]
pins = MAG_TOOL:gpio3, MAG_TOOL:gpio2

[temperature_fan pi]
pin = PD15
max_power = 0.60
control = watermark
max_delta = 5.0
sensor_type = temperature_host
min_temp = 10.0
max_temp = 80.0
target_temp = 55.0
shutdown_speed = 0.0

[fan]
pin = multi_pin:part_cooling
max_power = 1.0
kick_start_time = 0.5
off_below = 0.10
enable_pin = multi_pin:part_cooling_enable

[fan_generic Jetstream]
pin = PE10
enable_pin = PE7
max_power = 1.0
kick_start_time = 0.5
cycle_time = 0.01
off_below = 0.4

[exclude_object]

[respond]

[printer]
kinematics = cartesian
max_velocity = 1500
max_accel = 15000
max_z_velocity = 5
max_z_accel = 100

[board_pins]
aliases = 
	
	EXP1_1=PE8, EXP1_2=PE7,
	EXP1_3=PE9, EXP1_4=PE10,
	EXP1_5=PE12, EXP1_6=PE13,
	EXP1_7=PE14, EXP1_8=PE15,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PA6, EXP2_2=PA5,
	EXP2_3=PB1, EXP2_4=PA4,
	EXP2_5=PB2, EXP2_6=PA7,
	EXP2_7=PC15, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=PC5

[output_pin _led_pin]
pin = PE13
pwm = False
value = 0

[gcode_macro TOGGLE_LIGHTS]
gcode = 
	{% if printer['output_pin _led_pin'].value == 1 %}
	SET_PIN PIN=_led_pin VALUE=0
	{% else %}
	SET_PIN PIN=_led_pin VALUE=1
	{% endif %}

[input_shaper]
shaper_type_y = zv
shaper_freq_y = 27.0
shaper_type_x = ei
shaper_freq_x = 44.4

[bed_mesh default]
version = 1
points = 
	-0.351250, -0.200000, -0.107500, -0.043750, -0.066250, -0.163750
	-0.265000, -0.126250, -0.016250, 0.040000, 0.007500, -0.127500
	-0.215000, -0.068750, -0.006250, 0.067500, 0.045000, -0.108750
	-0.165000, -0.070000, 0.005000, 0.051250, -0.002500, -0.166250
	-0.163750, -0.067500, -0.023750, 0.025000, -0.041250, -0.171250
	-0.138750, -0.117500, -0.038750, -0.031250, -0.075000, -0.188750
	-0.176250, -0.118750, -0.048750, -0.028750, -0.085000, -0.230000
	-0.247500, -0.176250, -0.148750, -0.081250, -0.102500, -0.218750
x_count = 6
y_count = 8
mesh_x_pps = 4
mesh_y_pps = 4
algo = bicubic
tension = 0.2
min_x = 0.0
max_x = 270.0
min_y = 0.0
max_y = 379.96
=======================
init magneto load cell
MAG_TOOL:gpio24
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
webhooks client 281473670331648: New connection
webhooks client 281473670331648: Client info {'program': 'Moonraker', 'version': 'v0.8.0-41-g348b7f5'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-l', '/home/pi/printer_data/logs/klippy.log', '-I', '/home/pi/printer_data/comms/klippy.serial', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.11.0-275-g8ef0f7d7e-dirty'
Untracked files: klippy/extras/gcode_shell_command.py, klippy/extras/magneto_load_cell.py
Modified files: .github/FUNDING.yml, .github/ISSUE_TEMPLATE/config.yml, .github/workflows/build-test.yaml, .github/workflows/invalid-label-bot.yaml, .github/workflows/klipper3d-deploy.yaml, .github/workflows/reviewer-needed-label.yaml, .github/workflows/stale-issue-bot.yaml, .gitignore, COPYING, Makefile, (+1624 files)
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
Start printer at Tue Apr  9 12:17:34 2024 (1712665054.0 24.4)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set allow_park = False if not macro_found
	else False if client.park_at_cancel is not defined
	else True  if client.park_at_cancel|lower == 'true'
	else False %}
	{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = ""                                    if not macro_found
	else ""                                    if client.park_at_cancel_x is not defined
	else "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}
	{% set park_y = ""                                    if not macro_found
	else ""                                    if client.park_at_cancel_y is not defined
	else "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}
	{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}
	
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
gcode = 
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE={printer[printer.toolhead.extruder].target}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_fan_speed VALUE={printer["fan"].speed}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_jetstream_speed VALUE={printer["fan_generic Jetstream"].speed}
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	G1 Z{printer.gcode_move.position.z+10} F300
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M107
	UPDATE_DELAYED_GCODE ID=cool_hot_end DURATION=240
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = 0
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}
	
	M109 S{last_extruder_temp}
	M106 S{last_fan_speed*255|int}
	SET_FAN_SPEED FAN=Jetstream SPEED={last_jetstream_speed}
	_CLIENT_EXTRUDE
	BASE_RESUME VELOCITY={params.VELOCITY|default(sp_move)}
variable_last_fan_speed = 0
variable_last_jetstream_speed = 0

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1) | int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = False if not macro_found
	else False if client.use_custom_pos is not defined
	else True  if client.use_custom_pos|lower == 'true'
	else False %}
	{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}
	{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}
	{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set use_fw_retract = False if not macro_found
	else False if client.use_fw_retract is not defined
	else True  if client.use_fw_retract|lower == 'true' and printer.firmware_retraction is defined
	else False %}
	
	{% set length = (params.LENGTH|float) if params.LENGTH is defined
	else 1.0 if not macro_found
	else client.unretract|default(1.0) %}
	
	{% set speed = params.SPEED if params.SPEED is defined
	else 35 if not macro_found
	else client.speed_unretract|default(35) %}
	
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.extruder.can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	
	{% set length = (params.LENGTH|float) if params.LENGTH is defined
	else 1.0 if not macro_found
	else client.retract|default(1.0) %}
	
	{% set speed = params.SPEED if params.SPEED is defined
	else 35 if not macro_found
	else client.speed_retract|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_BASE
gcode = 
	{% if "z" not in printer.toolhead.homed_axes %}
	G28 Z
	{% endif %}
	M118 Heating the bed, please wait...
	M190 S70
	M118 Complete heating and start executing bed mesh calibrate
	BED_MESH_CALIBRATE_BASE
	G28 Z

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing = QUAD_GANTRY_LEVEL_BASE
gcode = 
	G28
	M118 Heating the bed, please wait...
	M190 S70
	M118 Complete heating and start executing quad gantry level
	QUAD_GANTRY_LEVEL_BASE
	G28 Z

[gcode_macro CALIBRATE_BED]
description = Level bed and create or update the "default" mesh
gcode = 
	LM_ENABLE
	M190 S50
	M109 S150
	QUAD_GANTRY_LEVEL_BASE
	BED_MESH_CALIBRATE_BASE

[gcode_macro TUNE_BED_PID]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro TUNE_EXTRUDER_PID]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=190

[gcode_macro SET_XYZ_POSITION]
gcode = 
	SET_KINEMATIC_POSITION X=100 Y=100 Z=100

[gcode_macro RUN_INPUT_SHAPER]
gcode = 
	SHAPER_CALIBRATE

[gcode_macro PRINT_START]
gcode = 
	{% set EXTRUDER_TEMP = params.EXTRUDER|default(210)|float %}
	{% set BED_TEMP = params.BED|default(50)|float %}
	LM_ENABLE
	MESH_LOAD
	G28
	G90
	
	LINE_PURGE

[gcode_macro Z_TO_BOTTOM]
gcode = 
	G28
	G1 Z295

[delayed_gcode cool_hot_end]
gcode = 
	{% if printer['pause_resume'].is_paused|int == 1 %}
	M104 S0
	{% endif %}

[gcode_macro MESH_LOAD]
gcode = 
	BED_MESH_PROFILE LOAD=default

[delayed_gcode delay_disable_motor]
gcode = 
	LM_DISABLE

[gcode_macro PRINT_END]
gcode = 
	G91
	G1 Z5
	G1 E-5 F300
	G90
	G1 X200 Y10  F12000
	M104 S0
	M140 S0
	M106 S0
	UPDATE_DELAYED_GCODE ID=delay_disable_motor DURATION=30

[gcode_macro _C_UNLOAD_FILAMENT]
gcode = 
	{% if printer[printer.toolhead.extruder].temperature > printer.configfile.settings['extruder'].min_extrude_temp %}
	{% set speed = params.SPEED|default(300) %}
	{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
	G92 E0
	G1 E-20 F1200
	{% else %}
	M118 Extruder temperature too low, please heat the nozzle first
	{% endif %}

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M118 Unloading filament
	G28
	G0 Z50 F300
	G0 X250 Y200 F5000
	M118 Heating nozzle...
	M109 S250
	G91
	M118 Unloading...
	G0 E40 F360
	G0 E40 F360
	G0 E5 F1200
	M118 Heating nozzle to 165 ...
	M109 S165
	G0 E-45 F1200
	G0 E-45 F1200
	G0 E-45 F1200
	G0 E-45 F1200
	G90
	G92 E0
	M104 S0
	M118 Unload finish

[gcode_macro LOAD_FILAMENT]
gcode = 
	{% if printer[printer.toolhead.extruder].temperature > printer.configfile.settings['extruder'].min_extrude_temp %}
	{% set speed = params.SPEED|default(300) %}
	{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
	G91
	G92 E0
	G1 E25 F{speed}
	{% else %}
	M118 Extruder temperature too low,please heat the nozzle first
	{% endif %}

[gcode_macro M106]
rename_existing = G106
gcode = 
	{% if params.P is defined %}
	{% if params.P|int == 2 %}
	{% if params.S is defined %}
	{% if params.S|int == 255 %}
	{% set realspeed = 1 %}
	{% else %}
	{% if params.S|int == 0 %}
	{% set realspeed = 0 %}
	{% else %}
	{% set realspeed = params.S|float/255 %}
	{% endif %}
	{% endif %}
	{% else %}
	{% set realspeed = 1 %}
	{% endif %}
	
	SET_FAN_SPEED FAN=Jetstream SPEED={realspeed}
	{% endif %}
	{% else %}
	{% if params.S is defined %}
	G106 S{params.S}
	{% else %}
	G106 S255
	{% endif %}
	{% endif %}

[gcode_macro M107]
rename_existing = G107
gcode = 
	{% if params.P is defined %}
	{% if params.P|int == 2 %}
	SET_FAN_SPEED FAN=Jetstream SPEED=0
	{% endif %}
	{% else %}
	SET_FAN_SPEED FAN=Jetstream SPEED=0
	G107
	{% endif %}

[gcode_shell_command  GET_MIRROR_VERSION]
command = curl -G http://127.0.0.1:8880/get_os_version
timeout = 2.
verbose = True

[gcode_macro MAGNETO_OS_VERSION]
gcode = 
	RUN_SHELL_COMMAND CMD=GET_MIRROR_VERSION

[gcode_shell_command  RESIZE_FILE_SYSTEM]
command = curl -G http://127.0.0.1:8880/auto_resize_filesystem
timeout = 2.
verbose = False

[gcode_macro RESIZE_FILESYSTEM]
gcode = 
	RUN_SHELL_COMMAND CMD=RESIZE_FILE_SYSTEM

[gcode_shell_command  LINER_MOTOR_ENABLE]
command = curl -G http://127.0.0.1:8880/send_command?command=ENABLE
timeout = 2.
verbose = False

[gcode_shell_command  LINER_MOTOR_DISABLE]
command = curl -G http://127.0.0.1:8880/send_command?command=DISABLE
timeout = 2.
verbose = False

[gcode_macro LINER_MOTOR]
gcode = 
	{% if params.ENABLE is defined %}
	{% if params.ENABLE|int == 0 %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_DISABLE
	{% else %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE
	{% endif %}
	{% else %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE
	{% endif %}

[gcode_macro LM_ENABLE]
gcode = 
	G4 P500
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE

[gcode_macro LM_DISABLE]
gcode = 
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_DISABLE

[mcu MAG_TOOL]
canbus_uuid = c9fc3c9e8515

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00

[heater_fan hotend_fan]
pin = MAG_TOOL:gpio1
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0
fan_speed = 1.0

[magneto_load_cell]
pin = MAG_TOOL:gpio24

[gcode_button UNL_FILA]
pin = ~MAG_TOOL:gpio27
press_gcode = 
	
	_C_UNLOAD_FILAMENT

[gcode_button L_FILA]
pin = ^!MAG_TOOL:gpio20
press_gcode = 
	
	LOAD_FILAMENT

[output_pin _load_cell_reset_pin]
pin = MAG_TOOL:gpio25
pwm = False
value = 1

[gcode_macro CLEAR_LOAD_CELL]
gcode = 
	LC28

[adc_temperature magneto_adc]
temperature1 = 16
voltage1 = 3.189
temperature2 = 84
voltage2 = 2.457
temperature3 = 94
voltage3 = 2.02
temperature4 = 103
voltage4 = 1.86
temperature5 = 116
voltage5 = 1.60
temperature6 = 130
voltage6 = 1.33
temperature7 = 146
voltage7 = 1.06
temperature8 = 166
voltage8 = 0.781
temperature9 = 186
voltage9 = 0.573
temperature10 = 201
voltage10 = 0.431
temperature11 = 216
voltage11 = 0.329
temperature12 = 231
voltage12 = 0.263
temperature13 = 251
voltage13 = 0.215
temperature14 = 271
voltage14 = 0.144
temperature15 = 281
voltage15 = 0.121
temperature16 = 294
voltage16 = 0.101

[extruder]
step_pin = MAG_TOOL:gpio5
dir_pin = !MAG_TOOL:gpio4
enable_pin = !MAG_TOOL:gpio10
rotation_distance = 4.637
microsteps = 16
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.75
heater_pin = MAG_TOOL:gpio0
sensor_pin = MAG_TOOL:gpio26
sensor_type = magneto_adc
max_extrude_cross_section = 5
adc_voltage = 3.3
min_temp = -60
max_temp = 310
max_power = 0.75
min_extrude_temp = 160
control = pid
pid_kp = 14.434
pid_ki = 0.631
pid_kd = 82.604
pressure_advance = 0.0
pressure_advance_smooth_time = 0.040

[tmc2209 extruder]
uart_pin = MAG_TOOL:gpio6
interpolate = false
run_current = 0.8
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[adxl345]
cs_pin = MAG_TOOL:gpio13
spi_software_sclk_pin = MAG_TOOL:gpio14
spi_software_mosi_pin = MAG_TOOL:gpio15
spi_software_miso_pin = MAG_TOOL:gpio12

[resonance_tester]
accel_chip = adxl345
accel_per_hz = 100
probe_points = 200,150,20

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}
	{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | min %}
	{% set y_min = [ y_min - purge_margin , y_min ] | min %}
	{% set x_min = [ x_min , axis_minimum_x ] | max %}
	{% set y_min = [ y_min , axis_minimum_y ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	{% if printer.toolhead.position.z < z_height %}
	G0 Z{z_height}
	{% endif %}
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 10
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[idle_timeout]
timeout = 3600

[gcode_arcs]
resolution = 0.1

[probe]
pin = PE12
x_offset = 0
y_offset = 0
z_offset = -0.15
speed = 2
lift_speed = 7
samples = 3
samples_result = median
sample_retract_dist = 2
samples_tolerance = 0.1
samples_tolerance_retries = 5

[force_move]
enable_force_move = True

[quad_gantry_level]
gantry_corners = 
	0,0
	290,390
points = 
	25,25
	25,380
	290,380
	290,25
speed = 250
horizontal_move_z = 20
retries = 3
retry_tolerance = 0.12
max_adjust = 50

[stepper_x]
step_pin = PF13
dir_pin = !PF12
enable_pin = !PF14
microsteps = 16
endstop_pin = ^!PE8
rotation_distance = 3.2
step_pulse_duration = 0.0000002
position_endstop = 0
position_max = 300
homing_speed = 50

[gcode_button kill_switch]
pin = !PG11
press_gcode = 
	PAUSE
	M118 X or Y motion is blocked.
	M107
	M104 S0

[stepper_y]
step_pin = PG0
dir_pin = !PG1
enable_pin = !PF15
step_pulse_duration = 0.0000002
microsteps = 16
endstop_pin = ^!PE9
rotation_distance = 3.2
position_endstop = 0
position_max = 400
homing_speed = 50

[homing_override]
axes = xyz
set_position_z = 0
gcode = 
	LM_ENABLE
	{% if not 'Z' in params and not 'Y' in params and 'X' in params %}
	G28 X
	{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}
	G28 Y
	{% elif not 'Z' in params and 'X' in params and 'Y' in params %}
	G28 X
	G28 Y
	
	{% else %}
	G90
	G1 Z5
	G28 X
	G28 Y
	G0 X150 Y200 F6000
	G4 P3000
	LC28
	G28 Z
	G1 Z5
	{% endif %}

[bed_mesh]
mesh_min = 0, 0
mesh_max = 270,380
speed = 150
horizontal_move_z = 2
probe_count = 6,8
algorithm = bicubic
split_delta_z = 0.0125
move_check_distance = 3
mesh_pps = 4,4
fade_start = 0
fade_end = 3
fade_target = 0

[stepper_z]
step_pin = PF11
dir_pin = !PG3
enable_pin = !PG5
endstop_pin = probe:z_virtual_endstop
rotation_distance = 4
microsteps = 16
position_max = 300
position_min = -25
homing_speed = 5
second_homing_speed = 2
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = true
run_current = 0.9
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA2
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = true
run_current = 0.9
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z2]
step_pin = PF9
dir_pin = !PF10
enable_pin = !PG2
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = true
run_current = 0.9
hold_current = 0.50
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z3]
step_pin = PC13
dir_pin = !PF0
enable_pin = !PF1
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z3]
uart_pin = PE4
interpolate = true
run_current = 0.9
hold_current = 0.50
sense_resistor = 0.110
stealthchop_threshold = 100

[heater_bed]
heater_pin = PA1
sensor_pin = PF3
sensor_type = Generic 3950
control = pid
pid_kp = 63.238
pid_ki = 0.855
pid_kd = 1169.116
min_temp = -200
max_temp = 130

[multi_pin part_cooling]
pins = MAG_TOOL:gpio17, MAG_TOOL:gpio11

[multi_pin part_cooling_enable]
pins = MAG_TOOL:gpio3, MAG_TOOL:gpio2

[temperature_fan pi]
pin = PD15
max_power = 0.60
control = watermark
max_delta = 5.0
sensor_type = temperature_host
min_temp = 10.0
max_temp = 80.0
target_temp = 55.0
shutdown_speed = 0.0

[fan]
pin = multi_pin:part_cooling
max_power = 1.0
kick_start_time = 0.5
off_below = 0.10
enable_pin = multi_pin:part_cooling_enable

[fan_generic Jetstream]
pin = PE10
enable_pin = PE7
max_power = 1.0
kick_start_time = 0.5
cycle_time = 0.01
off_below = 0.4

[exclude_object]

[respond]

[printer]
kinematics = cartesian
max_velocity = 1500
max_accel = 15000
max_z_velocity = 5
max_z_accel = 100

[board_pins]
aliases = 
	
	EXP1_1=PE8, EXP1_2=PE7,
	EXP1_3=PE9, EXP1_4=PE10,
	EXP1_5=PE12, EXP1_6=PE13,
	EXP1_7=PE14, EXP1_8=PE15,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PA6, EXP2_2=PA5,
	EXP2_3=PB1, EXP2_4=PA4,
	EXP2_5=PB2, EXP2_6=PA7,
	EXP2_7=PC15, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=PC5

[output_pin _led_pin]
pin = PE13
pwm = False
value = 0

[gcode_macro TOGGLE_LIGHTS]
gcode = 
	{% if printer['output_pin _led_pin'].value == 1 %}
	SET_PIN PIN=_led_pin VALUE=0
	{% else %}
	SET_PIN PIN=_led_pin VALUE=1
	{% endif %}

[input_shaper]
shaper_type_y = zv
shaper_freq_y = 27.0
shaper_type_x = ei
shaper_freq_x = 44.4

[bed_mesh default]
version = 1
points = 
	-0.351250, -0.200000, -0.107500, -0.043750, -0.066250, -0.163750
	-0.265000, -0.126250, -0.016250, 0.040000, 0.007500, -0.127500
	-0.215000, -0.068750, -0.006250, 0.067500, 0.045000, -0.108750
	-0.165000, -0.070000, 0.005000, 0.051250, -0.002500, -0.166250
	-0.163750, -0.067500, -0.023750, 0.025000, -0.041250, -0.171250
	-0.138750, -0.117500, -0.038750, -0.031250, -0.075000, -0.188750
	-0.176250, -0.118750, -0.048750, -0.028750, -0.085000, -0.230000
	-0.247500, -0.176250, -0.148750, -0.081250, -0.102500, -0.218750
x_count = 6
y_count = 8
mesh_x_pps = 4
mesh_y_pps = 4
algo = bicubic
tension = 0.2
min_x = 0.0
max_x = 270.0
min_y = 0.0
max_y = 379.96
=======================
init magneto load cell
MAG_TOOL:gpio24
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
webhooks client 281473221344416: New connection
webhooks client 281473221344416: Client info {'program': 'Moonraker', 'version': 'v0.8.0-41-g348b7f5'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 798, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 803, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
No build file /home/pi/klipper/klippy/../.config
No build file /home/pi/klipper/klippy/../out/klipper.dict
No build file /home/pi/klipper/klippy/../out/klipper.elf
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-l', '/home/pi/printer_data/logs/klippy.log', '-I', '/home/pi/printer_data/comms/klippy.serial', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.11.0-275-g8ef0f7d7e-dirty'
Untracked files: klippy/extras/gcode_shell_command.py, klippy/extras/magneto_load_cell.py
Modified files: .github/FUNDING.yml, .github/ISSUE_TEMPLATE/config.yml, .github/workflows/build-test.yaml, .github/workflows/invalid-label-bot.yaml, .github/workflows/klipper3d-deploy.yaml, .github/workflows/reviewer-needed-label.yaml, .github/workflows/stale-issue-bot.yaml, .gitignore, COPYING, Makefile, (+1624 files)
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
Start printer at Tue Apr  9 12:17:33 2024 (1712665053.7 23.4)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set allow_park = False if not macro_found
	else False if client.park_at_cancel is not defined
	else True  if client.park_at_cancel|lower == 'true'
	else False %}
	{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = ""                                    if not macro_found
	else ""                                    if client.park_at_cancel_x is not defined
	else "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}
	{% set park_y = ""                                    if not macro_found
	else ""                                    if client.park_at_cancel_y is not defined
	else "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}
	{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}
	
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
gcode = 
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE={printer[printer.toolhead.extruder].target}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_fan_speed VALUE={printer["fan"].speed}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_jetstream_speed VALUE={printer["fan_generic Jetstream"].speed}
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	G1 Z{printer.gcode_move.position.z+10} F300
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M107
	UPDATE_DELAYED_GCODE ID=cool_hot_end DURATION=240
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = 0
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}
	
	M109 S{last_extruder_temp}
	M106 S{last_fan_speed*255|int}
	SET_FAN_SPEED FAN=Jetstream SPEED={last_jetstream_speed}
	_CLIENT_EXTRUDE
	BASE_RESUME VELOCITY={params.VELOCITY|default(sp_move)}
variable_last_fan_speed = 0
variable_last_jetstream_speed = 0

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1) | int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = False if not macro_found
	else False if client.use_custom_pos is not defined
	else True  if client.use_custom_pos|lower == 'true'
	else False %}
	{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}
	{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}
	{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set use_fw_retract = False if not macro_found
	else False if client.use_fw_retract is not defined
	else True  if client.use_fw_retract|lower == 'true' and printer.firmware_retraction is defined
	else False %}
	
	{% set length = (params.LENGTH|float) if params.LENGTH is defined
	else 1.0 if not macro_found
	else client.unretract|default(1.0) %}
	
	{% set speed = params.SPEED if params.SPEED is defined
	else 35 if not macro_found
	else client.speed_unretract|default(35) %}
	
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.extruder.can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	
	{% set length = (params.LENGTH|float) if params.LENGTH is defined
	else 1.0 if not macro_found
	else client.retract|default(1.0) %}
	
	{% set speed = params.SPEED if params.SPEED is defined
	else 35 if not macro_found
	else client.speed_retract|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_BASE
gcode = 
	{% if "z" not in printer.toolhead.homed_axes %}
	G28 Z
	{% endif %}
	M118 Heating the bed, please wait...
	M190 S70
	M118 Complete heating and start executing bed mesh calibrate
	BED_MESH_CALIBRATE_BASE
	G28 Z

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing = QUAD_GANTRY_LEVEL_BASE
gcode = 
	G28
	M118 Heating the bed, please wait...
	M190 S70
	M118 Complete heating and start executing quad gantry level
	QUAD_GANTRY_LEVEL_BASE
	G28 Z

[gcode_macro CALIBRATE_BED]
description = Level bed and create or update the "default" mesh
gcode = 
	LM_ENABLE
	M190 S50
	M109 S150
	QUAD_GANTRY_LEVEL_BASE
	BED_MESH_CALIBRATE_BASE

[gcode_macro TUNE_BED_PID]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro TUNE_EXTRUDER_PID]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=190

[gcode_macro SET_XYZ_POSITION]
gcode = 
	SET_KINEMATIC_POSITION X=100 Y=100 Z=100

[gcode_macro RUN_INPUT_SHAPER]
gcode = 
	SHAPER_CALIBRATE

[gcode_macro PRINT_START]
gcode = 
	{% set EXTRUDER_TEMP = params.EXTRUDER|default(210)|float %}
	{% set BED_TEMP = params.BED|default(50)|float %}
	LM_ENABLE
	MESH_LOAD
	G28
	G90
	
	LINE_PURGE

[gcode_macro Z_TO_BOTTOM]
gcode = 
	G28
	G1 Z295

[delayed_gcode cool_hot_end]
gcode = 
	{% if printer['pause_resume'].is_paused|int == 1 %}
	M104 S0
	{% endif %}

[gcode_macro MESH_LOAD]
gcode = 
	BED_MESH_PROFILE LOAD=default

[delayed_gcode delay_disable_motor]
gcode = 
	LM_DISABLE

[gcode_macro PRINT_END]
gcode = 
	G91
	G1 Z5
	G1 E-5 F300
	G90
	G1 X200 Y10  F12000
	M104 S0
	M140 S0
	M106 S0
	UPDATE_DELAYED_GCODE ID=delay_disable_motor DURATION=30

[gcode_macro _C_UNLOAD_FILAMENT]
gcode = 
	{% if printer[printer.toolhead.extruder].temperature > printer.configfile.settings['extruder'].min_extrude_temp %}
	{% set speed = params.SPEED|default(300) %}
	{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
	G92 E0
	G1 E-20 F1200
	{% else %}
	M118 Extruder temperature too low, please heat the nozzle first
	{% endif %}

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M118 Unloading filament
	G28
	G0 Z50 F300
	G0 X250 Y200 F5000
	M118 Heating nozzle...
	M109 S250
	G91
	M118 Unloading...
	G0 E40 F360
	G0 E40 F360
	G0 E5 F1200
	M118 Heating nozzle to 165 ...
	M109 S165
	G0 E-45 F1200
	G0 E-45 F1200
	G0 E-45 F1200
	G0 E-45 F1200
	G90
	G92 E0
	M104 S0
	M118 Unload finish

[gcode_macro LOAD_FILAMENT]
gcode = 
	{% if printer[printer.toolhead.extruder].temperature > printer.configfile.settings['extruder'].min_extrude_temp %}
	{% set speed = params.SPEED|default(300) %}
	{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
	G91
	G92 E0
	G1 E25 F{speed}
	{% else %}
	M118 Extruder temperature too low,please heat the nozzle first
	{% endif %}

[gcode_macro M106]
rename_existing = G106
gcode = 
	{% if params.P is defined %}
	{% if params.P|int == 2 %}
	{% if params.S is defined %}
	{% if params.S|int == 255 %}
	{% set realspeed = 1 %}
	{% else %}
	{% if params.S|int == 0 %}
	{% set realspeed = 0 %}
	{% else %}
	{% set realspeed = params.S|float/255 %}
	{% endif %}
	{% endif %}
	{% else %}
	{% set realspeed = 1 %}
	{% endif %}
	
	SET_FAN_SPEED FAN=Jetstream SPEED={realspeed}
	{% endif %}
	{% else %}
	{% if params.S is defined %}
	G106 S{params.S}
	{% else %}
	G106 S255
	{% endif %}
	{% endif %}

[gcode_macro M107]
rename_existing = G107
gcode = 
	{% if params.P is defined %}
	{% if params.P|int == 2 %}
	SET_FAN_SPEED FAN=Jetstream SPEED=0
	{% endif %}
	{% else %}
	SET_FAN_SPEED FAN=Jetstream SPEED=0
	G107
	{% endif %}

[gcode_shell_command  GET_MIRROR_VERSION]
command = curl -G http://127.0.0.1:8880/get_os_version
timeout = 2.
verbose = True

[gcode_macro MAGNETO_OS_VERSION]
gcode = 
	RUN_SHELL_COMMAND CMD=GET_MIRROR_VERSION

[gcode_shell_command  RESIZE_FILE_SYSTEM]
command = curl -G http://127.0.0.1:8880/auto_resize_filesystem
timeout = 2.
verbose = False

[gcode_macro RESIZE_FILESYSTEM]
gcode = 
	RUN_SHELL_COMMAND CMD=RESIZE_FILE_SYSTEM

[gcode_shell_command  LINER_MOTOR_ENABLE]
command = curl -G http://127.0.0.1:8880/send_command?command=ENABLE
timeout = 2.
verbose = False

[gcode_shell_command  LINER_MOTOR_DISABLE]
command = curl -G http://127.0.0.1:8880/send_command?command=DISABLE
timeout = 2.
verbose = False

[gcode_macro LINER_MOTOR]
gcode = 
	{% if params.ENABLE is defined %}
	{% if params.ENABLE|int == 0 %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_DISABLE
	{% else %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE
	{% endif %}
	{% else %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE
	{% endif %}

[gcode_macro LM_ENABLE]
gcode = 
	G4 P500
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE

[gcode_macro LM_DISABLE]
gcode = 
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_DISABLE

[mcu MAG_TOOL]
canbus_uuid = c9fc3c9e8515

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00

[heater_fan hotend_fan]
pin = MAG_TOOL:gpio1
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0
fan_speed = 1.0

[magneto_load_cell]
pin = MAG_TOOL:gpio24

[gcode_button UNL_FILA]
pin = ~MAG_TOOL:gpio27
press_gcode = 
	
	_C_UNLOAD_FILAMENT

[gcode_button L_FILA]
pin = ^!MAG_TOOL:gpio20
press_gcode = 
	
	LOAD_FILAMENT

[output_pin _load_cell_reset_pin]
pin = MAG_TOOL:gpio25
pwm = False
value = 1

[gcode_macro CLEAR_LOAD_CELL]
gcode = 
	LC28

[adc_temperature magneto_adc]
temperature1 = 16
voltage1 = 3.189
temperature2 = 84
voltage2 = 2.457
temperature3 = 94
voltage3 = 2.02
temperature4 = 103
voltage4 = 1.86
temperature5 = 116
voltage5 = 1.60
temperature6 = 130
voltage6 = 1.33
temperature7 = 146
voltage7 = 1.06
temperature8 = 166
voltage8 = 0.781
temperature9 = 186
voltage9 = 0.573
temperature10 = 201
voltage10 = 0.431
temperature11 = 216
voltage11 = 0.329
temperature12 = 231
voltage12 = 0.263
temperature13 = 251
voltage13 = 0.215
temperature14 = 271
voltage14 = 0.144
temperature15 = 281
voltage15 = 0.121
temperature16 = 294
voltage16 = 0.101

[extruder]
step_pin = MAG_TOOL:gpio5
dir_pin = !MAG_TOOL:gpio4
enable_pin = !MAG_TOOL:gpio10
rotation_distance = 4.637
microsteps = 16
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.75
heater_pin = MAG_TOOL:gpio0
sensor_pin = MAG_TOOL:gpio26
sensor_type = magneto_adc
max_extrude_cross_section = 5
adc_voltage = 3.3
min_temp = -60
max_temp = 310
max_power = 0.75
min_extrude_temp = 160
control = pid
pid_kp = 14.434
pid_ki = 0.631
pid_kd = 82.604
pressure_advance = 0.0
pressure_advance_smooth_time = 0.040

[tmc2209 extruder]
uart_pin = MAG_TOOL:gpio6
interpolate = false
run_current = 0.8
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[adxl345]
cs_pin = MAG_TOOL:gpio13
spi_software_sclk_pin = MAG_TOOL:gpio14
spi_software_mosi_pin = MAG_TOOL:gpio15
spi_software_miso_pin = MAG_TOOL:gpio12

[resonance_tester]
accel_chip = adxl345
accel_per_hz = 100
probe_points = 200,150,20

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}
	{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | min %}
	{% set y_min = [ y_min - purge_margin , y_min ] | min %}
	{% set x_min = [ x_min , axis_minimum_x ] | max %}
	{% set y_min = [ y_min , axis_minimum_y ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	{% if printer.toolhead.position.z < z_height %}
	G0 Z{z_height}
	{% endif %}
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 10
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[idle_timeout]
timeout = 3600

[gcode_arcs]
resolution = 0.1

[probe]
pin = PE12
x_offset = 0
y_offset = 0
z_offset = -0.15
speed = 2
lift_speed = 7
samples = 3
samples_result = median
sample_retract_dist = 2
samples_tolerance = 0.1
samples_tolerance_retries = 5

[force_move]
enable_force_move = True

[quad_gantry_level]
gantry_corners = 
	0,0
	290,390
points = 
	25,25
	25,380
	290,380
	290,25
speed = 250
horizontal_move_z = 20
retries = 3
retry_tolerance = 0.12
max_adjust = 50

[stepper_x]
step_pin = PF13
dir_pin = !PF12
enable_pin = !PF14
microsteps = 16
endstop_pin = ^!PE8
rotation_distance = 3.2
step_pulse_duration = 0.0000002
position_endstop = 0
position_max = 300
homing_speed = 50

[gcode_button kill_switch]
pin = !PG11
press_gcode = 
	PAUSE
	M118 X or Y motion is blocked.
	M107
	M104 S0

[stepper_y]
step_pin = PG0
dir_pin = !PG1
enable_pin = !PF15
step_pulse_duration = 0.0000002
microsteps = 16
endstop_pin = ^!PE9
rotation_distance = 3.2
position_endstop = 0
position_max = 400
homing_speed = 50

[homing_override]
axes = xyz
set_position_z = 0
gcode = 
	LM_ENABLE
	{% if not 'Z' in params and not 'Y' in params and 'X' in params %}
	G28 X
	{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}
	G28 Y
	{% elif not 'Z' in params and 'X' in params and 'Y' in params %}
	G28 X
	G28 Y
	
	{% else %}
	G90
	G1 Z5
	G28 X
	G28 Y
	G0 X150 Y200 F6000
	G4 P3000
	LC28
	G28 Z
	G1 Z5
	{% endif %}

[bed_mesh]
mesh_min = 0, 0
mesh_max = 270,380
speed = 150
horizontal_move_z = 2
probe_count = 6,8
algorithm = bicubic
split_delta_z = 0.0125
move_check_distance = 3
mesh_pps = 4,4
fade_start = 0
fade_end = 3
fade_target = 0

[stepper_z]
step_pin = PF11
dir_pin = !PG3
enable_pin = !PG5
endstop_pin = probe:z_virtual_endstop
rotation_distance = 4
microsteps = 16
position_max = 300
position_min = -25
homing_speed = 5
second_homing_speed = 2
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = true
run_current = 0.9
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA2
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = true
run_current = 0.9
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z2]
step_pin = PF9
dir_pin = !PF10
enable_pin = !PG2
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = true
run_current = 0.9
hold_current = 0.50
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z3]
step_pin = PC13
dir_pin = !PF0
enable_pin = !PF1
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z3]
uart_pin = PE4
interpolate = true
run_current = 0.9
hold_current = 0.50
sense_resistor = 0.110
stealthchop_threshold = 100

[heater_bed]
heater_pin = PA1
sensor_pin = PF3
sensor_type = Generic 3950
control = pid
pid_kp = 63.238
pid_ki = 0.855
pid_kd = 1169.116
min_temp = -200
max_temp = 130

[multi_pin part_cooling]
pins = MAG_TOOL:gpio17, MAG_TOOL:gpio11

[multi_pin part_cooling_enable]
pins = MAG_TOOL:gpio3, MAG_TOOL:gpio2

[temperature_fan pi]
pin = PD15
max_power = 0.60
control = watermark
max_delta = 5.0
sensor_type = temperature_host
min_temp = 10.0
max_temp = 80.0
target_temp = 55.0
shutdown_speed = 0.0

[fan]
pin = multi_pin:part_cooling
max_power = 1.0
kick_start_time = 0.5
off_below = 0.10
enable_pin = multi_pin:part_cooling_enable

[fan_generic Jetstream]
pin = PE10
enable_pin = PE7
max_power = 1.0
kick_start_time = 0.5
cycle_time = 0.01
off_below = 0.4

[exclude_object]

[respond]

[printer]
kinematics = cartesian
max_velocity = 1500
max_accel = 15000
max_z_velocity = 5
max_z_accel = 100

[board_pins]
aliases = 
	
	EXP1_1=PE8, EXP1_2=PE7,
	EXP1_3=PE9, EXP1_4=PE10,
	EXP1_5=PE12, EXP1_6=PE13,
	EXP1_7=PE14, EXP1_8=PE15,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PA6, EXP2_2=PA5,
	EXP2_3=PB1, EXP2_4=PA4,
	EXP2_5=PB2, EXP2_6=PA7,
	EXP2_7=PC15, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=PC5

[output_pin _led_pin]
pin = PE13
pwm = False
value = 0

[gcode_macro TOGGLE_LIGHTS]
gcode = 
	{% if printer['output_pin _led_pin'].value == 1 %}
	SET_PIN PIN=_led_pin VALUE=0
	{% else %}
	SET_PIN PIN=_led_pin VALUE=1
	{% endif %}

[input_shaper]
shaper_type_y = zv
shaper_freq_y = 27.0
shaper_type_x = ei
shaper_freq_x = 44.4

[bed_mesh default]
version = 1
points = 
	-0.351250, -0.200000, -0.107500, -0.043750, -0.066250, -0.163750
	-0.265000, -0.126250, -0.016250, 0.040000, 0.007500, -0.127500
	-0.215000, -0.068750, -0.006250, 0.067500, 0.045000, -0.108750
	-0.165000, -0.070000, 0.005000, 0.051250, -0.002500, -0.166250
	-0.163750, -0.067500, -0.023750, 0.025000, -0.041250, -0.171250
	-0.138750, -0.117500, -0.038750, -0.031250, -0.075000, -0.188750
	-0.176250, -0.118750, -0.048750, -0.028750, -0.085000, -0.230000
	-0.247500, -0.176250, -0.148750, -0.081250, -0.102500, -0.218750
x_count = 6
y_count = 8
mesh_x_pps = 4
mesh_y_pps = 4
algo = bicubic
tension = 0.2
min_x = 0.0
max_x = 270.0
min_y = 0.0
max_y = 379.96
=======================
init magneto load cell
MAG_TOOL:gpio24
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
webhooks client 281473803832480: New connection
webhooks client 281473803832480: Client info {'program': 'Moonraker', 'version': 'v0.8.0-41-g348b7f5'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
Attempting MCU 'mcu' reset
Unhandled exception during post run
Traceback (most recent call last):
  File "/home/pi/klippy-env/lib/python3.9/site-packages/serial/serialposix.py", line 265, in open
    self.fd = os.open(self.portstr, os.O_RDWR | os.O_NOCTTY | os.O_NONBLOCK)
FileNotFoundError: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 234, in run
    self.send_event("klippy:firmware_restart")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 949, in _firmware_restart
    self._restart_arduino()
  File "/home/pi/klipper/klippy/mcu.py", line 909, in _restart_arduino
    serialhdl.arduino_reset(self._serialport, self._reactor)
  File "/home/pi/klipper/klippy/serialhdl.py", line 379, in arduino_reset
    ser = serial.Serial(serialport, 2400, timeout=0, exclusive=True)
  File "/home/pi/klippy-env/lib/python3.9/site-packages/serial/serialutil.py", line 240, in __init__
    self.open()
  File "/home/pi/klippy-env/lib/python3.9/site-packages/serial/serialposix.py", line 268, in open
    raise SerialException(msg.errno, "could not open port {}: {}".format(self._port, msg))
serial.serialutil.SerialException: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
Restarting printer
Start printer at Tue Apr  9 12:18:53 2024 (1712665133.1 102.8)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set allow_park = False if not macro_found
	else False if client.park_at_cancel is not defined
	else True  if client.park_at_cancel|lower == 'true'
	else False %}
	{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = ""                                    if not macro_found
	else ""                                    if client.park_at_cancel_x is not defined
	else "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}
	{% set park_y = ""                                    if not macro_found
	else ""                                    if client.park_at_cancel_y is not defined
	else "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}
	{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}
	
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
gcode = 
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE={printer[printer.toolhead.extruder].target}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_fan_speed VALUE={printer["fan"].speed}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_jetstream_speed VALUE={printer["fan_generic Jetstream"].speed}
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	G1 Z{printer.gcode_move.position.z+10} F300
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M107
	UPDATE_DELAYED_GCODE ID=cool_hot_end DURATION=240
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = 0
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}
	
	M109 S{last_extruder_temp}
	M106 S{last_fan_speed*255|int}
	SET_FAN_SPEED FAN=Jetstream SPEED={last_jetstream_speed}
	_CLIENT_EXTRUDE
	BASE_RESUME VELOCITY={params.VELOCITY|default(sp_move)}
variable_last_fan_speed = 0
variable_last_jetstream_speed = 0

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1) | int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = False if not macro_found
	else False if client.use_custom_pos is not defined
	else True  if client.use_custom_pos|lower == 'true'
	else False %}
	{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}
	{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}
	{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set use_fw_retract = False if not macro_found
	else False if client.use_fw_retract is not defined
	else True  if client.use_fw_retract|lower == 'true' and printer.firmware_retraction is defined
	else False %}
	
	{% set length = (params.LENGTH|float) if params.LENGTH is defined
	else 1.0 if not macro_found
	else client.unretract|default(1.0) %}
	
	{% set speed = params.SPEED if params.SPEED is defined
	else 35 if not macro_found
	else client.speed_unretract|default(35) %}
	
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.extruder.can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	
	{% set length = (params.LENGTH|float) if params.LENGTH is defined
	else 1.0 if not macro_found
	else client.retract|default(1.0) %}
	
	{% set speed = params.SPEED if params.SPEED is defined
	else 35 if not macro_found
	else client.speed_retract|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_BASE
gcode = 
	{% if "z" not in printer.toolhead.homed_axes %}
	G28 Z
	{% endif %}
	M118 Heating the bed, please wait...
	M190 S70
	M118 Complete heating and start executing bed mesh calibrate
	BED_MESH_CALIBRATE_BASE
	G28 Z

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing = QUAD_GANTRY_LEVEL_BASE
gcode = 
	G28
	M118 Heating the bed, please wait...
	M190 S70
	M118 Complete heating and start executing quad gantry level
	QUAD_GANTRY_LEVEL_BASE
	G28 Z

[gcode_macro CALIBRATE_BED]
description = Level bed and create or update the "default" mesh
gcode = 
	LM_ENABLE
	M190 S50
	M109 S150
	QUAD_GANTRY_LEVEL_BASE
	BED_MESH_CALIBRATE_BASE

[gcode_macro TUNE_BED_PID]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro TUNE_EXTRUDER_PID]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=190

[gcode_macro SET_XYZ_POSITION]
gcode = 
	SET_KINEMATIC_POSITION X=100 Y=100 Z=100

[gcode_macro RUN_INPUT_SHAPER]
gcode = 
	SHAPER_CALIBRATE

[gcode_macro PRINT_START]
gcode = 
	{% set EXTRUDER_TEMP = params.EXTRUDER|default(210)|float %}
	{% set BED_TEMP = params.BED|default(50)|float %}
	LM_ENABLE
	MESH_LOAD
	G28
	G90
	
	LINE_PURGE

[gcode_macro Z_TO_BOTTOM]
gcode = 
	G28
	G1 Z295

[delayed_gcode cool_hot_end]
gcode = 
	{% if printer['pause_resume'].is_paused|int == 1 %}
	M104 S0
	{% endif %}

[gcode_macro MESH_LOAD]
gcode = 
	BED_MESH_PROFILE LOAD=default

[delayed_gcode delay_disable_motor]
gcode = 
	LM_DISABLE

[gcode_macro PRINT_END]
gcode = 
	G91
	G1 Z5
	G1 E-5 F300
	G90
	G1 X200 Y10  F12000
	M104 S0
	M140 S0
	M106 S0
	UPDATE_DELAYED_GCODE ID=delay_disable_motor DURATION=30

[gcode_macro _C_UNLOAD_FILAMENT]
gcode = 
	{% if printer[printer.toolhead.extruder].temperature > printer.configfile.settings['extruder'].min_extrude_temp %}
	{% set speed = params.SPEED|default(300) %}
	{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
	G92 E0
	G1 E-20 F1200
	{% else %}
	M118 Extruder temperature too low, please heat the nozzle first
	{% endif %}

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M118 Unloading filament
	G28
	G0 Z50 F300
	G0 X250 Y200 F5000
	M118 Heating nozzle...
	M109 S250
	G91
	M118 Unloading...
	G0 E40 F360
	G0 E40 F360
	G0 E5 F1200
	M118 Heating nozzle to 165 ...
	M109 S165
	G0 E-45 F1200
	G0 E-45 F1200
	G0 E-45 F1200
	G0 E-45 F1200
	G90
	G92 E0
	M104 S0
	M118 Unload finish

[gcode_macro LOAD_FILAMENT]
gcode = 
	{% if printer[printer.toolhead.extruder].temperature > printer.configfile.settings['extruder'].min_extrude_temp %}
	{% set speed = params.SPEED|default(300) %}
	{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
	G91
	G92 E0
	G1 E25 F{speed}
	{% else %}
	M118 Extruder temperature too low,please heat the nozzle first
	{% endif %}

[gcode_macro M106]
rename_existing = G106
gcode = 
	{% if params.P is defined %}
	{% if params.P|int == 2 %}
	{% if params.S is defined %}
	{% if params.S|int == 255 %}
	{% set realspeed = 1 %}
	{% else %}
	{% if params.S|int == 0 %}
	{% set realspeed = 0 %}
	{% else %}
	{% set realspeed = params.S|float/255 %}
	{% endif %}
	{% endif %}
	{% else %}
	{% set realspeed = 1 %}
	{% endif %}
	
	SET_FAN_SPEED FAN=Jetstream SPEED={realspeed}
	{% endif %}
	{% else %}
	{% if params.S is defined %}
	G106 S{params.S}
	{% else %}
	G106 S255
	{% endif %}
	{% endif %}

[gcode_macro M107]
rename_existing = G107
gcode = 
	{% if params.P is defined %}
	{% if params.P|int == 2 %}
	SET_FAN_SPEED FAN=Jetstream SPEED=0
	{% endif %}
	{% else %}
	SET_FAN_SPEED FAN=Jetstream SPEED=0
	G107
	{% endif %}

[gcode_shell_command  GET_MIRROR_VERSION]
command = curl -G http://127.0.0.1:8880/get_os_version
timeout = 2.
verbose = True

[gcode_macro MAGNETO_OS_VERSION]
gcode = 
	RUN_SHELL_COMMAND CMD=GET_MIRROR_VERSION

[gcode_shell_command  RESIZE_FILE_SYSTEM]
command = curl -G http://127.0.0.1:8880/auto_resize_filesystem
timeout = 2.
verbose = False

[gcode_macro RESIZE_FILESYSTEM]
gcode = 
	RUN_SHELL_COMMAND CMD=RESIZE_FILE_SYSTEM

[gcode_shell_command  LINER_MOTOR_ENABLE]
command = curl -G http://127.0.0.1:8880/send_command?command=ENABLE
timeout = 2.
verbose = False

[gcode_shell_command  LINER_MOTOR_DISABLE]
command = curl -G http://127.0.0.1:8880/send_command?command=DISABLE
timeout = 2.
verbose = False

[gcode_macro LINER_MOTOR]
gcode = 
	{% if params.ENABLE is defined %}
	{% if params.ENABLE|int == 0 %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_DISABLE
	{% else %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE
	{% endif %}
	{% else %}
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE
	{% endif %}

[gcode_macro LM_ENABLE]
gcode = 
	G4 P500
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE

[gcode_macro LM_DISABLE]
gcode = 
	RUN_SHELL_COMMAND CMD=LINER_MOTOR_DISABLE

[mcu MAG_TOOL]
canbus_uuid = c9fc3c9e8515

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00

[heater_fan hotend_fan]
pin = MAG_TOOL:gpio1
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0
fan_speed = 1.0

[magneto_load_cell]
pin = MAG_TOOL:gpio24

[gcode_button UNL_FILA]
pin = ~MAG_TOOL:gpio27
press_gcode = 
	
	_C_UNLOAD_FILAMENT

[gcode_button L_FILA]
pin = ^!MAG_TOOL:gpio20
press_gcode = 
	
	LOAD_FILAMENT

[output_pin _load_cell_reset_pin]
pin = MAG_TOOL:gpio25
pwm = False
value = 1

[gcode_macro CLEAR_LOAD_CELL]
gcode = 
	LC28

[adc_temperature magneto_adc]
temperature1 = 16
voltage1 = 3.189
temperature2 = 84
voltage2 = 2.457
temperature3 = 94
voltage3 = 2.02
temperature4 = 103
voltage4 = 1.86
temperature5 = 116
voltage5 = 1.60
temperature6 = 130
voltage6 = 1.33
temperature7 = 146
voltage7 = 1.06
temperature8 = 166
voltage8 = 0.781
temperature9 = 186
voltage9 = 0.573
temperature10 = 201
voltage10 = 0.431
temperature11 = 216
voltage11 = 0.329
temperature12 = 231
voltage12 = 0.263
temperature13 = 251
voltage13 = 0.215
temperature14 = 271
voltage14 = 0.144
temperature15 = 281
voltage15 = 0.121
temperature16 = 294
voltage16 = 0.101

[extruder]
step_pin = MAG_TOOL:gpio5
dir_pin = !MAG_TOOL:gpio4
enable_pin = !MAG_TOOL:gpio10
rotation_distance = 4.637
microsteps = 16
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.75
heater_pin = MAG_TOOL:gpio0
sensor_pin = MAG_TOOL:gpio26
sensor_type = magneto_adc
max_extrude_cross_section = 5
adc_voltage = 3.3
min_temp = -60
max_temp = 310
max_power = 0.75
min_extrude_temp = 160
control = pid
pid_kp = 14.434
pid_ki = 0.631
pid_kd = 82.604
pressure_advance = 0.0
pressure_advance_smooth_time = 0.040

[tmc2209 extruder]
uart_pin = MAG_TOOL:gpio6
interpolate = false
run_current = 0.8
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[adxl345]
cs_pin = MAG_TOOL:gpio13
spi_software_sclk_pin = MAG_TOOL:gpio14
spi_software_mosi_pin = MAG_TOOL:gpio15
spi_software_miso_pin = MAG_TOOL:gpio12

[resonance_tester]
accel_chip = adxl345
accel_per_hz = 100
probe_points = 200,150,20

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}
	{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | min %}
	{% set y_min = [ y_min - purge_margin , y_min ] | min %}
	{% set x_min = [ x_min , axis_minimum_x ] | max %}
	{% set y_min = [ y_min , axis_minimum_y ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	{% if printer.toolhead.position.z < z_height %}
	G0 Z{z_height}
	{% endif %}
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 10
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[idle_timeout]
timeout = 3600

[gcode_arcs]
resolution = 0.1

[probe]
pin = PE12
x_offset = 0
y_offset = 0
z_offset = -0.15
speed = 2
lift_speed = 7
samples = 3
samples_result = median
sample_retract_dist = 2
samples_tolerance = 0.1
samples_tolerance_retries = 5

[force_move]
enable_force_move = True

[quad_gantry_level]
gantry_corners = 
	0,0
	290,390
points = 
	25,25
	25,380
	290,380
	290,25
speed = 250
horizontal_move_z = 20
retries = 3
retry_tolerance = 0.12
max_adjust = 50

[stepper_x]
step_pin = PF13
dir_pin = !PF12
enable_pin = !PF14
microsteps = 16
endstop_pin = ^!PE8
rotation_distance = 3.2
step_pulse_duration = 0.0000002
position_endstop = 0
position_max = 300
homing_speed = 50

[gcode_button kill_switch]
pin = !PG11
press_gcode = 
	PAUSE
	M118 X or Y motion is blocked.
	M107
	M104 S0

[stepper_y]
step_pin = PG0
dir_pin = !PG1
enable_pin = !PF15
step_pulse_duration = 0.0000002
microsteps = 16
endstop_pin = ^!PE9
rotation_distance = 3.2
position_endstop = 0
position_max = 400
homing_speed = 50

[homing_override]
axes = xyz
set_position_z = 0
gcode = 
	LM_ENABLE
	{% if not 'Z' in params and not 'Y' in params and 'X' in params %}
	G28 X
	{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}
	G28 Y
	{% elif not 'Z' in params and 'X' in params and 'Y' in params %}
	G28 X
	G28 Y
	
	{% else %}
	G90
	G1 Z5
	G28 X
	G28 Y
	G0 X150 Y200 F6000
	G4 P3000
	LC28
	G28 Z
	G1 Z5
	{% endif %}

[bed_mesh]
mesh_min = 0, 0
mesh_max = 270,380
speed = 150
horizontal_move_z = 2
probe_count = 6,8
algorithm = bicubic
split_delta_z = 0.0125
move_check_distance = 3
mesh_pps = 4,4
fade_start = 0
fade_end = 3
fade_target = 0

[stepper_z]
step_pin = PF11
dir_pin = !PG3
enable_pin = !PG5
endstop_pin = probe:z_virtual_endstop
rotation_distance = 4
microsteps = 16
position_max = 300
position_min = -25
homing_speed = 5
second_homing_speed = 2
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = true
run_current = 0.9
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA2
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = true
run_current = 0.9
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z2]
step_pin = PF9
dir_pin = !PF10
enable_pin = !PG2
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = true
run_current = 0.9
hold_current = 0.50
sense_resistor = 0.110
stealthchop_threshold = 100

[stepper_z3]
step_pin = PC13
dir_pin = !PF0
enable_pin = !PF1
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z3]
uart_pin = PE4
interpolate = true
run_current = 0.9
hold_current = 0.50
sense_resistor = 0.110
stealthchop_threshold = 100

[heater_bed]
heater_pin = PA1
sensor_pin = PF3
sensor_type = Generic 3950
control = pid
pid_kp = 63.238
pid_ki = 0.855
pid_kd = 1169.116
min_temp = -200
max_temp = 130

[multi_pin part_cooling]
pins = MAG_TOOL:gpio17, MAG_TOOL:gpio11

[multi_pin part_cooling_enable]
pins = MAG_TOOL:gpio3, MAG_TOOL:gpio2

[temperature_fan pi]
pin = PD15
max_power = 0.60
control = watermark
max_delta = 5.0
sensor_type = temperature_host
min_temp = 10.0
max_temp = 80.0
target_temp = 55.0
shutdown_speed = 0.0

[fan]
pin = multi_pin:part_cooling
max_power = 1.0
kick_start_time = 0.5
off_below = 0.10
enable_pin = multi_pin:part_cooling_enable

[fan_generic Jetstream]
pin = PE10
enable_pin = PE7
max_power = 1.0
kick_start_time = 0.5
cycle_time = 0.01
off_below = 0.4

[exclude_object]

[respond]

[printer]
kinematics = cartesian
max_velocity = 1500
max_accel = 15000
max_z_velocity = 5
max_z_accel = 100

[board_pins]
aliases = 
	
	EXP1_1=PE8, EXP1_2=PE7,
	EXP1_3=PE9, EXP1_4=PE10,
	EXP1_5=PE12, EXP1_6=PE13,
	EXP1_7=PE14, EXP1_8=PE15,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PA6, EXP2_2=PA5,
	EXP2_3=PB1, EXP2_4=PA4,
	EXP2_5=PB2, EXP2_6=PA7,
	EXP2_7=PC15, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=PC5

[output_pin _led_pin]
pin = PE13
pwm = False
value = 0

[gcode_macro TOGGLE_LIGHTS]
gcode = 
	{% if printer['output_pin _led_pin'].value == 1 %}
	SET_PIN PIN=_led_pin VALUE=0
	{% else %}
	SET_PIN PIN=_led_pin VALUE=1
	{% endif %}

[input_shaper]
shaper_type_y = zv
shaper_freq_y = 27.0
shaper_type_x = ei
shaper_freq_x = 44.4

[bed_mesh default]
version = 1
points = 
	-0.351250, -0.200000, -0.107500, -0.043750, -0.066250, -0.163750
	-0.265000, -0.126250, -0.016250, 0.040000, 0.007500, -0.127500
	-0.215000, -0.068750, -0.006250, 0.067500, 0.045000, -0.108750
	-0.165000, -0.070000, 0.005000, 0.051250, -0.002500, -0.166250
	-0.163750, -0.067500, -0.023750, 0.025000, -0.041250, -0.171250
	-0.138750, -0.117500, -0.038750, -0.031250, -0.075000, -0.188750
	-0.176250, -0.118750, -0.048750, -0.028750, -0.085000, -0.230000
	-0.247500, -0.176250, -0.148750, -0.081250, -0.102500, -0.218750
x_count = 6
y_count = 8
mesh_x_pps = 4
mesh_y_pps = 4
algo = bicubic
tension = 0.2
min_x = 0.0
max_x = 270.0
min_y = 0.0
max_y = 379.96
=======================
init magneto load cell
MAG_TOOL:gpio24
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
webhooks client 281473803217648: New connection
webhooks client 281473803217648: Client info {'program': 'Moonraker', 'version': 'v0.8.0-41-g348b7f5'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32h723xx_43002B001751313434373135-if00'
